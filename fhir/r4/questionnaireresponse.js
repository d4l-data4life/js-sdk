'use strict';
var formats = require('ajv/lib/compile/formats')();
import equal from 'ajv/lib/compile/equal';
var validate = (function() {
  var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
  var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
  var pattern2 = new RegExp('^\\S*$');
  var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
  var pattern4 = new RegExp('^true|false$');
  var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
  var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
  var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
  var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
  var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
  var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
  var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
  var pattern12 = new RegExp('^[1-9][0-9]*$');
  var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
  var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
  var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
  var refVal = [];
  var refVal1 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [{
                keyword: 'additionalProperties',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/additionalProperties',
                params: {
                  additionalProperty: '' + key0 + ''
                },
                message: 'should NOT have additional properties'
              }];
              return false;
              break;
            }
          }
          if (valid1) {
            if (data.resourceType === undefined) {
              valid1 = false;
              validate.errors = [{
                keyword: 'required',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/required',
                params: {
                  missingProperty: 'resourceType'
                },
                message: 'should have required property \'resourceType\''
              }];
              return false;
            } else {
              var errs_1 = errors;
              var schema1 = 'QuestionnaireResponse';
              var valid1 = equal(data.resourceType, schema1);
              if (!valid1) {
                validate.errors = [{
                  keyword: 'const',
                  dataPath: (dataPath || '') + '.resourceType',
                  schemaPath: '#/properties/resourceType/const',
                  params: {
                    allowedValue: schema1
                  },
                  message: 'should be equal to constant'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.id;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern0.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.id',
                      schemaPath: '#/definitions/id/pattern',
                      params: {
                        pattern: '^[A-Za-z0-9\\-\\.]{1,64}$'
                      },
                      message: 'should match pattern "^[A-Za-z0-9\\-\\.]{1,64}$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.id',
                    schemaPath: '#/definitions/id/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.meta === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal3(data.meta, (dataPath || '') + '.meta', data, 'meta', rootData)) {
                    if (vErrors === null) vErrors = refVal3.errors;
                    else vErrors = vErrors.concat(refVal3.errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.implicitRules;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern2.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.implicitRules',
                          schemaPath: '#/definitions/uri/pattern',
                          params: {
                            pattern: '^\\S*$'
                          },
                          message: 'should match pattern "^\\S*$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.implicitRules',
                        schemaPath: '#/definitions/uri/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._implicitRules === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._implicitRules, (dataPath || '') + '._implicitRules', data, '_implicitRules', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.language;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern5.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.language',
                              schemaPath: '#/definitions/code/pattern',
                              params: {
                                pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                              },
                              message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.language',
                            schemaPath: '#/definitions/code/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._language === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._language, (dataPath || '') + '._language', data, '_language', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data.text === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal56(data.text, (dataPath || '') + '.text', data, 'text', rootData)) {
                              if (vErrors === null) vErrors = refVal56.errors;
                              else vErrors = vErrors.concat(refVal56.errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data.contained;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal58(data1[i1], (dataPath || '') + '.contained[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal58.errors;
                                    else vErrors = vErrors.concat(refVal58.errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.contained',
                                  schemaPath: '#/properties/contained/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.extension;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__1 = errors;
                                  var valid1;
                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                    var errs_2 = errors;
                                    if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                                      if (vErrors === null) vErrors = refVal[5].errors;
                                      else vErrors = vErrors.concat(refVal[5].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                    if (!valid2) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.extension',
                                    schemaPath: '#/properties/extension/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                var data1 = data.modifierExtension;
                                if (data1 === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (Array.isArray(data1)) {
                                    var errs__1 = errors;
                                    var valid1;
                                    for (var i1 = 0; i1 < data1.length; i1++) {
                                      var errs_2 = errors;
                                      if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                                        if (vErrors === null) vErrors = refVal[5].errors;
                                        else vErrors = vErrors.concat(refVal[5].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                      if (!valid2) break;
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.modifierExtension',
                                      schemaPath: '#/properties/modifierExtension/type',
                                      params: {
                                        type: 'array'
                                      },
                                      message: 'should be array'
                                    }];
                                    return false;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data.identifier === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (!refVal[16](data.identifier, (dataPath || '') + '.identifier', data, 'identifier', rootData)) {
                                      if (vErrors === null) vErrors = refVal[16].errors;
                                      else vErrors = vErrors.concat(refVal[16].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    var data1 = data.basedOn;
                                    if (data1 === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (Array.isArray(data1)) {
                                        var errs__1 = errors;
                                        var valid1;
                                        for (var i1 = 0; i1 < data1.length; i1++) {
                                          var errs_2 = errors;
                                          if (!refVal[15](data1[i1], (dataPath || '') + '.basedOn[' + i1 + ']', data1, i1, rootData)) {
                                            if (vErrors === null) vErrors = refVal[15].errors;
                                            else vErrors = vErrors.concat(refVal[15].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                          if (!valid2) break;
                                        }
                                      } else {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.basedOn',
                                          schemaPath: '#/properties/basedOn/type',
                                          params: {
                                            type: 'array'
                                          },
                                          message: 'should be array'
                                        }];
                                        return false;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.partOf;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        if (Array.isArray(data1)) {
                                          var errs__1 = errors;
                                          var valid1;
                                          for (var i1 = 0; i1 < data1.length; i1++) {
                                            var errs_2 = errors;
                                            if (!refVal[15](data1[i1], (dataPath || '') + '.partOf[' + i1 + ']', data1, i1, rootData)) {
                                              if (vErrors === null) vErrors = refVal[15].errors;
                                              else vErrors = vErrors.concat(refVal[15].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid2 = errors === errs_2;
                                            if (!valid2) break;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.partOf',
                                            schemaPath: '#/properties/partOf/type',
                                            params: {
                                              type: 'array'
                                            },
                                            message: 'should be array'
                                          }];
                                          return false;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        var data1 = data.questionnaire;
                                        if (data1 === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          var errs_2 = errors;
                                          if (typeof data1 === "string") {
                                            if (!pattern2.test(data1)) {
                                              validate.errors = [{
                                                keyword: 'pattern',
                                                dataPath: (dataPath || '') + '.questionnaire',
                                                schemaPath: '#/definitions/canonical/pattern',
                                                params: {
                                                  pattern: '^\\S*$'
                                                },
                                                message: 'should match pattern "^\\S*$"'
                                              }];
                                              return false;
                                            }
                                          } else {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '.questionnaire',
                                              schemaPath: '#/definitions/canonical/type',
                                              params: {
                                                type: 'string'
                                              },
                                              message: 'should be string'
                                            }];
                                            return false;
                                          }
                                          var valid2 = errors === errs_2;
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          if (data.status === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            var schema1 = validate.schema.properties.status.enum;
                                            var valid1;
                                            valid1 = false;
                                            for (var i1 = 0; i1 < schema1.length; i1++)
                                              if (equal(data.status, schema1[i1])) {
                                                valid1 = true;
                                                break;
                                              } if (!valid1) {
                                              validate.errors = [{
                                                keyword: 'enum',
                                                dataPath: (dataPath || '') + '.status',
                                                schemaPath: '#/properties/status/enum',
                                                params: {
                                                  allowedValues: schema1
                                                },
                                                message: 'should be equal to one of the allowed values'
                                              }];
                                              return false;
                                            }
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            if (data._status === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (!refVal[7](data._status, (dataPath || '') + '._status', data, '_status', rootData)) {
                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              if (data.subject === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                if (!refVal[15](data.subject, (dataPath || '') + '.subject', data, 'subject', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[15].errors;
                                                  else vErrors = vErrors.concat(refVal[15].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data.encounter === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[15](data.encounter, (dataPath || '') + '.encounter', data, 'encounter', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[15].errors;
                                                    else vErrors = vErrors.concat(refVal[15].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  var data1 = data.authored;
                                                  if (data1 === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    var errs_2 = errors;
                                                    if (typeof data1 === "string") {
                                                      if (!pattern7.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.authored',
                                                          schemaPath: '#/definitions/dateTime/pattern',
                                                          params: {
                                                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                                          },
                                                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                                                        }];
                                                        return false;
                                                      }
                                                    } else {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.authored',
                                                        schemaPath: '#/definitions/dateTime/type',
                                                        params: {
                                                          type: 'string'
                                                        },
                                                        message: 'should be string'
                                                      }];
                                                      return false;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                    var valid1 = errors === errs_1;
                                                  }
                                                  if (valid1) {
                                                    if (data._authored === undefined) {
                                                      valid1 = true;
                                                    } else {
                                                      var errs_1 = errors;
                                                      if (!refVal[7](data._authored, (dataPath || '') + '._authored', data, '_authored', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid1 = errors === errs_1;
                                                    }
                                                    if (valid1) {
                                                      if (data.author === undefined) {
                                                        valid1 = true;
                                                      } else {
                                                        var errs_1 = errors;
                                                        if (!refVal[15](data.author, (dataPath || '') + '.author', data, 'author', rootData)) {
                                                          if (vErrors === null) vErrors = refVal[15].errors;
                                                          else vErrors = vErrors.concat(refVal[15].errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid1 = errors === errs_1;
                                                      }
                                                      if (valid1) {
                                                        if (data.source === undefined) {
                                                          valid1 = true;
                                                        } else {
                                                          var errs_1 = errors;
                                                          if (!refVal[15](data.source, (dataPath || '') + '.source', data, 'source', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[15].errors;
                                                            else vErrors = vErrors.concat(refVal[15].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid1 = errors === errs_1;
                                                        }
                                                        if (valid1) {
                                                          var data1 = data.item;
                                                          if (data1 === undefined) {
                                                            valid1 = true;
                                                          } else {
                                                            var errs_1 = errors;
                                                            if (Array.isArray(data1)) {
                                                              var errs__1 = errors;
                                                              var valid1;
                                                              for (var i1 = 0; i1 < data1.length; i1++) {
                                                                var errs_2 = errors;
                                                                if (!refVal59(data1[i1], (dataPath || '') + '.item[' + i1 + ']', data1, i1, rootData)) {
                                                                  if (vErrors === null) vErrors = refVal59.errors;
                                                                  else vErrors = vErrors.concat(refVal59.errors);
                                                                  errors = vErrors.length;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                                if (!valid2) break;
                                                              }
                                                            } else {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '.item',
                                                                schemaPath: '#/properties/item/type',
                                                                params: {
                                                                  type: 'array'
                                                                },
                                                                message: 'should be array'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid1 = errors === errs_1;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal1.schema = {
    "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
    "properties": {
      "resourceType": {
        "description": "This is a QuestionnaireResponse resource",
        "const": "QuestionnaireResponse"
      },
      "id": {
        "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
        "$ref": "#/definitions/id"
      },
      "meta": {
        "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
        "$ref": "#/definitions/Meta"
      },
      "implicitRules": {
        "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
        "$ref": "#/definitions/uri"
      },
      "_implicitRules": {
        "description": "Extensions for implicitRules",
        "$ref": "#/definitions/Element"
      },
      "language": {
        "description": "The base language in which the resource is written.",
        "$ref": "#/definitions/code"
      },
      "_language": {
        "description": "Extensions for language",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
        "$ref": "#/definitions/Narrative"
      },
      "contained": {
        "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
        "items": {
          "$ref": "#/definitions/ResourceList"
        },
        "type": "array"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "identifier": {
        "description": "A business identifier assigned to a particular completed (or partially completed) questionnaire.",
        "$ref": "#/definitions/Identifier"
      },
      "basedOn": {
        "description": "The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.",
        "items": {
          "$ref": "#/definitions/Reference"
        },
        "type": "array"
      },
      "partOf": {
        "description": "A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.",
        "items": {
          "$ref": "#/definitions/Reference"
        },
        "type": "array"
      },
      "questionnaire": {
        "description": "The Questionnaire that defines and organizes the questions for which answers are being provided.",
        "$ref": "#/definitions/canonical"
      },
      "status": {
        "description": "The position of the questionnaire response within its overall lifecycle.",
        "enum": ["in-progress", "completed", "amended", "entered-in-error", "stopped"]
      },
      "_status": {
        "description": "Extensions for status",
        "$ref": "#/definitions/Element"
      },
      "subject": {
        "description": "The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.",
        "$ref": "#/definitions/Reference"
      },
      "encounter": {
        "description": "The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.",
        "$ref": "#/definitions/Reference"
      },
      "authored": {
        "description": "The date and/or time that this set of answers were last changed.",
        "$ref": "#/definitions/dateTime"
      },
      "_authored": {
        "description": "Extensions for authored",
        "$ref": "#/definitions/Element"
      },
      "author": {
        "description": "Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.",
        "$ref": "#/definitions/Reference"
      },
      "source": {
        "description": "The person who answered the questions about the subject.",
        "$ref": "#/definitions/Reference"
      },
      "item": {
        "description": "A group or question item from the original questionnaire for which answers are provided.",
        "items": {
          "$ref": "#/definitions/QuestionnaireResponse_Item"
        },
        "type": "array"
      }
    },
    "additionalProperties": false,
    "required": ["resourceType"]
  };
  refVal1.errors = null;
  refVal[1] = refVal1;
  var refVal2 = {
    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
    "type": "string",
    "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
  };
  refVal[2] = refVal2;
  var refVal3 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal5(data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal5.errors;
                    else vErrors = vErrors.concat(refVal5.errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.versionId;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern0.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.versionId',
                      schemaPath: '#/definitions/id/pattern',
                      params: {
                        pattern: '^[A-Za-z0-9\\-\\.]{1,64}$'
                      },
                      message: 'should match pattern "^[A-Za-z0-9\\-\\.]{1,64}$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.versionId',
                    schemaPath: '#/definitions/id/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._versionId === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._versionId, (dataPath || '') + '._versionId', data, '_versionId', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.lastUpdated;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern9.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.lastUpdated',
                          schemaPath: '#/definitions/instant/pattern',
                          params: {
                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$'
                          },
                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.lastUpdated',
                        schemaPath: '#/definitions/instant/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._lastUpdated === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._lastUpdated, (dataPath || '') + '._lastUpdated', data, '_lastUpdated', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.source;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern2.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.source',
                              schemaPath: '#/definitions/uri/pattern',
                              params: {
                                pattern: '^\\S*$'
                              },
                              message: 'should match pattern "^\\S*$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.source',
                            schemaPath: '#/definitions/uri/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._source === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._source, (dataPath || '') + '._source', data, '_source', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.profile;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (Array.isArray(data1)) {
                              var errs__1 = errors;
                              var valid1;
                              for (var i1 = 0; i1 < data1.length; i1++) {
                                var data2 = data1[i1];
                                var errs_2 = errors;
                                var errs_3 = errors;
                                if (typeof data2 === "string") {
                                  if (!pattern2.test(data2)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.profile[' + i1 + ']',
                                      schemaPath: '#/definitions/canonical/pattern',
                                      params: {
                                        pattern: '^\\S*$'
                                      },
                                      message: 'should match pattern "^\\S*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.profile[' + i1 + ']',
                                    schemaPath: '#/definitions/canonical/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid3 = errors === errs_3;
                                var valid2 = errors === errs_2;
                                if (!valid2) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.profile',
                                schemaPath: '#/properties/profile/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data.security;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal[18](data1[i1], (dataPath || '') + '.security[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal[18].errors;
                                    else vErrors = vErrors.concat(refVal[18].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.security',
                                  schemaPath: '#/properties/security/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.tag;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__1 = errors;
                                  var valid1;
                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                    var errs_2 = errors;
                                    if (!refVal[18](data1[i1], (dataPath || '') + '.tag[' + i1 + ']', data1, i1, rootData)) {
                                      if (vErrors === null) vErrors = refVal[18].errors;
                                      else vErrors = vErrors.concat(refVal[18].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                    if (!valid2) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.tag',
                                    schemaPath: '#/properties/tag/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal3.schema = {
    "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "versionId": {
        "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
        "$ref": "#/definitions/id"
      },
      "_versionId": {
        "description": "Extensions for versionId",
        "$ref": "#/definitions/Element"
      },
      "lastUpdated": {
        "description": "When the resource last changed - e.g. when the version changed.",
        "$ref": "#/definitions/instant"
      },
      "_lastUpdated": {
        "description": "Extensions for lastUpdated",
        "$ref": "#/definitions/Element"
      },
      "source": {
        "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
        "$ref": "#/definitions/uri"
      },
      "_source": {
        "description": "Extensions for source",
        "$ref": "#/definitions/Element"
      },
      "profile": {
        "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
        "items": {
          "$ref": "#/definitions/canonical"
        },
        "type": "array"
      },
      "security": {
        "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
        "items": {
          "$ref": "#/definitions/Coding"
        },
        "type": "array"
      },
      "tag": {
        "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
        "items": {
          "$ref": "#/definitions/Coding"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal3.errors = null;
  refVal[3] = refVal3;
  var refVal4 = {
    "pattern": "^[ \\r\\n\\t\\S]+$",
    "type": "string",
    "description": "A sequence of Unicode characters"
  };
  refVal[4] = refVal4;
  var refVal5 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.url;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern2.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.url',
                      schemaPath: '#/definitions/uri/pattern',
                      params: {
                        pattern: '^\\S*$'
                      },
                      message: 'should match pattern "^\\S*$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.url',
                    schemaPath: '#/definitions/uri/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._url === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal7(data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                    if (vErrors === null) vErrors = refVal7.errors;
                    else vErrors = vErrors.concat(refVal7.errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.valueBase64Binary;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern3.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.valueBase64Binary',
                          schemaPath: '#/properties/valueBase64Binary/pattern',
                          params: {
                            pattern: '^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$'
                          },
                          message: 'should match pattern "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.valueBase64Binary',
                        schemaPath: '#/properties/valueBase64Binary/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._valueBase64Binary === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._valueBase64Binary, (dataPath || '') + '._valueBase64Binary', data, '_valueBase64Binary', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.valueBoolean;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (typeof data1 !== "boolean") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.valueBoolean',
                            schemaPath: '#/properties/valueBoolean/type',
                            params: {
                              type: 'boolean'
                            },
                            message: 'should be boolean'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern4.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.valueBoolean',
                              schemaPath: '#/properties/valueBoolean/pattern',
                              params: {
                                pattern: '^true|false$'
                              },
                              message: 'should match pattern "^true|false$"'
                            }];
                            return false;
                          }
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._valueBoolean === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._valueBoolean, (dataPath || '') + '._valueBoolean', data, '_valueBoolean', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.valueCanonical;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.valueCanonical',
                                  schemaPath: '#/properties/valueCanonical/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.valueCanonical',
                                schemaPath: '#/properties/valueCanonical/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._valueCanonical === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._valueCanonical, (dataPath || '') + '._valueCanonical', data, '_valueCanonical', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.valueCode;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.valueCode',
                                      schemaPath: '#/properties/valueCode/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.valueCode',
                                    schemaPath: '#/properties/valueCode/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._valueCode === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._valueCode, (dataPath || '') + '._valueCode', data, '_valueCode', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.valueDate;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (typeof data1 === "string") {
                                      if (!pattern6.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.valueDate',
                                          schemaPath: '#/properties/valueDate/pattern',
                                          params: {
                                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$'
                                          },
                                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$"'
                                        }];
                                        return false;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.valueDate',
                                        schemaPath: '#/properties/valueDate/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._valueDate === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._valueDate, (dataPath || '') + '._valueDate', data, '_valueDate', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.valueDateTime;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern7.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.valueDateTime',
                                              schemaPath: '#/properties/valueDateTime/pattern',
                                              params: {
                                                pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                              },
                                              message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.valueDateTime',
                                            schemaPath: '#/properties/valueDateTime/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data._valueDateTime === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[7](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          var data1 = data.valueDecimal;
                                          if (data1 === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            if (typeof data1 !== "number") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.valueDecimal',
                                                schemaPath: '#/properties/valueDecimal/type',
                                                params: {
                                                  type: 'number'
                                                },
                                                message: 'should be number'
                                              }];
                                              return false;
                                            }
                                            if (typeof data1 === "string") {
                                              if (!pattern8.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.valueDecimal',
                                                  schemaPath: '#/properties/valueDecimal/pattern',
                                                  params: {
                                                    pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                                  },
                                                  message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                                }];
                                                return false;
                                              }
                                            }
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            if (data._valueDecimal === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (!refVal[7](data._valueDecimal, (dataPath || '') + '._valueDecimal', data, '_valueDecimal', rootData)) {
                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              var data1 = data.valueId;
                                              if (data1 === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                if (typeof data1 === "string") {
                                                  if (!pattern0.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.valueId',
                                                      schemaPath: '#/properties/valueId/pattern',
                                                      params: {
                                                        pattern: '^[A-Za-z0-9\\-\\.]{1,64}$'
                                                      },
                                                      message: 'should match pattern "^[A-Za-z0-9\\-\\.]{1,64}$"'
                                                    }];
                                                    return false;
                                                  }
                                                } else {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.valueId',
                                                    schemaPath: '#/properties/valueId/type',
                                                    params: {
                                                      type: 'string'
                                                    },
                                                    message: 'should be string'
                                                  }];
                                                  return false;
                                                }
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data._valueId === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[7](data._valueId, (dataPath || '') + '._valueId', data, '_valueId', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[7].errors;
                                                    else vErrors = vErrors.concat(refVal[7].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  var data1 = data.valueInstant;
                                                  if (data1 === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    if (typeof data1 === "string") {
                                                      if (!pattern9.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.valueInstant',
                                                          schemaPath: '#/properties/valueInstant/pattern',
                                                          params: {
                                                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$'
                                                          },
                                                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$"'
                                                        }];
                                                        return false;
                                                      }
                                                    } else {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.valueInstant',
                                                        schemaPath: '#/properties/valueInstant/type',
                                                        params: {
                                                          type: 'string'
                                                        },
                                                        message: 'should be string'
                                                      }];
                                                      return false;
                                                    }
                                                    var valid1 = errors === errs_1;
                                                  }
                                                  if (valid1) {
                                                    if (data._valueInstant === undefined) {
                                                      valid1 = true;
                                                    } else {
                                                      var errs_1 = errors;
                                                      if (!refVal[7](data._valueInstant, (dataPath || '') + '._valueInstant', data, '_valueInstant', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid1 = errors === errs_1;
                                                    }
                                                    if (valid1) {
                                                      var data1 = data.valueInteger;
                                                      if (data1 === undefined) {
                                                        valid1 = true;
                                                      } else {
                                                        var errs_1 = errors;
                                                        if (typeof data1 !== "number") {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.valueInteger',
                                                            schemaPath: '#/properties/valueInteger/type',
                                                            params: {
                                                              type: 'number'
                                                            },
                                                            message: 'should be number'
                                                          }];
                                                          return false;
                                                        }
                                                        if (typeof data1 === "string") {
                                                          if (!pattern10.test(data1)) {
                                                            validate.errors = [{
                                                              keyword: 'pattern',
                                                              dataPath: (dataPath || '') + '.valueInteger',
                                                              schemaPath: '#/properties/valueInteger/pattern',
                                                              params: {
                                                                pattern: '^-?([0]|([1-9][0-9]*))$'
                                                              },
                                                              message: 'should match pattern "^-?([0]|([1-9][0-9]*))$"'
                                                            }];
                                                            return false;
                                                          }
                                                        }
                                                        var valid1 = errors === errs_1;
                                                      }
                                                      if (valid1) {
                                                        if (data._valueInteger === undefined) {
                                                          valid1 = true;
                                                        } else {
                                                          var errs_1 = errors;
                                                          if (!refVal[7](data._valueInteger, (dataPath || '') + '._valueInteger', data, '_valueInteger', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[7].errors;
                                                            else vErrors = vErrors.concat(refVal[7].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid1 = errors === errs_1;
                                                        }
                                                        if (valid1) {
                                                          var data1 = data.valueMarkdown;
                                                          if (data1 === undefined) {
                                                            valid1 = true;
                                                          } else {
                                                            var errs_1 = errors;
                                                            if (typeof data1 === "string") {
                                                              if (!pattern1.test(data1)) {
                                                                validate.errors = [{
                                                                  keyword: 'pattern',
                                                                  dataPath: (dataPath || '') + '.valueMarkdown',
                                                                  schemaPath: '#/properties/valueMarkdown/pattern',
                                                                  params: {
                                                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                                                  },
                                                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                                                }];
                                                                return false;
                                                              }
                                                            } else {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '.valueMarkdown',
                                                                schemaPath: '#/properties/valueMarkdown/type',
                                                                params: {
                                                                  type: 'string'
                                                                },
                                                                message: 'should be string'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid1 = errors === errs_1;
                                                          }
                                                          if (valid1) {
                                                            if (data._valueMarkdown === undefined) {
                                                              valid1 = true;
                                                            } else {
                                                              var errs_1 = errors;
                                                              if (!refVal[7](data._valueMarkdown, (dataPath || '') + '._valueMarkdown', data, '_valueMarkdown', rootData)) {
                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid1 = errors === errs_1;
                                                            }
                                                            if (valid1) {
                                                              var data1 = data.valueOid;
                                                              if (data1 === undefined) {
                                                                valid1 = true;
                                                              } else {
                                                                var errs_1 = errors;
                                                                if (typeof data1 === "string") {
                                                                  if (!pattern11.test(data1)) {
                                                                    validate.errors = [{
                                                                      keyword: 'pattern',
                                                                      dataPath: (dataPath || '') + '.valueOid',
                                                                      schemaPath: '#/properties/valueOid/pattern',
                                                                      params: {
                                                                        pattern: '^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$'
                                                                      },
                                                                      message: 'should match pattern "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$"'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                } else {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '.valueOid',
                                                                    schemaPath: '#/properties/valueOid/type',
                                                                    params: {
                                                                      type: 'string'
                                                                    },
                                                                    message: 'should be string'
                                                                  }];
                                                                  return false;
                                                                }
                                                                var valid1 = errors === errs_1;
                                                              }
                                                              if (valid1) {
                                                                if (data._valueOid === undefined) {
                                                                  valid1 = true;
                                                                } else {
                                                                  var errs_1 = errors;
                                                                  if (!refVal[7](data._valueOid, (dataPath || '') + '._valueOid', data, '_valueOid', rootData)) {
                                                                    if (vErrors === null) vErrors = refVal[7].errors;
                                                                    else vErrors = vErrors.concat(refVal[7].errors);
                                                                    errors = vErrors.length;
                                                                  }
                                                                  var valid1 = errors === errs_1;
                                                                }
                                                                if (valid1) {
                                                                  var data1 = data.valuePositiveInt;
                                                                  if (data1 === undefined) {
                                                                    valid1 = true;
                                                                  } else {
                                                                    var errs_1 = errors;
                                                                    if (typeof data1 !== "number") {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                        schemaPath: '#/properties/valuePositiveInt/type',
                                                                        params: {
                                                                          type: 'number'
                                                                        },
                                                                        message: 'should be number'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    if (typeof data1 === "string") {
                                                                      if (!pattern12.test(data1)) {
                                                                        validate.errors = [{
                                                                          keyword: 'pattern',
                                                                          dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                          schemaPath: '#/properties/valuePositiveInt/pattern',
                                                                          params: {
                                                                            pattern: '^[1-9][0-9]*$'
                                                                          },
                                                                          message: 'should match pattern "^[1-9][0-9]*$"'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                    }
                                                                    var valid1 = errors === errs_1;
                                                                  }
                                                                  if (valid1) {
                                                                    if (data._valuePositiveInt === undefined) {
                                                                      valid1 = true;
                                                                    } else {
                                                                      var errs_1 = errors;
                                                                      if (!refVal[7](data._valuePositiveInt, (dataPath || '') + '._valuePositiveInt', data, '_valuePositiveInt', rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid1 = errors === errs_1;
                                                                    }
                                                                    if (valid1) {
                                                                      var data1 = data.valueString;
                                                                      if (data1 === undefined) {
                                                                        valid1 = true;
                                                                      } else {
                                                                        var errs_1 = errors;
                                                                        if (typeof data1 === "string") {
                                                                          if (!pattern1.test(data1)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.valueString',
                                                                              schemaPath: '#/properties/valueString/pattern',
                                                                              params: {
                                                                                pattern: '^[ \\r\\n\\t\\S]+$'
                                                                              },
                                                                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        } else {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.valueString',
                                                                            schemaPath: '#/properties/valueString/type',
                                                                            params: {
                                                                              type: 'string'
                                                                            },
                                                                            message: 'should be string'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        var valid1 = errors === errs_1;
                                                                      }
                                                                      if (valid1) {
                                                                        if (data._valueString === undefined) {
                                                                          valid1 = true;
                                                                        } else {
                                                                          var errs_1 = errors;
                                                                          if (!refVal[7](data._valueString, (dataPath || '') + '._valueString', data, '_valueString', rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[7].errors;
                                                                            else vErrors = vErrors.concat(refVal[7].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid1 = errors === errs_1;
                                                                        }
                                                                        if (valid1) {
                                                                          var data1 = data.valueTime;
                                                                          if (data1 === undefined) {
                                                                            valid1 = true;
                                                                          } else {
                                                                            var errs_1 = errors;
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern13.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.valueTime',
                                                                                  schemaPath: '#/properties/valueTime/pattern',
                                                                                  params: {
                                                                                    pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$'
                                                                                  },
                                                                                  message: 'should match pattern "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            } else {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.valueTime',
                                                                                schemaPath: '#/properties/valueTime/type',
                                                                                params: {
                                                                                  type: 'string'
                                                                                },
                                                                                message: 'should be string'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            var valid1 = errors === errs_1;
                                                                          }
                                                                          if (valid1) {
                                                                            if (data._valueTime === undefined) {
                                                                              valid1 = true;
                                                                            } else {
                                                                              var errs_1 = errors;
                                                                              if (!refVal[7](data._valueTime, (dataPath || '') + '._valueTime', data, '_valueTime', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid1 = errors === errs_1;
                                                                            }
                                                                            if (valid1) {
                                                                              var data1 = data.valueUnsignedInt;
                                                                              if (data1 === undefined) {
                                                                                valid1 = true;
                                                                              } else {
                                                                                var errs_1 = errors;
                                                                                if (typeof data1 !== "number") {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                                    schemaPath: '#/properties/valueUnsignedInt/type',
                                                                                    params: {
                                                                                      type: 'number'
                                                                                    },
                                                                                    message: 'should be number'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                if (typeof data1 === "string") {
                                                                                  if (!pattern14.test(data1)) {
                                                                                    validate.errors = [{
                                                                                      keyword: 'pattern',
                                                                                      dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                                      schemaPath: '#/properties/valueUnsignedInt/pattern',
                                                                                      params: {
                                                                                        pattern: '^[0]|([1-9][0-9]*)$'
                                                                                      },
                                                                                      message: 'should match pattern "^[0]|([1-9][0-9]*)$"'
                                                                                    }];
                                                                                    return false;
                                                                                  }
                                                                                }
                                                                                var valid1 = errors === errs_1;
                                                                              }
                                                                              if (valid1) {
                                                                                if (data._valueUnsignedInt === undefined) {
                                                                                  valid1 = true;
                                                                                } else {
                                                                                  var errs_1 = errors;
                                                                                  if (!refVal[7](data._valueUnsignedInt, (dataPath || '') + '._valueUnsignedInt', data, '_valueUnsignedInt', rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[7].errors;
                                                                                    else vErrors = vErrors.concat(refVal[7].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid1 = errors === errs_1;
                                                                                }
                                                                                if (valid1) {
                                                                                  var data1 = data.valueUri;
                                                                                  if (data1 === undefined) {
                                                                                    valid1 = true;
                                                                                  } else {
                                                                                    var errs_1 = errors;
                                                                                    if (typeof data1 === "string") {
                                                                                      if (!pattern2.test(data1)) {
                                                                                        validate.errors = [{
                                                                                          keyword: 'pattern',
                                                                                          dataPath: (dataPath || '') + '.valueUri',
                                                                                          schemaPath: '#/properties/valueUri/pattern',
                                                                                          params: {
                                                                                            pattern: '^\\S*$'
                                                                                          },
                                                                                          message: 'should match pattern "^\\S*$"'
                                                                                        }];
                                                                                        return false;
                                                                                      }
                                                                                    } else {
                                                                                      validate.errors = [{
                                                                                        keyword: 'type',
                                                                                        dataPath: (dataPath || '') + '.valueUri',
                                                                                        schemaPath: '#/properties/valueUri/type',
                                                                                        params: {
                                                                                          type: 'string'
                                                                                        },
                                                                                        message: 'should be string'
                                                                                      }];
                                                                                      return false;
                                                                                    }
                                                                                    var valid1 = errors === errs_1;
                                                                                  }
                                                                                  if (valid1) {
                                                                                    if (data._valueUri === undefined) {
                                                                                      valid1 = true;
                                                                                    } else {
                                                                                      var errs_1 = errors;
                                                                                      if (!refVal[7](data._valueUri, (dataPath || '') + '._valueUri', data, '_valueUri', rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid1 = errors === errs_1;
                                                                                    }
                                                                                    if (valid1) {
                                                                                      var data1 = data.valueUrl;
                                                                                      if (data1 === undefined) {
                                                                                        valid1 = true;
                                                                                      } else {
                                                                                        var errs_1 = errors;
                                                                                        if (typeof data1 === "string") {
                                                                                          if (!pattern2.test(data1)) {
                                                                                            validate.errors = [{
                                                                                              keyword: 'pattern',
                                                                                              dataPath: (dataPath || '') + '.valueUrl',
                                                                                              schemaPath: '#/properties/valueUrl/pattern',
                                                                                              params: {
                                                                                                pattern: '^\\S*$'
                                                                                              },
                                                                                              message: 'should match pattern "^\\S*$"'
                                                                                            }];
                                                                                            return false;
                                                                                          }
                                                                                        } else {
                                                                                          validate.errors = [{
                                                                                            keyword: 'type',
                                                                                            dataPath: (dataPath || '') + '.valueUrl',
                                                                                            schemaPath: '#/properties/valueUrl/type',
                                                                                            params: {
                                                                                              type: 'string'
                                                                                            },
                                                                                            message: 'should be string'
                                                                                          }];
                                                                                          return false;
                                                                                        }
                                                                                        var valid1 = errors === errs_1;
                                                                                      }
                                                                                      if (valid1) {
                                                                                        if (data._valueUrl === undefined) {
                                                                                          valid1 = true;
                                                                                        } else {
                                                                                          var errs_1 = errors;
                                                                                          if (!refVal[7](data._valueUrl, (dataPath || '') + '._valueUrl', data, '_valueUrl', rootData)) {
                                                                                            if (vErrors === null) vErrors = refVal[7].errors;
                                                                                            else vErrors = vErrors.concat(refVal[7].errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid1 = errors === errs_1;
                                                                                        }
                                                                                        if (valid1) {
                                                                                          var data1 = data.valueUuid;
                                                                                          if (data1 === undefined) {
                                                                                            valid1 = true;
                                                                                          } else {
                                                                                            var errs_1 = errors;
                                                                                            if (typeof data1 === "string") {
                                                                                              if (!pattern15.test(data1)) {
                                                                                                validate.errors = [{
                                                                                                  keyword: 'pattern',
                                                                                                  dataPath: (dataPath || '') + '.valueUuid',
                                                                                                  schemaPath: '#/properties/valueUuid/pattern',
                                                                                                  params: {
                                                                                                    pattern: '^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
                                                                                                  },
                                                                                                  message: 'should match pattern "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"'
                                                                                                }];
                                                                                                return false;
                                                                                              }
                                                                                            } else {
                                                                                              validate.errors = [{
                                                                                                keyword: 'type',
                                                                                                dataPath: (dataPath || '') + '.valueUuid',
                                                                                                schemaPath: '#/properties/valueUuid/type',
                                                                                                params: {
                                                                                                  type: 'string'
                                                                                                },
                                                                                                message: 'should be string'
                                                                                              }];
                                                                                              return false;
                                                                                            }
                                                                                            var valid1 = errors === errs_1;
                                                                                          }
                                                                                          if (valid1) {
                                                                                            if (data._valueUuid === undefined) {
                                                                                              valid1 = true;
                                                                                            } else {
                                                                                              var errs_1 = errors;
                                                                                              if (!refVal[7](data._valueUuid, (dataPath || '') + '._valueUuid', data, '_valueUuid', rootData)) {
                                                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid1 = errors === errs_1;
                                                                                            }
                                                                                            if (valid1) {
                                                                                              if (data.valueAddress === undefined) {
                                                                                                valid1 = true;
                                                                                              } else {
                                                                                                var errs_1 = errors;
                                                                                                if (!refVal8(data.valueAddress, (dataPath || '') + '.valueAddress', data, 'valueAddress', rootData)) {
                                                                                                  if (vErrors === null) vErrors = refVal8.errors;
                                                                                                  else vErrors = vErrors.concat(refVal8.errors);
                                                                                                  errors = vErrors.length;
                                                                                                }
                                                                                                var valid1 = errors === errs_1;
                                                                                              }
                                                                                              if (valid1) {
                                                                                                if (data.valueAge === undefined) {
                                                                                                  valid1 = true;
                                                                                                } else {
                                                                                                  var errs_1 = errors;
                                                                                                  if (!refVal11(data.valueAge, (dataPath || '') + '.valueAge', data, 'valueAge', rootData)) {
                                                                                                    if (vErrors === null) vErrors = refVal11.errors;
                                                                                                    else vErrors = vErrors.concat(refVal11.errors);
                                                                                                    errors = vErrors.length;
                                                                                                  }
                                                                                                  var valid1 = errors === errs_1;
                                                                                                }
                                                                                                if (valid1) {
                                                                                                  if (data.valueAnnotation === undefined) {
                                                                                                    valid1 = true;
                                                                                                  } else {
                                                                                                    var errs_1 = errors;
                                                                                                    if (!refVal14(data.valueAnnotation, (dataPath || '') + '.valueAnnotation', data, 'valueAnnotation', rootData)) {
                                                                                                      if (vErrors === null) vErrors = refVal14.errors;
                                                                                                      else vErrors = vErrors.concat(refVal14.errors);
                                                                                                      errors = vErrors.length;
                                                                                                    }
                                                                                                    var valid1 = errors === errs_1;
                                                                                                  }
                                                                                                  if (valid1) {
                                                                                                    if (data.valueAttachment === undefined) {
                                                                                                      valid1 = true;
                                                                                                    } else {
                                                                                                      var errs_1 = errors;
                                                                                                      if (!refVal21(data.valueAttachment, (dataPath || '') + '.valueAttachment', data, 'valueAttachment', rootData)) {
                                                                                                        if (vErrors === null) vErrors = refVal21.errors;
                                                                                                        else vErrors = vErrors.concat(refVal21.errors);
                                                                                                        errors = vErrors.length;
                                                                                                      }
                                                                                                      var valid1 = errors === errs_1;
                                                                                                    }
                                                                                                    if (valid1) {
                                                                                                      if (data.valueCodeableConcept === undefined) {
                                                                                                        valid1 = true;
                                                                                                      } else {
                                                                                                        var errs_1 = errors;
                                                                                                        if (!refVal[17](data.valueCodeableConcept, (dataPath || '') + '.valueCodeableConcept', data, 'valueCodeableConcept', rootData)) {
                                                                                                          if (vErrors === null) vErrors = refVal[17].errors;
                                                                                                          else vErrors = vErrors.concat(refVal[17].errors);
                                                                                                          errors = vErrors.length;
                                                                                                        }
                                                                                                        var valid1 = errors === errs_1;
                                                                                                      }
                                                                                                      if (valid1) {
                                                                                                        if (data.valueCoding === undefined) {
                                                                                                          valid1 = true;
                                                                                                        } else {
                                                                                                          var errs_1 = errors;
                                                                                                          if (!refVal[18](data.valueCoding, (dataPath || '') + '.valueCoding', data, 'valueCoding', rootData)) {
                                                                                                            if (vErrors === null) vErrors = refVal[18].errors;
                                                                                                            else vErrors = vErrors.concat(refVal[18].errors);
                                                                                                            errors = vErrors.length;
                                                                                                          }
                                                                                                          var valid1 = errors === errs_1;
                                                                                                        }
                                                                                                        if (valid1) {
                                                                                                          if (data.valueContactPoint === undefined) {
                                                                                                            valid1 = true;
                                                                                                          } else {
                                                                                                            var errs_1 = errors;
                                                                                                            if (!refVal25(data.valueContactPoint, (dataPath || '') + '.valueContactPoint', data, 'valueContactPoint', rootData)) {
                                                                                                              if (vErrors === null) vErrors = refVal25.errors;
                                                                                                              else vErrors = vErrors.concat(refVal25.errors);
                                                                                                              errors = vErrors.length;
                                                                                                            }
                                                                                                            var valid1 = errors === errs_1;
                                                                                                          }
                                                                                                          if (valid1) {
                                                                                                            if (data.valueCount === undefined) {
                                                                                                              valid1 = true;
                                                                                                            } else {
                                                                                                              var errs_1 = errors;
                                                                                                              if (!refVal27(data.valueCount, (dataPath || '') + '.valueCount', data, 'valueCount', rootData)) {
                                                                                                                if (vErrors === null) vErrors = refVal27.errors;
                                                                                                                else vErrors = vErrors.concat(refVal27.errors);
                                                                                                                errors = vErrors.length;
                                                                                                              }
                                                                                                              var valid1 = errors === errs_1;
                                                                                                            }
                                                                                                            if (valid1) {
                                                                                                              if (data.valueDistance === undefined) {
                                                                                                                valid1 = true;
                                                                                                              } else {
                                                                                                                var errs_1 = errors;
                                                                                                                if (!refVal28(data.valueDistance, (dataPath || '') + '.valueDistance', data, 'valueDistance', rootData)) {
                                                                                                                  if (vErrors === null) vErrors = refVal28.errors;
                                                                                                                  else vErrors = vErrors.concat(refVal28.errors);
                                                                                                                  errors = vErrors.length;
                                                                                                                }
                                                                                                                var valid1 = errors === errs_1;
                                                                                                              }
                                                                                                              if (valid1) {
                                                                                                                if (data.valueDuration === undefined) {
                                                                                                                  valid1 = true;
                                                                                                                } else {
                                                                                                                  var errs_1 = errors;
                                                                                                                  if (!refVal29(data.valueDuration, (dataPath || '') + '.valueDuration', data, 'valueDuration', rootData)) {
                                                                                                                    if (vErrors === null) vErrors = refVal29.errors;
                                                                                                                    else vErrors = vErrors.concat(refVal29.errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                  }
                                                                                                                  var valid1 = errors === errs_1;
                                                                                                                }
                                                                                                                if (valid1) {
                                                                                                                  if (data.valueHumanName === undefined) {
                                                                                                                    valid1 = true;
                                                                                                                  } else {
                                                                                                                    var errs_1 = errors;
                                                                                                                    if (!refVal30(data.valueHumanName, (dataPath || '') + '.valueHumanName', data, 'valueHumanName', rootData)) {
                                                                                                                      if (vErrors === null) vErrors = refVal30.errors;
                                                                                                                      else vErrors = vErrors.concat(refVal30.errors);
                                                                                                                      errors = vErrors.length;
                                                                                                                    }
                                                                                                                    var valid1 = errors === errs_1;
                                                                                                                  }
                                                                                                                  if (valid1) {
                                                                                                                    if (data.valueIdentifier === undefined) {
                                                                                                                      valid1 = true;
                                                                                                                    } else {
                                                                                                                      var errs_1 = errors;
                                                                                                                      if (!refVal[16](data.valueIdentifier, (dataPath || '') + '.valueIdentifier', data, 'valueIdentifier', rootData)) {
                                                                                                                        if (vErrors === null) vErrors = refVal[16].errors;
                                                                                                                        else vErrors = vErrors.concat(refVal[16].errors);
                                                                                                                        errors = vErrors.length;
                                                                                                                      }
                                                                                                                      var valid1 = errors === errs_1;
                                                                                                                    }
                                                                                                                    if (valid1) {
                                                                                                                      if (data.valueMoney === undefined) {
                                                                                                                        valid1 = true;
                                                                                                                      } else {
                                                                                                                        var errs_1 = errors;
                                                                                                                        if (!refVal31(data.valueMoney, (dataPath || '') + '.valueMoney', data, 'valueMoney', rootData)) {
                                                                                                                          if (vErrors === null) vErrors = refVal31.errors;
                                                                                                                          else vErrors = vErrors.concat(refVal31.errors);
                                                                                                                          errors = vErrors.length;
                                                                                                                        }
                                                                                                                        var valid1 = errors === errs_1;
                                                                                                                      }
                                                                                                                      if (valid1) {
                                                                                                                        if (data.valuePeriod === undefined) {
                                                                                                                          valid1 = true;
                                                                                                                        } else {
                                                                                                                          var errs_1 = errors;
                                                                                                                          if (!refVal[9](data.valuePeriod, (dataPath || '') + '.valuePeriod', data, 'valuePeriod', rootData)) {
                                                                                                                            if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                                            else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                                            errors = vErrors.length;
                                                                                                                          }
                                                                                                                          var valid1 = errors === errs_1;
                                                                                                                        }
                                                                                                                        if (valid1) {
                                                                                                                          if (data.valueQuantity === undefined) {
                                                                                                                            valid1 = true;
                                                                                                                          } else {
                                                                                                                            var errs_1 = errors;
                                                                                                                            if (!refVal32(data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                                                                                                                              if (vErrors === null) vErrors = refVal32.errors;
                                                                                                                              else vErrors = vErrors.concat(refVal32.errors);
                                                                                                                              errors = vErrors.length;
                                                                                                                            }
                                                                                                                            var valid1 = errors === errs_1;
                                                                                                                          }
                                                                                                                          if (valid1) {
                                                                                                                            if (data.valueRange === undefined) {
                                                                                                                              valid1 = true;
                                                                                                                            } else {
                                                                                                                              var errs_1 = errors;
                                                                                                                              if (!refVal33(data.valueRange, (dataPath || '') + '.valueRange', data, 'valueRange', rootData)) {
                                                                                                                                if (vErrors === null) vErrors = refVal33.errors;
                                                                                                                                else vErrors = vErrors.concat(refVal33.errors);
                                                                                                                                errors = vErrors.length;
                                                                                                                              }
                                                                                                                              var valid1 = errors === errs_1;
                                                                                                                            }
                                                                                                                            if (valid1) {
                                                                                                                              if (data.valueRatio === undefined) {
                                                                                                                                valid1 = true;
                                                                                                                              } else {
                                                                                                                                var errs_1 = errors;
                                                                                                                                if (!refVal34(data.valueRatio, (dataPath || '') + '.valueRatio', data, 'valueRatio', rootData)) {
                                                                                                                                  if (vErrors === null) vErrors = refVal34.errors;
                                                                                                                                  else vErrors = vErrors.concat(refVal34.errors);
                                                                                                                                  errors = vErrors.length;
                                                                                                                                }
                                                                                                                                var valid1 = errors === errs_1;
                                                                                                                              }
                                                                                                                              if (valid1) {
                                                                                                                                if (data.valueReference === undefined) {
                                                                                                                                  valid1 = true;
                                                                                                                                } else {
                                                                                                                                  var errs_1 = errors;
                                                                                                                                  if (!refVal[15](data.valueReference, (dataPath || '') + '.valueReference', data, 'valueReference', rootData)) {
                                                                                                                                    if (vErrors === null) vErrors = refVal[15].errors;
                                                                                                                                    else vErrors = vErrors.concat(refVal[15].errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                  }
                                                                                                                                  var valid1 = errors === errs_1;
                                                                                                                                }
                                                                                                                                if (valid1) {
                                                                                                                                  if (data.valueSampledData === undefined) {
                                                                                                                                    valid1 = true;
                                                                                                                                  } else {
                                                                                                                                    var errs_1 = errors;
                                                                                                                                    if (!refVal35(data.valueSampledData, (dataPath || '') + '.valueSampledData', data, 'valueSampledData', rootData)) {
                                                                                                                                      if (vErrors === null) vErrors = refVal35.errors;
                                                                                                                                      else vErrors = vErrors.concat(refVal35.errors);
                                                                                                                                      errors = vErrors.length;
                                                                                                                                    }
                                                                                                                                    var valid1 = errors === errs_1;
                                                                                                                                  }
                                                                                                                                  if (valid1) {
                                                                                                                                    if (data.valueSignature === undefined) {
                                                                                                                                      valid1 = true;
                                                                                                                                    } else {
                                                                                                                                      var errs_1 = errors;
                                                                                                                                      if (!refVal36(data.valueSignature, (dataPath || '') + '.valueSignature', data, 'valueSignature', rootData)) {
                                                                                                                                        if (vErrors === null) vErrors = refVal36.errors;
                                                                                                                                        else vErrors = vErrors.concat(refVal36.errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                      }
                                                                                                                                      var valid1 = errors === errs_1;
                                                                                                                                    }
                                                                                                                                    if (valid1) {
                                                                                                                                      if (data.valueTiming === undefined) {
                                                                                                                                        valid1 = true;
                                                                                                                                      } else {
                                                                                                                                        var errs_1 = errors;
                                                                                                                                        if (!refVal38(data.valueTiming, (dataPath || '') + '.valueTiming', data, 'valueTiming', rootData)) {
                                                                                                                                          if (vErrors === null) vErrors = refVal38.errors;
                                                                                                                                          else vErrors = vErrors.concat(refVal38.errors);
                                                                                                                                          errors = vErrors.length;
                                                                                                                                        }
                                                                                                                                        var valid1 = errors === errs_1;
                                                                                                                                      }
                                                                                                                                      if (valid1) {
                                                                                                                                        if (data.valueContactDetail === undefined) {
                                                                                                                                          valid1 = true;
                                                                                                                                        } else {
                                                                                                                                          var errs_1 = errors;
                                                                                                                                          if (!refVal41(data.valueContactDetail, (dataPath || '') + '.valueContactDetail', data, 'valueContactDetail', rootData)) {
                                                                                                                                            if (vErrors === null) vErrors = refVal41.errors;
                                                                                                                                            else vErrors = vErrors.concat(refVal41.errors);
                                                                                                                                            errors = vErrors.length;
                                                                                                                                          }
                                                                                                                                          var valid1 = errors === errs_1;
                                                                                                                                        }
                                                                                                                                        if (valid1) {
                                                                                                                                          if (data.valueContributor === undefined) {
                                                                                                                                            valid1 = true;
                                                                                                                                          } else {
                                                                                                                                            var errs_1 = errors;
                                                                                                                                            if (!refVal42(data.valueContributor, (dataPath || '') + '.valueContributor', data, 'valueContributor', rootData)) {
                                                                                                                                              if (vErrors === null) vErrors = refVal42.errors;
                                                                                                                                              else vErrors = vErrors.concat(refVal42.errors);
                                                                                                                                              errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var valid1 = errors === errs_1;
                                                                                                                                          }
                                                                                                                                          if (valid1) {
                                                                                                                                            if (data.valueDataRequirement === undefined) {
                                                                                                                                              valid1 = true;
                                                                                                                                            } else {
                                                                                                                                              var errs_1 = errors;
                                                                                                                                              if (!refVal43(data.valueDataRequirement, (dataPath || '') + '.valueDataRequirement', data, 'valueDataRequirement', rootData)) {
                                                                                                                                                if (vErrors === null) vErrors = refVal43.errors;
                                                                                                                                                else vErrors = vErrors.concat(refVal43.errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                              }
                                                                                                                                              var valid1 = errors === errs_1;
                                                                                                                                            }
                                                                                                                                            if (valid1) {
                                                                                                                                              if (data.valueExpression === undefined) {
                                                                                                                                                valid1 = true;
                                                                                                                                              } else {
                                                                                                                                                var errs_1 = errors;
                                                                                                                                                if (!refVal48(data.valueExpression, (dataPath || '') + '.valueExpression', data, 'valueExpression', rootData)) {
                                                                                                                                                  if (vErrors === null) vErrors = refVal48.errors;
                                                                                                                                                  else vErrors = vErrors.concat(refVal48.errors);
                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                }
                                                                                                                                                var valid1 = errors === errs_1;
                                                                                                                                              }
                                                                                                                                              if (valid1) {
                                                                                                                                                if (data.valueParameterDefinition === undefined) {
                                                                                                                                                  valid1 = true;
                                                                                                                                                } else {
                                                                                                                                                  var errs_1 = errors;
                                                                                                                                                  if (!refVal49(data.valueParameterDefinition, (dataPath || '') + '.valueParameterDefinition', data, 'valueParameterDefinition', rootData)) {
                                                                                                                                                    if (vErrors === null) vErrors = refVal49.errors;
                                                                                                                                                    else vErrors = vErrors.concat(refVal49.errors);
                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                  }
                                                                                                                                                  var valid1 = errors === errs_1;
                                                                                                                                                }
                                                                                                                                                if (valid1) {
                                                                                                                                                  if (data.valueRelatedArtifact === undefined) {
                                                                                                                                                    valid1 = true;
                                                                                                                                                  } else {
                                                                                                                                                    var errs_1 = errors;
                                                                                                                                                    if (!refVal51(data.valueRelatedArtifact, (dataPath || '') + '.valueRelatedArtifact', data, 'valueRelatedArtifact', rootData)) {
                                                                                                                                                      if (vErrors === null) vErrors = refVal51.errors;
                                                                                                                                                      else vErrors = vErrors.concat(refVal51.errors);
                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                    }
                                                                                                                                                    var valid1 = errors === errs_1;
                                                                                                                                                  }
                                                                                                                                                  if (valid1) {
                                                                                                                                                    if (data.valueTriggerDefinition === undefined) {
                                                                                                                                                      valid1 = true;
                                                                                                                                                    } else {
                                                                                                                                                      var errs_1 = errors;
                                                                                                                                                      if (!refVal52(data.valueTriggerDefinition, (dataPath || '') + '.valueTriggerDefinition', data, 'valueTriggerDefinition', rootData)) {
                                                                                                                                                        if (vErrors === null) vErrors = refVal52.errors;
                                                                                                                                                        else vErrors = vErrors.concat(refVal52.errors);
                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                      }
                                                                                                                                                      var valid1 = errors === errs_1;
                                                                                                                                                    }
                                                                                                                                                    if (valid1) {
                                                                                                                                                      if (data.valueUsageContext === undefined) {
                                                                                                                                                        valid1 = true;
                                                                                                                                                      } else {
                                                                                                                                                        var errs_1 = errors;
                                                                                                                                                        if (!refVal53(data.valueUsageContext, (dataPath || '') + '.valueUsageContext', data, 'valueUsageContext', rootData)) {
                                                                                                                                                          if (vErrors === null) vErrors = refVal53.errors;
                                                                                                                                                          else vErrors = vErrors.concat(refVal53.errors);
                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                        }
                                                                                                                                                        var valid1 = errors === errs_1;
                                                                                                                                                      }
                                                                                                                                                      if (valid1) {
                                                                                                                                                        if (data.valueDosage === undefined) {
                                                                                                                                                          valid1 = true;
                                                                                                                                                        } else {
                                                                                                                                                          var errs_1 = errors;
                                                                                                                                                          if (!refVal54(data.valueDosage, (dataPath || '') + '.valueDosage', data, 'valueDosage', rootData)) {
                                                                                                                                                            if (vErrors === null) vErrors = refVal54.errors;
                                                                                                                                                            else vErrors = vErrors.concat(refVal54.errors);
                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                          }
                                                                                                                                                          var valid1 = errors === errs_1;
                                                                                                                                                        }
                                                                                                                                                        if (valid1) {
                                                                                                                                                          if (data.valueMeta === undefined) {
                                                                                                                                                            valid1 = true;
                                                                                                                                                          } else {
                                                                                                                                                            var errs_1 = errors;
                                                                                                                                                            if (!refVal[3](data.valueMeta, (dataPath || '') + '.valueMeta', data, 'valueMeta', rootData)) {
                                                                                                                                                              if (vErrors === null) vErrors = refVal[3].errors;
                                                                                                                                                              else vErrors = vErrors.concat(refVal[3].errors);
                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                            }
                                                                                                                                                            var valid1 = errors === errs_1;
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal5.schema = {
    "description": "Optional Extension Element - found in all resources.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "url": {
        "description": "Source of the definition for the extension code - a logical name or a URL.",
        "$ref": "#/definitions/uri"
      },
      "_url": {
        "description": "Extensions for url",
        "$ref": "#/definitions/Element"
      },
      "valueBase64Binary": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
        "type": "string"
      },
      "_valueBase64Binary": {
        "description": "Extensions for valueBase64Binary",
        "$ref": "#/definitions/Element"
      },
      "valueBoolean": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^true|false$",
        "type": "boolean"
      },
      "_valueBoolean": {
        "description": "Extensions for valueBoolean",
        "$ref": "#/definitions/Element"
      },
      "valueCanonical": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^\\S*$",
        "type": "string"
      },
      "_valueCanonical": {
        "description": "Extensions for valueCanonical",
        "$ref": "#/definitions/Element"
      },
      "valueCode": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
        "type": "string"
      },
      "_valueCode": {
        "description": "Extensions for valueCode",
        "$ref": "#/definitions/Element"
      },
      "valueDate": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
        "type": "string"
      },
      "_valueDate": {
        "description": "Extensions for valueDate",
        "$ref": "#/definitions/Element"
      },
      "valueDateTime": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
        "type": "string"
      },
      "_valueDateTime": {
        "description": "Extensions for valueDateTime",
        "$ref": "#/definitions/Element"
      },
      "valueDecimal": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
        "type": "number"
      },
      "_valueDecimal": {
        "description": "Extensions for valueDecimal",
        "$ref": "#/definitions/Element"
      },
      "valueId": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
        "type": "string"
      },
      "_valueId": {
        "description": "Extensions for valueId",
        "$ref": "#/definitions/Element"
      },
      "valueInstant": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
        "type": "string"
      },
      "_valueInstant": {
        "description": "Extensions for valueInstant",
        "$ref": "#/definitions/Element"
      },
      "valueInteger": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^-?([0]|([1-9][0-9]*))$",
        "type": "number"
      },
      "_valueInteger": {
        "description": "Extensions for valueInteger",
        "$ref": "#/definitions/Element"
      },
      "valueMarkdown": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[ \\r\\n\\t\\S]+$",
        "type": "string"
      },
      "_valueMarkdown": {
        "description": "Extensions for valueMarkdown",
        "$ref": "#/definitions/Element"
      },
      "valueOid": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
        "type": "string"
      },
      "_valueOid": {
        "description": "Extensions for valueOid",
        "$ref": "#/definitions/Element"
      },
      "valuePositiveInt": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[1-9][0-9]*$",
        "type": "number"
      },
      "_valuePositiveInt": {
        "description": "Extensions for valuePositiveInt",
        "$ref": "#/definitions/Element"
      },
      "valueString": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[ \\r\\n\\t\\S]+$",
        "type": "string"
      },
      "_valueString": {
        "description": "Extensions for valueString",
        "$ref": "#/definitions/Element"
      },
      "valueTime": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
        "type": "string"
      },
      "_valueTime": {
        "description": "Extensions for valueTime",
        "$ref": "#/definitions/Element"
      },
      "valueUnsignedInt": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^[0]|([1-9][0-9]*)$",
        "type": "number"
      },
      "_valueUnsignedInt": {
        "description": "Extensions for valueUnsignedInt",
        "$ref": "#/definitions/Element"
      },
      "valueUri": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^\\S*$",
        "type": "string"
      },
      "_valueUri": {
        "description": "Extensions for valueUri",
        "$ref": "#/definitions/Element"
      },
      "valueUrl": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^\\S*$",
        "type": "string"
      },
      "_valueUrl": {
        "description": "Extensions for valueUrl",
        "$ref": "#/definitions/Element"
      },
      "valueUuid": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "_valueUuid": {
        "description": "Extensions for valueUuid",
        "$ref": "#/definitions/Element"
      },
      "valueAddress": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Address"
      },
      "valueAge": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Age"
      },
      "valueAnnotation": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Annotation"
      },
      "valueAttachment": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Attachment"
      },
      "valueCodeableConcept": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/CodeableConcept"
      },
      "valueCoding": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Coding"
      },
      "valueContactPoint": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/ContactPoint"
      },
      "valueCount": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Count"
      },
      "valueDistance": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Distance"
      },
      "valueDuration": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Duration"
      },
      "valueHumanName": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/HumanName"
      },
      "valueIdentifier": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Identifier"
      },
      "valueMoney": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Money"
      },
      "valuePeriod": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Period"
      },
      "valueQuantity": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Quantity"
      },
      "valueRange": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Range"
      },
      "valueRatio": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Ratio"
      },
      "valueReference": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Reference"
      },
      "valueSampledData": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/SampledData"
      },
      "valueSignature": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Signature"
      },
      "valueTiming": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Timing"
      },
      "valueContactDetail": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/ContactDetail"
      },
      "valueContributor": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Contributor"
      },
      "valueDataRequirement": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/DataRequirement"
      },
      "valueExpression": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Expression"
      },
      "valueParameterDefinition": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/ParameterDefinition"
      },
      "valueRelatedArtifact": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/RelatedArtifact"
      },
      "valueTriggerDefinition": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/TriggerDefinition"
      },
      "valueUsageContext": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/UsageContext"
      },
      "valueDosage": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Dosage"
      },
      "valueMeta": {
        "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
        "$ref": "#/definitions/Meta"
      }
    },
    "additionalProperties": false
  };
  refVal5.errors = null;
  refVal[5] = refVal5;
  var refVal6 = {
    "pattern": "^\\S*$",
    "type": "string",
    "description": "String of characters used to identify a name or a resource"
  };
  refVal[6] = refVal6;
  var refVal7 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal7.schema = {
    "description": "Base definition for all elements in a resource.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal7.errors = null;
  refVal[7] = refVal7;
  var refVal8 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.use === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.use.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.use, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.use',
                    schemaPath: '#/properties/use/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._use === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.type === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.type.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.type, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.type',
                        schemaPath: '#/properties/type/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._type === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.text;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.text',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.text',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._text === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.line;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (Array.isArray(data1)) {
                              var errs__1 = errors;
                              var valid1;
                              for (var i1 = 0; i1 < data1.length; i1++) {
                                var data2 = data1[i1];
                                var errs_2 = errors;
                                var errs_3 = errors;
                                if (typeof data2 === "string") {
                                  if (!pattern1.test(data2)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.line[' + i1 + ']',
                                      schemaPath: '#/definitions/string/pattern',
                                      params: {
                                        pattern: '^[ \\r\\n\\t\\S]+$'
                                      },
                                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.line[' + i1 + ']',
                                    schemaPath: '#/definitions/string/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid3 = errors === errs_3;
                                var valid2 = errors === errs_2;
                                if (!valid2) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.line',
                                schemaPath: '#/properties/line/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data._line;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal[7](data1[i1], (dataPath || '') + '._line[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '._line',
                                  schemaPath: '#/properties/_line/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.city;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern1.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.city',
                                      schemaPath: '#/definitions/string/pattern',
                                      params: {
                                        pattern: '^[ \\r\\n\\t\\S]+$'
                                      },
                                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.city',
                                    schemaPath: '#/definitions/string/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._city === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._city, (dataPath || '') + '._city', data, '_city', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.district;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data1 === "string") {
                                      if (!pattern1.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.district',
                                          schemaPath: '#/definitions/string/pattern',
                                          params: {
                                            pattern: '^[ \\r\\n\\t\\S]+$'
                                          },
                                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                        }];
                                        return false;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.district',
                                        schemaPath: '#/definitions/string/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._district === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._district, (dataPath || '') + '._district', data, '_district', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.state;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern1.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.state',
                                              schemaPath: '#/definitions/string/pattern',
                                              params: {
                                                pattern: '^[ \\r\\n\\t\\S]+$'
                                              },
                                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.state',
                                            schemaPath: '#/definitions/string/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data._state === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[7](data._state, (dataPath || '') + '._state', data, '_state', rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          var data1 = data.postalCode;
                                          if (data1 === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            var errs_2 = errors;
                                            if (typeof data1 === "string") {
                                              if (!pattern1.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.postalCode',
                                                  schemaPath: '#/definitions/string/pattern',
                                                  params: {
                                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                                  },
                                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                                }];
                                                return false;
                                              }
                                            } else {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.postalCode',
                                                schemaPath: '#/definitions/string/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            if (data._postalCode === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (!refVal[7](data._postalCode, (dataPath || '') + '._postalCode', data, '_postalCode', rootData)) {
                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              var data1 = data.country;
                                              if (data1 === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                var errs_2 = errors;
                                                if (typeof data1 === "string") {
                                                  if (!pattern1.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.country',
                                                      schemaPath: '#/definitions/string/pattern',
                                                      params: {
                                                        pattern: '^[ \\r\\n\\t\\S]+$'
                                                      },
                                                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                                    }];
                                                    return false;
                                                  }
                                                } else {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.country',
                                                    schemaPath: '#/definitions/string/type',
                                                    params: {
                                                      type: 'string'
                                                    },
                                                    message: 'should be string'
                                                  }];
                                                  return false;
                                                }
                                                var valid2 = errors === errs_2;
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data._country === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[7](data._country, (dataPath || '') + '._country', data, '_country', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[7].errors;
                                                    else vErrors = vErrors.concat(refVal[7].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  if (data.period === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    if (!refVal9(data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                                      if (vErrors === null) vErrors = refVal9.errors;
                                                      else vErrors = vErrors.concat(refVal9.errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid1 = errors === errs_1;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal8.schema = {
    "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "use": {
        "description": "The purpose of this address.",
        "enum": ["home", "work", "temp", "old", "billing"]
      },
      "_use": {
        "description": "Extensions for use",
        "$ref": "#/definitions/Element"
      },
      "type": {
        "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
        "enum": ["postal", "physical", "both"]
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
        "$ref": "#/definitions/string"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      },
      "line": {
        "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
        "items": {
          "$ref": "#/definitions/string"
        },
        "type": "array"
      },
      "_line": {
        "description": "Extensions for line",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "city": {
        "description": "The name of the city, town, suburb, village or other community or delivery center.",
        "$ref": "#/definitions/string"
      },
      "_city": {
        "description": "Extensions for city",
        "$ref": "#/definitions/Element"
      },
      "district": {
        "description": "The name of the administrative area (county).",
        "$ref": "#/definitions/string"
      },
      "_district": {
        "description": "Extensions for district",
        "$ref": "#/definitions/Element"
      },
      "state": {
        "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
        "$ref": "#/definitions/string"
      },
      "_state": {
        "description": "Extensions for state",
        "$ref": "#/definitions/Element"
      },
      "postalCode": {
        "description": "A postal code designating a region defined by the postal service.",
        "$ref": "#/definitions/string"
      },
      "_postalCode": {
        "description": "Extensions for postalCode",
        "$ref": "#/definitions/Element"
      },
      "country": {
        "description": "Country - a nation as commonly understood or generally accepted.",
        "$ref": "#/definitions/string"
      },
      "_country": {
        "description": "Extensions for country",
        "$ref": "#/definitions/Element"
      },
      "period": {
        "description": "Time period when address was/is in use.",
        "$ref": "#/definitions/Period"
      }
    },
    "additionalProperties": false
  };
  refVal8.errors = null;
  refVal[8] = refVal8;
  var refVal9 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'start' || key0 == '_start' || key0 == 'end' || key0 == '_end');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.start;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern7.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.start',
                      schemaPath: '#/definitions/dateTime/pattern',
                      params: {
                        pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                      },
                      message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.start',
                    schemaPath: '#/definitions/dateTime/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._start === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._start, (dataPath || '') + '._start', data, '_start', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.end;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern7.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.end',
                          schemaPath: '#/definitions/dateTime/pattern',
                          params: {
                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                          },
                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.end',
                        schemaPath: '#/definitions/dateTime/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._end === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._end, (dataPath || '') + '._end', data, '_end', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal9.schema = {
    "description": "A time period defined by a start and end date and optionally time.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "start": {
        "description": "The start of the period. The boundary is inclusive.",
        "$ref": "#/definitions/dateTime"
      },
      "_start": {
        "description": "Extensions for start",
        "$ref": "#/definitions/Element"
      },
      "end": {
        "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
        "$ref": "#/definitions/dateTime"
      },
      "_end": {
        "description": "Extensions for end",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal9.errors = null;
  refVal[9] = refVal9;
  var refVal10 = {
    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
    "type": "string",
    "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
  };
  refVal[10] = refVal10;
  var refVal11 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.comparator === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.comparator.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.comparator, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.comparator',
                        schemaPath: '#/properties/comparator/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._comparator === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.unit;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.unit',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.unit',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._unit === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.system;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.system',
                                  schemaPath: '#/definitions/uri/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.system',
                                schemaPath: '#/definitions/uri/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._system === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.code;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.code',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.code',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._code === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal11.schema = {
    "description": "A duration of time during which an organism (or a process) has existed.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "comparator": {
        "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
        "enum": ["<", "<=", ">=", ">"]
      },
      "_comparator": {
        "description": "Extensions for comparator",
        "$ref": "#/definitions/Element"
      },
      "unit": {
        "description": "A human-readable form of the unit.",
        "$ref": "#/definitions/string"
      },
      "_unit": {
        "description": "Extensions for unit",
        "$ref": "#/definitions/Element"
      },
      "system": {
        "description": "The identification of the system that provides the coded form of the unit.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A computer processable form of the unit in some unit representation system.",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal11.errors = null;
  refVal[11] = refVal11;
  var refVal12 = {
    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
    "type": "number",
    "description": "A rational number with implicit precision"
  };
  refVal[12] = refVal12;
  var refVal13 = {
    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
    "type": "string",
    "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
  };
  refVal[13] = refVal13;
  var refVal14 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.authorReference === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (!refVal15(data.authorReference, (dataPath || '') + '.authorReference', data, 'authorReference', rootData)) {
                  if (vErrors === null) vErrors = refVal15.errors;
                  else vErrors = vErrors.concat(refVal15.errors);
                  errors = vErrors.length;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.authorString;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.authorString',
                        schemaPath: '#/properties/authorString/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.authorString',
                      schemaPath: '#/properties/authorString/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._authorString === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._authorString, (dataPath || '') + '._authorString', data, '_authorString', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.time;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern7.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.time',
                            schemaPath: '#/definitions/dateTime/pattern',
                            params: {
                              pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                            },
                            message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.time',
                          schemaPath: '#/definitions/dateTime/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._time === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._time, (dataPath || '') + '._time', data, '_time', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.text;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          var errs_2 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern1.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.text',
                                schemaPath: '#/definitions/markdown/pattern',
                                params: {
                                  pattern: '^[ \\r\\n\\t\\S]+$'
                                },
                                message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.text',
                              schemaPath: '#/definitions/markdown/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._text === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal14.schema = {
    "description": "A  text note which also  contains information about who made the statement and when.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "authorReference": {
        "description": "The individual responsible for making the annotation.",
        "$ref": "#/definitions/Reference"
      },
      "authorString": {
        "description": "The individual responsible for making the annotation.",
        "pattern": "^[ \\r\\n\\t\\S]+$",
        "type": "string"
      },
      "_authorString": {
        "description": "Extensions for authorString",
        "$ref": "#/definitions/Element"
      },
      "time": {
        "description": "Indicates when this particular annotation was made.",
        "$ref": "#/definitions/dateTime"
      },
      "_time": {
        "description": "Extensions for time",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "The text of the annotation in markdown format.",
        "$ref": "#/definitions/markdown"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal14.errors = null;
  refVal[14] = refVal14;
  var refVal15 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.reference;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern1.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.reference',
                      schemaPath: '#/definitions/string/pattern',
                      params: {
                        pattern: '^[ \\r\\n\\t\\S]+$'
                      },
                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.reference',
                    schemaPath: '#/definitions/string/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._reference === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._reference, (dataPath || '') + '._reference', data, '_reference', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.type;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern2.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.type',
                          schemaPath: '#/definitions/uri/pattern',
                          params: {
                            pattern: '^\\S*$'
                          },
                          message: 'should match pattern "^\\S*$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.type',
                        schemaPath: '#/definitions/uri/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._type === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.identifier === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal16(data.identifier, (dataPath || '') + '.identifier', data, 'identifier', rootData)) {
                          if (vErrors === null) vErrors = refVal16.errors;
                          else vErrors = vErrors.concat(refVal16.errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.display;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          var errs_2 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern1.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.display',
                                schemaPath: '#/definitions/string/pattern',
                                params: {
                                  pattern: '^[ \\r\\n\\t\\S]+$'
                                },
                                message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.display',
                              schemaPath: '#/definitions/string/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._display === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal15.schema = {
    "description": "A reference from one resource to another.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "reference": {
        "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
        "$ref": "#/definitions/string"
      },
      "_reference": {
        "description": "Extensions for reference",
        "$ref": "#/definitions/Element"
      },
      "type": {
        "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
        "$ref": "#/definitions/uri"
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "identifier": {
        "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
        "$ref": "#/definitions/Identifier"
      },
      "display": {
        "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
        "$ref": "#/definitions/string"
      },
      "_display": {
        "description": "Extensions for display",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal15.errors = null;
  refVal[15] = refVal15;
  var refVal16 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.use === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.use.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.use, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.use',
                    schemaPath: '#/properties/use/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._use === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.type === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal17(data.type, (dataPath || '') + '.type', data, 'type', rootData)) {
                      if (vErrors === null) vErrors = refVal17.errors;
                      else vErrors = vErrors.concat(refVal17.errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.system;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern2.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.system',
                            schemaPath: '#/definitions/uri/pattern',
                            params: {
                              pattern: '^\\S*$'
                            },
                            message: 'should match pattern "^\\S*$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.system',
                          schemaPath: '#/definitions/uri/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._system === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.value;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          var errs_2 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern1.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.value',
                                schemaPath: '#/definitions/string/pattern',
                                params: {
                                  pattern: '^[ \\r\\n\\t\\S]+$'
                                },
                                message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.value',
                              schemaPath: '#/definitions/string/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._value === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data.period === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[9](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                if (vErrors === null) vErrors = refVal[9].errors;
                                else vErrors = vErrors.concat(refVal[9].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              if (data.assigner === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (!refVal[15](data.assigner, (dataPath || '') + '.assigner', data, 'assigner', rootData)) {
                                  if (vErrors === null) vErrors = refVal[15].errors;
                                  else vErrors = vErrors.concat(refVal[15].errors);
                                  errors = vErrors.length;
                                }
                                var valid1 = errors === errs_1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal16.schema = {
    "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "use": {
        "description": "The purpose of this identifier.",
        "enum": ["usual", "official", "temp", "secondary", "old"]
      },
      "_use": {
        "description": "Extensions for use",
        "$ref": "#/definitions/Element"
      },
      "type": {
        "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "system": {
        "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "value": {
        "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
        "$ref": "#/definitions/string"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "period": {
        "description": "Time period during which identifier is/was valid for use.",
        "$ref": "#/definitions/Period"
      },
      "assigner": {
        "description": "Organization that issued/manages the identifier.",
        "$ref": "#/definitions/Reference"
      }
    },
    "additionalProperties": false
  };
  refVal16.errors = null;
  refVal[16] = refVal16;
  var refVal17 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'coding' || key0 == 'text' || key0 == '_text');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.coding;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal18(data1[i1], (dataPath || '') + '.coding[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal18.errors;
                      else vErrors = vErrors.concat(refVal18.errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.coding',
                    schemaPath: '#/properties/coding/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.text;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.text',
                        schemaPath: '#/definitions/string/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.text',
                      schemaPath: '#/definitions/string/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._text === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal17.schema = {
    "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "coding": {
        "description": "A reference to a code defined by a terminology system.",
        "items": {
          "$ref": "#/definitions/Coding"
        },
        "type": "array"
      },
      "text": {
        "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
        "$ref": "#/definitions/string"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal17.errors = null;
  refVal[17] = refVal17;
  var refVal18 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.system;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern2.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.system',
                      schemaPath: '#/definitions/uri/pattern',
                      params: {
                        pattern: '^\\S*$'
                      },
                      message: 'should match pattern "^\\S*$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.system',
                    schemaPath: '#/definitions/uri/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._system === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.version;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.version',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.version',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._version === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._version, (dataPath || '') + '._version', data, '_version', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.code;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern5.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.code',
                              schemaPath: '#/definitions/code/pattern',
                              params: {
                                pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                              },
                              message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.code',
                            schemaPath: '#/definitions/code/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._code === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.display;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.display',
                                  schemaPath: '#/definitions/string/pattern',
                                  params: {
                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                  },
                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.display',
                                schemaPath: '#/definitions/string/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._display === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.userSelected;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 !== "boolean") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.userSelected',
                                    schemaPath: '#/definitions/boolean/type',
                                    params: {
                                      type: 'boolean'
                                    },
                                    message: 'should be boolean'
                                  }];
                                  return false;
                                }
                                if (typeof data1 === "string") {
                                  if (!pattern4.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.userSelected',
                                      schemaPath: '#/definitions/boolean/pattern',
                                      params: {
                                        pattern: '^true|false$'
                                      },
                                      message: 'should match pattern "^true|false$"'
                                    }];
                                    return false;
                                  }
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._userSelected === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._userSelected, (dataPath || '') + '._userSelected', data, '_userSelected', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal18.schema = {
    "description": "A reference to a code defined by a terminology system.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "system": {
        "description": "The identification of the code system that defines the meaning of the symbol in the code.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "version": {
        "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
        "$ref": "#/definitions/string"
      },
      "_version": {
        "description": "Extensions for version",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      },
      "display": {
        "description": "A representation of the meaning of the code in the system, following the rules of the system.",
        "$ref": "#/definitions/string"
      },
      "_display": {
        "description": "Extensions for display",
        "$ref": "#/definitions/Element"
      },
      "userSelected": {
        "description": "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
        "$ref": "#/definitions/boolean"
      },
      "_userSelected": {
        "description": "Extensions for userSelected",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal18.errors = null;
  refVal[18] = refVal18;
  var refVal19 = {
    "pattern": "^true|false$",
    "type": "boolean",
    "description": "Value of \"true\" or \"false\""
  };
  refVal[19] = refVal19;
  var refVal20 = {
    "pattern": "^[ \\r\\n\\t\\S]+$",
    "type": "string",
    "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
  };
  refVal[20] = refVal20;
  var refVal21 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.contentType;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.contentType',
                      schemaPath: '#/definitions/code/pattern',
                      params: {
                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                      },
                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.contentType',
                    schemaPath: '#/definitions/code/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._contentType === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._contentType, (dataPath || '') + '._contentType', data, '_contentType', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.language;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern5.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.language',
                          schemaPath: '#/definitions/code/pattern',
                          params: {
                            pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                          },
                          message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.language',
                        schemaPath: '#/definitions/code/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._language === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._language, (dataPath || '') + '._language', data, '_language', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.data === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data.data !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.data',
                            schemaPath: '#/definitions/base64Binary/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._data === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._data, (dataPath || '') + '._data', data, '_data', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.url;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.url',
                                  schemaPath: '#/definitions/url/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.url',
                                schemaPath: '#/definitions/url/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._url === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.size;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 !== "number") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.size',
                                    schemaPath: '#/definitions/unsignedInt/type',
                                    params: {
                                      type: 'number'
                                    },
                                    message: 'should be number'
                                  }];
                                  return false;
                                }
                                if (typeof data1 === "string") {
                                  if (!pattern14.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.size',
                                      schemaPath: '#/definitions/unsignedInt/pattern',
                                      params: {
                                        pattern: '^[0]|([1-9][0-9]*)$'
                                      },
                                      message: 'should match pattern "^[0]|([1-9][0-9]*)$"'
                                    }];
                                    return false;
                                  }
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._size === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._size, (dataPath || '') + '._size', data, '_size', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data.hash === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data.hash !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.hash',
                                        schemaPath: '#/definitions/base64Binary/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._hash === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._hash, (dataPath || '') + '._hash', data, '_hash', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.title;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern1.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.title',
                                              schemaPath: '#/definitions/string/pattern',
                                              params: {
                                                pattern: '^[ \\r\\n\\t\\S]+$'
                                              },
                                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.title',
                                            schemaPath: '#/definitions/string/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data._title === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[7](data._title, (dataPath || '') + '._title', data, '_title', rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          var data1 = data.creation;
                                          if (data1 === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            var errs_2 = errors;
                                            if (typeof data1 === "string") {
                                              if (!pattern7.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.creation',
                                                  schemaPath: '#/definitions/dateTime/pattern',
                                                  params: {
                                                    pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                                  },
                                                  message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                                                }];
                                                return false;
                                              }
                                            } else {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.creation',
                                                schemaPath: '#/definitions/dateTime/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            if (data._creation === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (!refVal[7](data._creation, (dataPath || '') + '._creation', data, '_creation', rootData)) {
                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal21.schema = {
    "description": "For referring to data content defined in other formats.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "contentType": {
        "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
        "$ref": "#/definitions/code"
      },
      "_contentType": {
        "description": "Extensions for contentType",
        "$ref": "#/definitions/Element"
      },
      "language": {
        "description": "The human language of the content. The value can be any valid value according to BCP 47.",
        "$ref": "#/definitions/code"
      },
      "_language": {
        "description": "Extensions for language",
        "$ref": "#/definitions/Element"
      },
      "data": {
        "description": "The actual data of the attachment - a sequence of bytes, base64 encoded.",
        "$ref": "#/definitions/base64Binary"
      },
      "_data": {
        "description": "Extensions for data",
        "$ref": "#/definitions/Element"
      },
      "url": {
        "description": "A location where the data can be accessed.",
        "$ref": "#/definitions/url"
      },
      "_url": {
        "description": "Extensions for url",
        "$ref": "#/definitions/Element"
      },
      "size": {
        "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
        "$ref": "#/definitions/unsignedInt"
      },
      "_size": {
        "description": "Extensions for size",
        "$ref": "#/definitions/Element"
      },
      "hash": {
        "description": "The calculated hash of the data using SHA-1. Represented using base64.",
        "$ref": "#/definitions/base64Binary"
      },
      "_hash": {
        "description": "Extensions for hash",
        "$ref": "#/definitions/Element"
      },
      "title": {
        "description": "A label or set of text to display in place of the data.",
        "$ref": "#/definitions/string"
      },
      "_title": {
        "description": "Extensions for title",
        "$ref": "#/definitions/Element"
      },
      "creation": {
        "description": "The date that the attachment was first created.",
        "$ref": "#/definitions/dateTime"
      },
      "_creation": {
        "description": "Extensions for creation",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal21.errors = null;
  refVal[21] = refVal21;
  var refVal22 = {
    "type": "string",
    "description": "A stream of bytes"
  };
  refVal[22] = refVal22;
  var refVal23 = {
    "pattern": "^\\S*$",
    "type": "string",
    "description": "A URI that is a literal reference"
  };
  refVal[23] = refVal23;
  var refVal24 = {
    "pattern": "^[0]|([1-9][0-9]*)$",
    "type": "number",
    "description": "An integer with a value that is not negative (e.g. >= 0)"
  };
  refVal[24] = refVal24;
  var refVal25 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.system === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.system.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.system, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.system',
                    schemaPath: '#/properties/system/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._system === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.value;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.value',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.value',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._value === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.use === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var schema1 = validate.schema.properties.use.enum;
                        var valid1;
                        valid1 = false;
                        for (var i1 = 0; i1 < schema1.length; i1++)
                          if (equal(data.use, schema1[i1])) {
                            valid1 = true;
                            break;
                          } if (!valid1) {
                          validate.errors = [{
                            keyword: 'enum',
                            dataPath: (dataPath || '') + '.use',
                            schemaPath: '#/properties/use/enum',
                            params: {
                              allowedValues: schema1
                            },
                            message: 'should be equal to one of the allowed values'
                          }];
                          return false;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._use === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.rank;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.rank',
                                schemaPath: '#/definitions/positiveInt/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern12.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.rank',
                                  schemaPath: '#/definitions/positiveInt/pattern',
                                  params: {
                                    pattern: '^[1-9][0-9]*$'
                                  },
                                  message: 'should match pattern "^[1-9][0-9]*$"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._rank === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._rank, (dataPath || '') + '._rank', data, '_rank', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              if (data.period === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (!refVal[9](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                  if (vErrors === null) vErrors = refVal[9].errors;
                                  else vErrors = vErrors.concat(refVal[9].errors);
                                  errors = vErrors.length;
                                }
                                var valid1 = errors === errs_1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal25.schema = {
    "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "system": {
        "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
        "enum": ["phone", "fax", "email", "pager", "url", "sms", "other"]
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "value": {
        "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
        "$ref": "#/definitions/string"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "use": {
        "description": "Identifies the purpose for the contact point.",
        "enum": ["home", "work", "temp", "old", "mobile"]
      },
      "_use": {
        "description": "Extensions for use",
        "$ref": "#/definitions/Element"
      },
      "rank": {
        "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
        "$ref": "#/definitions/positiveInt"
      },
      "_rank": {
        "description": "Extensions for rank",
        "$ref": "#/definitions/Element"
      },
      "period": {
        "description": "Time period when the contact point was/is in use.",
        "$ref": "#/definitions/Period"
      }
    },
    "additionalProperties": false
  };
  refVal25.errors = null;
  refVal[25] = refVal25;
  var refVal26 = {
    "pattern": "^[1-9][0-9]*$",
    "type": "number",
    "description": "An integer with a value that is positive (e.g. >0)"
  };
  refVal[26] = refVal26;
  var refVal27 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.comparator === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.comparator.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.comparator, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.comparator',
                        schemaPath: '#/properties/comparator/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._comparator === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.unit;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.unit',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.unit',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._unit === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.system;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.system',
                                  schemaPath: '#/definitions/uri/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.system',
                                schemaPath: '#/definitions/uri/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._system === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.code;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.code',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.code',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._code === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal27.schema = {
    "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "comparator": {
        "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
        "enum": ["<", "<=", ">=", ">"]
      },
      "_comparator": {
        "description": "Extensions for comparator",
        "$ref": "#/definitions/Element"
      },
      "unit": {
        "description": "A human-readable form of the unit.",
        "$ref": "#/definitions/string"
      },
      "_unit": {
        "description": "Extensions for unit",
        "$ref": "#/definitions/Element"
      },
      "system": {
        "description": "The identification of the system that provides the coded form of the unit.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A computer processable form of the unit in some unit representation system.",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal27.errors = null;
  refVal[27] = refVal27;
  var refVal28 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.comparator === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.comparator.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.comparator, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.comparator',
                        schemaPath: '#/properties/comparator/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._comparator === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.unit;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.unit',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.unit',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._unit === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.system;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.system',
                                  schemaPath: '#/definitions/uri/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.system',
                                schemaPath: '#/definitions/uri/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._system === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.code;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.code',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.code',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._code === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal28.schema = {
    "description": "A length - a value with a unit that is a physical distance.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "comparator": {
        "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
        "enum": ["<", "<=", ">=", ">"]
      },
      "_comparator": {
        "description": "Extensions for comparator",
        "$ref": "#/definitions/Element"
      },
      "unit": {
        "description": "A human-readable form of the unit.",
        "$ref": "#/definitions/string"
      },
      "_unit": {
        "description": "Extensions for unit",
        "$ref": "#/definitions/Element"
      },
      "system": {
        "description": "The identification of the system that provides the coded form of the unit.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A computer processable form of the unit in some unit representation system.",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal28.errors = null;
  refVal[28] = refVal28;
  var refVal29 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.comparator === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.comparator.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.comparator, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.comparator',
                        schemaPath: '#/properties/comparator/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._comparator === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.unit;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.unit',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.unit',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._unit === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.system;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.system',
                                  schemaPath: '#/definitions/uri/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.system',
                                schemaPath: '#/definitions/uri/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._system === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.code;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.code',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.code',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._code === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal29.schema = {
    "description": "A length of time.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "comparator": {
        "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
        "enum": ["<", "<=", ">=", ">"]
      },
      "_comparator": {
        "description": "Extensions for comparator",
        "$ref": "#/definitions/Element"
      },
      "unit": {
        "description": "A human-readable form of the unit.",
        "$ref": "#/definitions/string"
      },
      "_unit": {
        "description": "Extensions for unit",
        "$ref": "#/definitions/Element"
      },
      "system": {
        "description": "The identification of the system that provides the coded form of the unit.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A computer processable form of the unit in some unit representation system.",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal29.errors = null;
  refVal[29] = refVal29;
  var refVal30 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.use === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.use.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.use, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.use',
                    schemaPath: '#/properties/use/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._use === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.text;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.text',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.text',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._text === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.family;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.family',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.family',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._family === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._family, (dataPath || '') + '._family', data, '_family', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.given;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (Array.isArray(data1)) {
                              var errs__1 = errors;
                              var valid1;
                              for (var i1 = 0; i1 < data1.length; i1++) {
                                var data2 = data1[i1];
                                var errs_2 = errors;
                                var errs_3 = errors;
                                if (typeof data2 === "string") {
                                  if (!pattern1.test(data2)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.given[' + i1 + ']',
                                      schemaPath: '#/definitions/string/pattern',
                                      params: {
                                        pattern: '^[ \\r\\n\\t\\S]+$'
                                      },
                                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.given[' + i1 + ']',
                                    schemaPath: '#/definitions/string/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid3 = errors === errs_3;
                                var valid2 = errors === errs_2;
                                if (!valid2) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.given',
                                schemaPath: '#/properties/given/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data._given;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal[7](data1[i1], (dataPath || '') + '._given[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '._given',
                                  schemaPath: '#/properties/_given/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.prefix;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__1 = errors;
                                  var valid1;
                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                    var data2 = data1[i1];
                                    var errs_2 = errors;
                                    var errs_3 = errors;
                                    if (typeof data2 === "string") {
                                      if (!pattern1.test(data2)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.prefix[' + i1 + ']',
                                          schemaPath: '#/definitions/string/pattern',
                                          params: {
                                            pattern: '^[ \\r\\n\\t\\S]+$'
                                          },
                                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                        }];
                                        return false;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.prefix[' + i1 + ']',
                                        schemaPath: '#/definitions/string/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid3 = errors === errs_3;
                                    var valid2 = errors === errs_2;
                                    if (!valid2) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.prefix',
                                    schemaPath: '#/properties/prefix/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                var data1 = data._prefix;
                                if (data1 === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (Array.isArray(data1)) {
                                    var errs__1 = errors;
                                    var valid1;
                                    for (var i1 = 0; i1 < data1.length; i1++) {
                                      var errs_2 = errors;
                                      if (!refVal[7](data1[i1], (dataPath || '') + '._prefix[' + i1 + ']', data1, i1, rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                      if (!valid2) break;
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '._prefix',
                                      schemaPath: '#/properties/_prefix/type',
                                      params: {
                                        type: 'array'
                                      },
                                      message: 'should be array'
                                    }];
                                    return false;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.suffix;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (Array.isArray(data1)) {
                                      var errs__1 = errors;
                                      var valid1;
                                      for (var i1 = 0; i1 < data1.length; i1++) {
                                        var data2 = data1[i1];
                                        var errs_2 = errors;
                                        var errs_3 = errors;
                                        if (typeof data2 === "string") {
                                          if (!pattern1.test(data2)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.suffix[' + i1 + ']',
                                              schemaPath: '#/definitions/string/pattern',
                                              params: {
                                                pattern: '^[ \\r\\n\\t\\S]+$'
                                              },
                                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.suffix[' + i1 + ']',
                                            schemaPath: '#/definitions/string/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid3 = errors === errs_3;
                                        var valid2 = errors === errs_2;
                                        if (!valid2) break;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.suffix',
                                        schemaPath: '#/properties/suffix/type',
                                        params: {
                                          type: 'array'
                                        },
                                        message: 'should be array'
                                      }];
                                      return false;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    var data1 = data._suffix;
                                    if (data1 === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (Array.isArray(data1)) {
                                        var errs__1 = errors;
                                        var valid1;
                                        for (var i1 = 0; i1 < data1.length; i1++) {
                                          var errs_2 = errors;
                                          if (!refVal[7](data1[i1], (dataPath || '') + '._suffix[' + i1 + ']', data1, i1, rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                          if (!valid2) break;
                                        }
                                      } else {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '._suffix',
                                          schemaPath: '#/properties/_suffix/type',
                                          params: {
                                            type: 'array'
                                          },
                                          message: 'should be array'
                                        }];
                                        return false;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      if (data.period === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        if (!refVal[9](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                          if (vErrors === null) vErrors = refVal[9].errors;
                                          else vErrors = vErrors.concat(refVal[9].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal30.schema = {
    "description": "A human's name with the ability to identify parts and usage.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "use": {
        "description": "Identifies the purpose for this name.",
        "enum": ["usual", "official", "temp", "nickname", "anonymous", "old", "maiden"]
      },
      "_use": {
        "description": "Extensions for use",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.",
        "$ref": "#/definitions/string"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      },
      "family": {
        "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
        "$ref": "#/definitions/string"
      },
      "_family": {
        "description": "Extensions for family",
        "$ref": "#/definitions/Element"
      },
      "given": {
        "description": "Given name.",
        "items": {
          "$ref": "#/definitions/string"
        },
        "type": "array"
      },
      "_given": {
        "description": "Extensions for given",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "prefix": {
        "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
        "items": {
          "$ref": "#/definitions/string"
        },
        "type": "array"
      },
      "_prefix": {
        "description": "Extensions for prefix",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "suffix": {
        "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
        "items": {
          "$ref": "#/definitions/string"
        },
        "type": "array"
      },
      "_suffix": {
        "description": "Extensions for suffix",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "period": {
        "description": "Indicates the period of time when this name was valid for the named person.",
        "$ref": "#/definitions/Period"
      }
    },
    "additionalProperties": false
  };
  refVal30.errors = null;
  refVal[30] = refVal30;
  var refVal31 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'value' || key0 == '_value' || key0 == 'currency' || key0 == '_currency');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.currency;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern5.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.currency',
                          schemaPath: '#/definitions/code/pattern',
                          params: {
                            pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                          },
                          message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.currency',
                        schemaPath: '#/definitions/code/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._currency === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._currency, (dataPath || '') + '._currency', data, '_currency', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal31.schema = {
    "description": "An amount of economic utility in some recognized currency.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "Numerical value (with implicit precision).",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "currency": {
        "description": "ISO 4217 Currency Code.",
        "$ref": "#/definitions/code"
      },
      "_currency": {
        "description": "Extensions for currency",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal31.errors = null;
  refVal[31] = refVal31;
  var refVal32 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.value;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/definitions/decimal/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern8.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.value',
                      schemaPath: '#/definitions/decimal/pattern',
                      params: {
                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                      },
                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._value === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.comparator === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var schema1 = validate.schema.properties.comparator.enum;
                    var valid1;
                    valid1 = false;
                    for (var i1 = 0; i1 < schema1.length; i1++)
                      if (equal(data.comparator, schema1[i1])) {
                        valid1 = true;
                        break;
                      } if (!valid1) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.comparator',
                        schemaPath: '#/properties/comparator/enum',
                        params: {
                          allowedValues: schema1
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._comparator === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.unit;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.unit',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.unit',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._unit === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.system;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern2.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.system',
                                  schemaPath: '#/definitions/uri/pattern',
                                  params: {
                                    pattern: '^\\S*$'
                                  },
                                  message: 'should match pattern "^\\S*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.system',
                                schemaPath: '#/definitions/uri/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._system === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.code;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.code',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.code',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._code === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal32.schema = {
    "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "value": {
        "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
        "$ref": "#/definitions/decimal"
      },
      "_value": {
        "description": "Extensions for value",
        "$ref": "#/definitions/Element"
      },
      "comparator": {
        "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
        "enum": ["<", "<=", ">=", ">"]
      },
      "_comparator": {
        "description": "Extensions for comparator",
        "$ref": "#/definitions/Element"
      },
      "unit": {
        "description": "A human-readable form of the unit.",
        "$ref": "#/definitions/string"
      },
      "_unit": {
        "description": "Extensions for unit",
        "$ref": "#/definitions/Element"
      },
      "system": {
        "description": "The identification of the system that provides the coded form of the unit.",
        "$ref": "#/definitions/uri"
      },
      "_system": {
        "description": "Extensions for system",
        "$ref": "#/definitions/Element"
      },
      "code": {
        "description": "A computer processable form of the unit in some unit representation system.",
        "$ref": "#/definitions/code"
      },
      "_code": {
        "description": "Extensions for code",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal32.errors = null;
  refVal[32] = refVal32;
  var refVal33 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'low' || key0 == 'high');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.low === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (!refVal[32](data.low, (dataPath || '') + '.low', data, 'low', rootData)) {
                  if (vErrors === null) vErrors = refVal[32].errors;
                  else vErrors = vErrors.concat(refVal[32].errors);
                  errors = vErrors.length;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.high === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[32](data.high, (dataPath || '') + '.high', data, 'high', rootData)) {
                    if (vErrors === null) vErrors = refVal[32].errors;
                    else vErrors = vErrors.concat(refVal[32].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal33.schema = {
    "description": "A set of ordered Quantities defined by a low and high limit.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "low": {
        "description": "The low limit. The boundary is inclusive.",
        "$ref": "#/definitions/Quantity"
      },
      "high": {
        "description": "The high limit. The boundary is inclusive.",
        "$ref": "#/definitions/Quantity"
      }
    },
    "additionalProperties": false
  };
  refVal33.errors = null;
  refVal[33] = refVal33;
  var refVal34 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'numerator' || key0 == 'denominator');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.numerator === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (!refVal[32](data.numerator, (dataPath || '') + '.numerator', data, 'numerator', rootData)) {
                  if (vErrors === null) vErrors = refVal[32].errors;
                  else vErrors = vErrors.concat(refVal[32].errors);
                  errors = vErrors.length;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.denominator === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[32](data.denominator, (dataPath || '') + '.denominator', data, 'denominator', rootData)) {
                    if (vErrors === null) vErrors = refVal[32].errors;
                    else vErrors = vErrors.concat(refVal[32].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal34.schema = {
    "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "numerator": {
        "description": "The value of the numerator.",
        "$ref": "#/definitions/Quantity"
      },
      "denominator": {
        "description": "The value of the denominator.",
        "$ref": "#/definitions/Quantity"
      }
    },
    "additionalProperties": false
  };
  refVal34.errors = null;
  refVal[34] = refVal34;
  var refVal35 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [{
                keyword: 'additionalProperties',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/additionalProperties',
                params: {
                  additionalProperty: '' + key0 + ''
                },
                message: 'should NOT have additional properties'
              }];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern1.test(data1)) {
                  validate.errors = [{
                    keyword: 'pattern',
                    dataPath: (dataPath || '') + '.id',
                    schemaPath: '#/definitions/string/pattern',
                    params: {
                      pattern: '^[ \\r\\n\\t\\S]+$'
                    },
                    message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                  }];
                  return false;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.extension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.extension',
                    schemaPath: '#/properties/extension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.origin === undefined) {
                  valid1 = false;
                  validate.errors = [{
                    keyword: 'required',
                    dataPath: (dataPath || '') + "",
                    schemaPath: '#/required',
                    params: {
                      missingProperty: 'origin'
                    },
                    message: 'should have required property \'origin\''
                  }];
                  return false;
                } else {
                  var errs_1 = errors;
                  if (!refVal[32](data.origin, (dataPath || '') + '.origin', data, 'origin', rootData)) {
                    if (vErrors === null) vErrors = refVal[32].errors;
                    else vErrors = vErrors.concat(refVal[32].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.period;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 !== "number") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.period',
                        schemaPath: '#/definitions/decimal/type',
                        params: {
                          type: 'number'
                        },
                        message: 'should be number'
                      }];
                      return false;
                    }
                    if (typeof data1 === "string") {
                      if (!pattern8.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.period',
                          schemaPath: '#/definitions/decimal/pattern',
                          params: {
                            pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                          },
                          message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                        }];
                        return false;
                      }
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._period === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._period, (dataPath || '') + '._period', data, '_period', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.factor;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.factor',
                            schemaPath: '#/definitions/decimal/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern8.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.factor',
                              schemaPath: '#/definitions/decimal/pattern',
                              params: {
                                pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                              },
                              message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._factor === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._factor, (dataPath || '') + '._factor', data, '_factor', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.lowerLimit;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.lowerLimit',
                                schemaPath: '#/definitions/decimal/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern8.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.lowerLimit',
                                  schemaPath: '#/definitions/decimal/pattern',
                                  params: {
                                    pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                  },
                                  message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._lowerLimit === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._lowerLimit, (dataPath || '') + '._lowerLimit', data, '_lowerLimit', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.upperLimit;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 !== "number") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.upperLimit',
                                    schemaPath: '#/definitions/decimal/type',
                                    params: {
                                      type: 'number'
                                    },
                                    message: 'should be number'
                                  }];
                                  return false;
                                }
                                if (typeof data1 === "string") {
                                  if (!pattern8.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.upperLimit',
                                      schemaPath: '#/definitions/decimal/pattern',
                                      params: {
                                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                      },
                                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                    }];
                                    return false;
                                  }
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._upperLimit === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._upperLimit, (dataPath || '') + '._upperLimit', data, '_upperLimit', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.dimensions;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data1 !== "number") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.dimensions',
                                        schemaPath: '#/definitions/positiveInt/type',
                                        params: {
                                          type: 'number'
                                        },
                                        message: 'should be number'
                                      }];
                                      return false;
                                    }
                                    if (typeof data1 === "string") {
                                      if (!pattern12.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.dimensions',
                                          schemaPath: '#/definitions/positiveInt/pattern',
                                          params: {
                                            pattern: '^[1-9][0-9]*$'
                                          },
                                          message: 'should match pattern "^[1-9][0-9]*$"'
                                        }];
                                        return false;
                                      }
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._dimensions === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._dimensions, (dataPath || '') + '._dimensions', data, '_dimensions', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.data;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern1.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.data',
                                              schemaPath: '#/definitions/string/pattern',
                                              params: {
                                                pattern: '^[ \\r\\n\\t\\S]+$'
                                              },
                                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.data',
                                            schemaPath: '#/definitions/string/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data._data === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[7](data._data, (dataPath || '') + '._data', data, '_data', rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal35.schema = {
    "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "origin": {
        "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
        "$ref": "#/definitions/Quantity"
      },
      "period": {
        "description": "The length of time between sampling times, measured in milliseconds.",
        "$ref": "#/definitions/decimal"
      },
      "_period": {
        "description": "Extensions for period",
        "$ref": "#/definitions/Element"
      },
      "factor": {
        "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
        "$ref": "#/definitions/decimal"
      },
      "_factor": {
        "description": "Extensions for factor",
        "$ref": "#/definitions/Element"
      },
      "lowerLimit": {
        "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
        "$ref": "#/definitions/decimal"
      },
      "_lowerLimit": {
        "description": "Extensions for lowerLimit",
        "$ref": "#/definitions/Element"
      },
      "upperLimit": {
        "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
        "$ref": "#/definitions/decimal"
      },
      "_upperLimit": {
        "description": "Extensions for upperLimit",
        "$ref": "#/definitions/Element"
      },
      "dimensions": {
        "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
        "$ref": "#/definitions/positiveInt"
      },
      "_dimensions": {
        "description": "Extensions for dimensions",
        "$ref": "#/definitions/Element"
      },
      "data": {
        "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
        "$ref": "#/definitions/string"
      },
      "_data": {
        "description": "Extensions for data",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false,
    "required": ["origin"]
  };
  refVal35.errors = null;
  refVal[35] = refVal35;
  var refVal36 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [{
                keyword: 'additionalProperties',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/additionalProperties',
                params: {
                  additionalProperty: '' + key0 + ''
                },
                message: 'should NOT have additional properties'
              }];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern1.test(data1)) {
                  validate.errors = [{
                    keyword: 'pattern',
                    dataPath: (dataPath || '') + '.id',
                    schemaPath: '#/definitions/string/pattern',
                    params: {
                      pattern: '^[ \\r\\n\\t\\S]+$'
                    },
                    message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                  }];
                  return false;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.extension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.extension',
                    schemaPath: '#/properties/extension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.type;
                if (data1 === undefined) {
                  valid1 = false;
                  validate.errors = [{
                    keyword: 'required',
                    dataPath: (dataPath || '') + "",
                    schemaPath: '#/required',
                    params: {
                      missingProperty: 'type'
                    },
                    message: 'should have required property \'type\''
                  }];
                  return false;
                } else {
                  var errs_1 = errors;
                  if (Array.isArray(data1)) {
                    var errs__1 = errors;
                    var valid1;
                    for (var i1 = 0; i1 < data1.length; i1++) {
                      var errs_2 = errors;
                      if (!refVal[18](data1[i1], (dataPath || '') + '.type[' + i1 + ']', data1, i1, rootData)) {
                        if (vErrors === null) vErrors = refVal[18].errors;
                        else vErrors = vErrors.concat(refVal[18].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                      if (!valid2) break;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.type',
                      schemaPath: '#/properties/type/type',
                      params: {
                        type: 'array'
                      },
                      message: 'should be array'
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.when;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern9.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.when',
                          schemaPath: '#/definitions/instant/pattern',
                          params: {
                            pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$'
                          },
                          message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.when',
                        schemaPath: '#/definitions/instant/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._when === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._when, (dataPath || '') + '._when', data, '_when', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.who === undefined) {
                        valid1 = false;
                        validate.errors = [{
                          keyword: 'required',
                          dataPath: (dataPath || '') + "",
                          schemaPath: '#/required',
                          params: {
                            missingProperty: 'who'
                          },
                          message: 'should have required property \'who\''
                        }];
                        return false;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[15](data.who, (dataPath || '') + '.who', data, 'who', rootData)) {
                          if (vErrors === null) vErrors = refVal[15].errors;
                          else vErrors = vErrors.concat(refVal[15].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data.onBehalfOf === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[15](data.onBehalfOf, (dataPath || '') + '.onBehalfOf', data, 'onBehalfOf', rootData)) {
                            if (vErrors === null) vErrors = refVal[15].errors;
                            else vErrors = vErrors.concat(refVal[15].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.targetFormat;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern5.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.targetFormat',
                                  schemaPath: '#/definitions/code/pattern',
                                  params: {
                                    pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                  },
                                  message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.targetFormat',
                                schemaPath: '#/definitions/code/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._targetFormat === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._targetFormat, (dataPath || '') + '._targetFormat', data, '_targetFormat', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.sigFormat;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.sigFormat',
                                      schemaPath: '#/definitions/code/pattern',
                                      params: {
                                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                      },
                                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.sigFormat',
                                    schemaPath: '#/definitions/code/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._sigFormat === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._sigFormat, (dataPath || '') + '._sigFormat', data, '_sigFormat', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data.data === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data.data !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.data',
                                        schemaPath: '#/definitions/base64Binary/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._data === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._data, (dataPath || '') + '._data', data, '_data', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal36.schema = {
    "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
        "items": {
          "$ref": "#/definitions/Coding"
        },
        "type": "array"
      },
      "when": {
        "description": "When the digital signature was signed.",
        "$ref": "#/definitions/instant"
      },
      "_when": {
        "description": "Extensions for when",
        "$ref": "#/definitions/Element"
      },
      "who": {
        "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
        "$ref": "#/definitions/Reference"
      },
      "onBehalfOf": {
        "description": "A reference to an application-usable description of the identity that is represented by the signature.",
        "$ref": "#/definitions/Reference"
      },
      "targetFormat": {
        "description": "A mime type that indicates the technical format of the target resources signed by the signature.",
        "$ref": "#/definitions/code"
      },
      "_targetFormat": {
        "description": "Extensions for targetFormat",
        "$ref": "#/definitions/Element"
      },
      "sigFormat": {
        "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.",
        "$ref": "#/definitions/code"
      },
      "_sigFormat": {
        "description": "Extensions for sigFormat",
        "$ref": "#/definitions/Element"
      },
      "data": {
        "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
        "$ref": "#/definitions/base64Binary"
      },
      "_data": {
        "description": "Extensions for data",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false,
    "required": ["type", "who"]
  };
  refVal36.errors = null;
  refVal[36] = refVal36;
  var refVal37 = {
    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
    "type": "string",
    "description": "An instant in time - known at least to the second"
  };
  refVal[37] = refVal37;
  var refVal38 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'modifierExtension' || key0 == 'event' || key0 == '_event' || key0 == 'repeat' || key0 == 'code');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.event;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (Array.isArray(data1)) {
                    var errs__1 = errors;
                    var valid1;
                    for (var i1 = 0; i1 < data1.length; i1++) {
                      var data2 = data1[i1];
                      var errs_2 = errors;
                      var errs_3 = errors;
                      if (typeof data2 === "string") {
                        if (!pattern7.test(data2)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.event[' + i1 + ']',
                            schemaPath: '#/definitions/dateTime/pattern',
                            params: {
                              pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                            },
                            message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.event[' + i1 + ']',
                          schemaPath: '#/definitions/dateTime/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid3 = errors === errs_3;
                      var valid2 = errors === errs_2;
                      if (!valid2) break;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.event',
                      schemaPath: '#/properties/event/type',
                      params: {
                        type: 'array'
                      },
                      message: 'should be array'
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data._event;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (Array.isArray(data1)) {
                      var errs__1 = errors;
                      var valid1;
                      for (var i1 = 0; i1 < data1.length; i1++) {
                        var errs_2 = errors;
                        if (!refVal[7](data1[i1], (dataPath || '') + '._event[' + i1 + ']', data1, i1, rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                        if (!valid2) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '._event',
                        schemaPath: '#/properties/_event/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.repeat === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal39(data.repeat, (dataPath || '') + '.repeat', data, 'repeat', rootData)) {
                        if (vErrors === null) vErrors = refVal39.errors;
                        else vErrors = vErrors.concat(refVal39.errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.code === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[17](data.code, (dataPath || '') + '.code', data, 'code', rootData)) {
                          if (vErrors === null) vErrors = refVal[17].errors;
                          else vErrors = vErrors.concat(refVal[17].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal38.schema = {
    "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "event": {
        "description": "Identifies specific times when the event occurs.",
        "items": {
          "$ref": "#/definitions/dateTime"
        },
        "type": "array"
      },
      "_event": {
        "description": "Extensions for event",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "repeat": {
        "description": "A set of rules that describe when the event is scheduled.",
        "$ref": "#/definitions/Timing_Repeat"
      },
      "code": {
        "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
        "$ref": "#/definitions/CodeableConcept"
      }
    },
    "additionalProperties": false
  };
  refVal38.errors = null;
  refVal[38] = refVal38;
  var refVal39 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.boundsDuration === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[29](data.boundsDuration, (dataPath || '') + '.boundsDuration', data, 'boundsDuration', rootData)) {
                    if (vErrors === null) vErrors = refVal[29].errors;
                    else vErrors = vErrors.concat(refVal[29].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.boundsRange === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[33](data.boundsRange, (dataPath || '') + '.boundsRange', data, 'boundsRange', rootData)) {
                      if (vErrors === null) vErrors = refVal[33].errors;
                      else vErrors = vErrors.concat(refVal[33].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.boundsPeriod === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[9](data.boundsPeriod, (dataPath || '') + '.boundsPeriod', data, 'boundsPeriod', rootData)) {
                        if (vErrors === null) vErrors = refVal[9].errors;
                        else vErrors = vErrors.concat(refVal[9].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.count;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.count',
                            schemaPath: '#/definitions/positiveInt/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern12.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.count',
                              schemaPath: '#/definitions/positiveInt/pattern',
                              params: {
                                pattern: '^[1-9][0-9]*$'
                              },
                              message: 'should match pattern "^[1-9][0-9]*$"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._count === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._count, (dataPath || '') + '._count', data, '_count', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.countMax;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.countMax',
                                schemaPath: '#/definitions/positiveInt/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern12.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.countMax',
                                  schemaPath: '#/definitions/positiveInt/pattern',
                                  params: {
                                    pattern: '^[1-9][0-9]*$'
                                  },
                                  message: 'should match pattern "^[1-9][0-9]*$"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._countMax === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._countMax, (dataPath || '') + '._countMax', data, '_countMax', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.duration;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 !== "number") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.duration',
                                    schemaPath: '#/definitions/decimal/type',
                                    params: {
                                      type: 'number'
                                    },
                                    message: 'should be number'
                                  }];
                                  return false;
                                }
                                if (typeof data1 === "string") {
                                  if (!pattern8.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.duration',
                                      schemaPath: '#/definitions/decimal/pattern',
                                      params: {
                                        pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                      },
                                      message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                    }];
                                    return false;
                                  }
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._duration === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._duration, (dataPath || '') + '._duration', data, '_duration', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.durationMax;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data1 !== "number") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.durationMax',
                                        schemaPath: '#/definitions/decimal/type',
                                        params: {
                                          type: 'number'
                                        },
                                        message: 'should be number'
                                      }];
                                      return false;
                                    }
                                    if (typeof data1 === "string") {
                                      if (!pattern8.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.durationMax',
                                          schemaPath: '#/definitions/decimal/pattern',
                                          params: {
                                            pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                          },
                                          message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                        }];
                                        return false;
                                      }
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._durationMax === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._durationMax, (dataPath || '') + '._durationMax', data, '_durationMax', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      if (data.durationUnit === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        var schema1 = validate.schema.properties.durationUnit.enum;
                                        var valid1;
                                        valid1 = false;
                                        for (var i1 = 0; i1 < schema1.length; i1++)
                                          if (equal(data.durationUnit, schema1[i1])) {
                                            valid1 = true;
                                            break;
                                          } if (!valid1) {
                                          validate.errors = [{
                                            keyword: 'enum',
                                            dataPath: (dataPath || '') + '.durationUnit',
                                            schemaPath: '#/properties/durationUnit/enum',
                                            params: {
                                              allowedValues: schema1
                                            },
                                            message: 'should be equal to one of the allowed values'
                                          }];
                                          return false;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data._durationUnit === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[7](data._durationUnit, (dataPath || '') + '._durationUnit', data, '_durationUnit', rootData)) {
                                            if (vErrors === null) vErrors = refVal[7].errors;
                                            else vErrors = vErrors.concat(refVal[7].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          var data1 = data.frequency;
                                          if (data1 === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            var errs_2 = errors;
                                            if (typeof data1 !== "number") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.frequency',
                                                schemaPath: '#/definitions/positiveInt/type',
                                                params: {
                                                  type: 'number'
                                                },
                                                message: 'should be number'
                                              }];
                                              return false;
                                            }
                                            if (typeof data1 === "string") {
                                              if (!pattern12.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.frequency',
                                                  schemaPath: '#/definitions/positiveInt/pattern',
                                                  params: {
                                                    pattern: '^[1-9][0-9]*$'
                                                  },
                                                  message: 'should match pattern "^[1-9][0-9]*$"'
                                                }];
                                                return false;
                                              }
                                            }
                                            var valid2 = errors === errs_2;
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            if (data._frequency === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (!refVal[7](data._frequency, (dataPath || '') + '._frequency', data, '_frequency', rootData)) {
                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              var data1 = data.frequencyMax;
                                              if (data1 === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                var errs_2 = errors;
                                                if (typeof data1 !== "number") {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.frequencyMax',
                                                    schemaPath: '#/definitions/positiveInt/type',
                                                    params: {
                                                      type: 'number'
                                                    },
                                                    message: 'should be number'
                                                  }];
                                                  return false;
                                                }
                                                if (typeof data1 === "string") {
                                                  if (!pattern12.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.frequencyMax',
                                                      schemaPath: '#/definitions/positiveInt/pattern',
                                                      params: {
                                                        pattern: '^[1-9][0-9]*$'
                                                      },
                                                      message: 'should match pattern "^[1-9][0-9]*$"'
                                                    }];
                                                    return false;
                                                  }
                                                }
                                                var valid2 = errors === errs_2;
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data._frequencyMax === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[7](data._frequencyMax, (dataPath || '') + '._frequencyMax', data, '_frequencyMax', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[7].errors;
                                                    else vErrors = vErrors.concat(refVal[7].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  var data1 = data.period;
                                                  if (data1 === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    var errs_2 = errors;
                                                    if (typeof data1 !== "number") {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.period',
                                                        schemaPath: '#/definitions/decimal/type',
                                                        params: {
                                                          type: 'number'
                                                        },
                                                        message: 'should be number'
                                                      }];
                                                      return false;
                                                    }
                                                    if (typeof data1 === "string") {
                                                      if (!pattern8.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.period',
                                                          schemaPath: '#/definitions/decimal/pattern',
                                                          params: {
                                                            pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                                          },
                                                          message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                                        }];
                                                        return false;
                                                      }
                                                    }
                                                    var valid2 = errors === errs_2;
                                                    var valid1 = errors === errs_1;
                                                  }
                                                  if (valid1) {
                                                    if (data._period === undefined) {
                                                      valid1 = true;
                                                    } else {
                                                      var errs_1 = errors;
                                                      if (!refVal[7](data._period, (dataPath || '') + '._period', data, '_period', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid1 = errors === errs_1;
                                                    }
                                                    if (valid1) {
                                                      var data1 = data.periodMax;
                                                      if (data1 === undefined) {
                                                        valid1 = true;
                                                      } else {
                                                        var errs_1 = errors;
                                                        var errs_2 = errors;
                                                        if (typeof data1 !== "number") {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.periodMax',
                                                            schemaPath: '#/definitions/decimal/type',
                                                            params: {
                                                              type: 'number'
                                                            },
                                                            message: 'should be number'
                                                          }];
                                                          return false;
                                                        }
                                                        if (typeof data1 === "string") {
                                                          if (!pattern8.test(data1)) {
                                                            validate.errors = [{
                                                              keyword: 'pattern',
                                                              dataPath: (dataPath || '') + '.periodMax',
                                                              schemaPath: '#/definitions/decimal/pattern',
                                                              params: {
                                                                pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                                                              },
                                                              message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                                                            }];
                                                            return false;
                                                          }
                                                        }
                                                        var valid2 = errors === errs_2;
                                                        var valid1 = errors === errs_1;
                                                      }
                                                      if (valid1) {
                                                        if (data._periodMax === undefined) {
                                                          valid1 = true;
                                                        } else {
                                                          var errs_1 = errors;
                                                          if (!refVal[7](data._periodMax, (dataPath || '') + '._periodMax', data, '_periodMax', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[7].errors;
                                                            else vErrors = vErrors.concat(refVal[7].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid1 = errors === errs_1;
                                                        }
                                                        if (valid1) {
                                                          if (data.periodUnit === undefined) {
                                                            valid1 = true;
                                                          } else {
                                                            var errs_1 = errors;
                                                            var schema1 = validate.schema.properties.periodUnit.enum;
                                                            var valid1;
                                                            valid1 = false;
                                                            for (var i1 = 0; i1 < schema1.length; i1++)
                                                              if (equal(data.periodUnit, schema1[i1])) {
                                                                valid1 = true;
                                                                break;
                                                              } if (!valid1) {
                                                              validate.errors = [{
                                                                keyword: 'enum',
                                                                dataPath: (dataPath || '') + '.periodUnit',
                                                                schemaPath: '#/properties/periodUnit/enum',
                                                                params: {
                                                                  allowedValues: schema1
                                                                },
                                                                message: 'should be equal to one of the allowed values'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid1 = errors === errs_1;
                                                          }
                                                          if (valid1) {
                                                            if (data._periodUnit === undefined) {
                                                              valid1 = true;
                                                            } else {
                                                              var errs_1 = errors;
                                                              if (!refVal[7](data._periodUnit, (dataPath || '') + '._periodUnit', data, '_periodUnit', rootData)) {
                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid1 = errors === errs_1;
                                                            }
                                                            if (valid1) {
                                                              var data1 = data.dayOfWeek;
                                                              if (data1 === undefined) {
                                                                valid1 = true;
                                                              } else {
                                                                var errs_1 = errors;
                                                                if (Array.isArray(data1)) {
                                                                  var errs__1 = errors;
                                                                  var valid1;
                                                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                                                    var data2 = data1[i1];
                                                                    var errs_2 = errors;
                                                                    var errs_3 = errors;
                                                                    if (typeof data2 === "string") {
                                                                      if (!pattern5.test(data2)) {
                                                                        validate.errors = [{
                                                                          keyword: 'pattern',
                                                                          dataPath: (dataPath || '') + '.dayOfWeek[' + i1 + ']',
                                                                          schemaPath: '#/definitions/code/pattern',
                                                                          params: {
                                                                            pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                                                          },
                                                                          message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.dayOfWeek[' + i1 + ']',
                                                                        schemaPath: '#/definitions/code/type',
                                                                        params: {
                                                                          type: 'string'
                                                                        },
                                                                        message: 'should be string'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid3 = errors === errs_3;
                                                                    var valid2 = errors === errs_2;
                                                                    if (!valid2) break;
                                                                  }
                                                                } else {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '.dayOfWeek',
                                                                    schemaPath: '#/properties/dayOfWeek/type',
                                                                    params: {
                                                                      type: 'array'
                                                                    },
                                                                    message: 'should be array'
                                                                  }];
                                                                  return false;
                                                                }
                                                                var valid1 = errors === errs_1;
                                                              }
                                                              if (valid1) {
                                                                var data1 = data._dayOfWeek;
                                                                if (data1 === undefined) {
                                                                  valid1 = true;
                                                                } else {
                                                                  var errs_1 = errors;
                                                                  if (Array.isArray(data1)) {
                                                                    var errs__1 = errors;
                                                                    var valid1;
                                                                    for (var i1 = 0; i1 < data1.length; i1++) {
                                                                      var errs_2 = errors;
                                                                      if (!refVal[7](data1[i1], (dataPath || '') + '._dayOfWeek[' + i1 + ']', data1, i1, rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[7].errors;
                                                                        else vErrors = vErrors.concat(refVal[7].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                      if (!valid2) break;
                                                                    }
                                                                  } else {
                                                                    validate.errors = [{
                                                                      keyword: 'type',
                                                                      dataPath: (dataPath || '') + '._dayOfWeek',
                                                                      schemaPath: '#/properties/_dayOfWeek/type',
                                                                      params: {
                                                                        type: 'array'
                                                                      },
                                                                      message: 'should be array'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                  var valid1 = errors === errs_1;
                                                                }
                                                                if (valid1) {
                                                                  var data1 = data.timeOfDay;
                                                                  if (data1 === undefined) {
                                                                    valid1 = true;
                                                                  } else {
                                                                    var errs_1 = errors;
                                                                    if (Array.isArray(data1)) {
                                                                      var errs__1 = errors;
                                                                      var valid1;
                                                                      for (var i1 = 0; i1 < data1.length; i1++) {
                                                                        var data2 = data1[i1];
                                                                        var errs_2 = errors;
                                                                        var errs_3 = errors;
                                                                        if (typeof data2 === "string") {
                                                                          if (!pattern13.test(data2)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.timeOfDay[' + i1 + ']',
                                                                              schemaPath: '#/definitions/time/pattern',
                                                                              params: {
                                                                                pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$'
                                                                              },
                                                                              message: 'should match pattern "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        } else {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.timeOfDay[' + i1 + ']',
                                                                            schemaPath: '#/definitions/time/type',
                                                                            params: {
                                                                              type: 'string'
                                                                            },
                                                                            message: 'should be string'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        var valid3 = errors === errs_3;
                                                                        var valid2 = errors === errs_2;
                                                                        if (!valid2) break;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.timeOfDay',
                                                                        schemaPath: '#/properties/timeOfDay/type',
                                                                        params: {
                                                                          type: 'array'
                                                                        },
                                                                        message: 'should be array'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid1 = errors === errs_1;
                                                                  }
                                                                  if (valid1) {
                                                                    var data1 = data._timeOfDay;
                                                                    if (data1 === undefined) {
                                                                      valid1 = true;
                                                                    } else {
                                                                      var errs_1 = errors;
                                                                      if (Array.isArray(data1)) {
                                                                        var errs__1 = errors;
                                                                        var valid1;
                                                                        for (var i1 = 0; i1 < data1.length; i1++) {
                                                                          var errs_2 = errors;
                                                                          if (!refVal[7](data1[i1], (dataPath || '') + '._timeOfDay[' + i1 + ']', data1, i1, rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[7].errors;
                                                                            else vErrors = vErrors.concat(refVal[7].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                          if (!valid2) break;
                                                                        }
                                                                      } else {
                                                                        validate.errors = [{
                                                                          keyword: 'type',
                                                                          dataPath: (dataPath || '') + '._timeOfDay',
                                                                          schemaPath: '#/properties/_timeOfDay/type',
                                                                          params: {
                                                                            type: 'array'
                                                                          },
                                                                          message: 'should be array'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                      var valid1 = errors === errs_1;
                                                                    }
                                                                    if (valid1) {
                                                                      var data1 = data.when;
                                                                      if (data1 === undefined) {
                                                                        valid1 = true;
                                                                      } else {
                                                                        var errs_1 = errors;
                                                                        if (Array.isArray(data1)) {
                                                                          var errs__1 = errors;
                                                                          var valid1;
                                                                          for (var i1 = 0; i1 < data1.length; i1++) {
                                                                            var errs_2 = errors;
                                                                            var schema2 = validate.schema.properties.when.items.enum;
                                                                            var valid2;
                                                                            valid2 = false;
                                                                            for (var i2 = 0; i2 < schema2.length; i2++)
                                                                              if (equal(data1[i1], schema2[i2])) {
                                                                                valid2 = true;
                                                                                break;
                                                                              } if (!valid2) {
                                                                              validate.errors = [{
                                                                                keyword: 'enum',
                                                                                dataPath: (dataPath || '') + '.when[' + i1 + ']',
                                                                                schemaPath: '#/properties/when/items/enum',
                                                                                params: {
                                                                                  allowedValues: schema2
                                                                                },
                                                                                message: 'should be equal to one of the allowed values'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                            if (!valid2) break;
                                                                          }
                                                                        } else {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.when',
                                                                            schemaPath: '#/properties/when/type',
                                                                            params: {
                                                                              type: 'array'
                                                                            },
                                                                            message: 'should be array'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        var valid1 = errors === errs_1;
                                                                      }
                                                                      if (valid1) {
                                                                        var data1 = data._when;
                                                                        if (data1 === undefined) {
                                                                          valid1 = true;
                                                                        } else {
                                                                          var errs_1 = errors;
                                                                          if (Array.isArray(data1)) {
                                                                            var errs__1 = errors;
                                                                            var valid1;
                                                                            for (var i1 = 0; i1 < data1.length; i1++) {
                                                                              var errs_2 = errors;
                                                                              if (!refVal[7](data1[i1], (dataPath || '') + '._when[' + i1 + ']', data1, i1, rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                              if (!valid2) break;
                                                                            }
                                                                          } else {
                                                                            validate.errors = [{
                                                                              keyword: 'type',
                                                                              dataPath: (dataPath || '') + '._when',
                                                                              schemaPath: '#/properties/_when/type',
                                                                              params: {
                                                                                type: 'array'
                                                                              },
                                                                              message: 'should be array'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                          var valid1 = errors === errs_1;
                                                                        }
                                                                        if (valid1) {
                                                                          var data1 = data.offset;
                                                                          if (data1 === undefined) {
                                                                            valid1 = true;
                                                                          } else {
                                                                            var errs_1 = errors;
                                                                            var errs_2 = errors;
                                                                            if (typeof data1 !== "number") {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.offset',
                                                                                schemaPath: '#/definitions/unsignedInt/type',
                                                                                params: {
                                                                                  type: 'number'
                                                                                },
                                                                                message: 'should be number'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern14.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.offset',
                                                                                  schemaPath: '#/definitions/unsignedInt/pattern',
                                                                                  params: {
                                                                                    pattern: '^[0]|([1-9][0-9]*)$'
                                                                                  },
                                                                                  message: 'should match pattern "^[0]|([1-9][0-9]*)$"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                            var valid1 = errors === errs_1;
                                                                          }
                                                                          if (valid1) {
                                                                            if (data._offset === undefined) {
                                                                              valid1 = true;
                                                                            } else {
                                                                              var errs_1 = errors;
                                                                              if (!refVal[7](data._offset, (dataPath || '') + '._offset', data, '_offset', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[7].errors;
                                                                                else vErrors = vErrors.concat(refVal[7].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid1 = errors === errs_1;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal39.schema = {
    "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "boundsDuration": {
        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
        "$ref": "#/definitions/Duration"
      },
      "boundsRange": {
        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
        "$ref": "#/definitions/Range"
      },
      "boundsPeriod": {
        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
        "$ref": "#/definitions/Period"
      },
      "count": {
        "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
        "$ref": "#/definitions/positiveInt"
      },
      "_count": {
        "description": "Extensions for count",
        "$ref": "#/definitions/Element"
      },
      "countMax": {
        "description": "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
        "$ref": "#/definitions/positiveInt"
      },
      "_countMax": {
        "description": "Extensions for countMax",
        "$ref": "#/definitions/Element"
      },
      "duration": {
        "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
        "$ref": "#/definitions/decimal"
      },
      "_duration": {
        "description": "Extensions for duration",
        "$ref": "#/definitions/Element"
      },
      "durationMax": {
        "description": "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
        "$ref": "#/definitions/decimal"
      },
      "_durationMax": {
        "description": "Extensions for durationMax",
        "$ref": "#/definitions/Element"
      },
      "durationUnit": {
        "description": "The units of time for the duration, in UCUM units.",
        "enum": ["s", "min", "h", "d", "wk", "mo", "a"]
      },
      "_durationUnit": {
        "description": "Extensions for durationUnit",
        "$ref": "#/definitions/Element"
      },
      "frequency": {
        "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
        "$ref": "#/definitions/positiveInt"
      },
      "_frequency": {
        "description": "Extensions for frequency",
        "$ref": "#/definitions/Element"
      },
      "frequencyMax": {
        "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
        "$ref": "#/definitions/positiveInt"
      },
      "_frequencyMax": {
        "description": "Extensions for frequencyMax",
        "$ref": "#/definitions/Element"
      },
      "period": {
        "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
        "$ref": "#/definitions/decimal"
      },
      "_period": {
        "description": "Extensions for period",
        "$ref": "#/definitions/Element"
      },
      "periodMax": {
        "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
        "$ref": "#/definitions/decimal"
      },
      "_periodMax": {
        "description": "Extensions for periodMax",
        "$ref": "#/definitions/Element"
      },
      "periodUnit": {
        "description": "The units of time for the period in UCUM units.",
        "enum": ["s", "min", "h", "d", "wk", "mo", "a"]
      },
      "_periodUnit": {
        "description": "Extensions for periodUnit",
        "$ref": "#/definitions/Element"
      },
      "dayOfWeek": {
        "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
        "items": {
          "$ref": "#/definitions/code"
        },
        "type": "array"
      },
      "_dayOfWeek": {
        "description": "Extensions for dayOfWeek",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "timeOfDay": {
        "description": "Specified time of day for action to take place.",
        "items": {
          "$ref": "#/definitions/time"
        },
        "type": "array"
      },
      "_timeOfDay": {
        "description": "Extensions for timeOfDay",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "when": {
        "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
        "items": {
          "enum": ["MORN", "MORN.early", "MORN.late", "NOON", "AFT", "AFT.early", "AFT.late", "EVE", "EVE.early", "EVE.late", "NIGHT", "PHS", "HS", "WAKE", "C", "CM", "CD", "CV", "AC", "ACM", "ACD", "ACV", "PC", "PCM", "PCD", "PCV"]
        },
        "type": "array"
      },
      "_when": {
        "description": "Extensions for when",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "offset": {
        "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
        "$ref": "#/definitions/unsignedInt"
      },
      "_offset": {
        "description": "Extensions for offset",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal39.errors = null;
  refVal[39] = refVal39;
  var refVal40 = {
    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
    "type": "string",
    "description": "A time during the day, with no date specified"
  };
  refVal[40] = refVal40;
  var refVal41 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'name' || key0 == '_name' || key0 == 'telecom');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.name;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern1.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.name',
                      schemaPath: '#/definitions/string/pattern',
                      params: {
                        pattern: '^[ \\r\\n\\t\\S]+$'
                      },
                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.name',
                    schemaPath: '#/definitions/string/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._name === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.telecom;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (Array.isArray(data1)) {
                      var errs__1 = errors;
                      var valid1;
                      for (var i1 = 0; i1 < data1.length; i1++) {
                        var errs_2 = errors;
                        if (!refVal[25](data1[i1], (dataPath || '') + '.telecom[' + i1 + ']', data1, i1, rootData)) {
                          if (vErrors === null) vErrors = refVal[25].errors;
                          else vErrors = vErrors.concat(refVal[25].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                        if (!valid2) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.telecom',
                        schemaPath: '#/properties/telecom/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal41.schema = {
    "description": "Specifies contact information for a person or organization.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of an individual to contact.",
        "$ref": "#/definitions/string"
      },
      "_name": {
        "description": "Extensions for name",
        "$ref": "#/definitions/Element"
      },
      "telecom": {
        "description": "The contact details for the individual (if a name was provided) or the organization.",
        "items": {
          "$ref": "#/definitions/ContactPoint"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal41.errors = null;
  refVal[41] = refVal41;
  var refVal42 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'type' || key0 == '_type' || key0 == 'name' || key0 == '_name' || key0 == 'contact');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.type === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.type.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.type, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/properties/type/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._type === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.name;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.name',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.name',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._name === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.contact;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (Array.isArray(data1)) {
                          var errs__1 = errors;
                          var valid1;
                          for (var i1 = 0; i1 < data1.length; i1++) {
                            var errs_2 = errors;
                            if (!refVal[41](data1[i1], (dataPath || '') + '.contact[' + i1 + ']', data1, i1, rootData)) {
                              if (vErrors === null) vErrors = refVal[41].errors;
                              else vErrors = vErrors.concat(refVal[41].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                            if (!valid2) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.contact',
                            schemaPath: '#/properties/contact/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid1 = errors === errs_1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal42.schema = {
    "description": "A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of contributor.",
        "enum": ["author", "editor", "reviewer", "endorser"]
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "name": {
        "description": "The name of the individual or organization responsible for the contribution.",
        "$ref": "#/definitions/string"
      },
      "_name": {
        "description": "Extensions for name",
        "$ref": "#/definitions/Element"
      },
      "contact": {
        "description": "Contact details to assist a user in finding and communicating with the contributor.",
        "items": {
          "$ref": "#/definitions/ContactDetail"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal42.errors = null;
  refVal[42] = refVal42;
  var refVal43 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.type;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.type',
                      schemaPath: '#/definitions/code/pattern',
                      params: {
                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                      },
                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/definitions/code/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._type === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.profile;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (Array.isArray(data1)) {
                      var errs__1 = errors;
                      var valid1;
                      for (var i1 = 0; i1 < data1.length; i1++) {
                        var data2 = data1[i1];
                        var errs_2 = errors;
                        var errs_3 = errors;
                        if (typeof data2 === "string") {
                          if (!pattern2.test(data2)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.profile[' + i1 + ']',
                              schemaPath: '#/definitions/canonical/pattern',
                              params: {
                                pattern: '^\\S*$'
                              },
                              message: 'should match pattern "^\\S*$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.profile[' + i1 + ']',
                            schemaPath: '#/definitions/canonical/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid3 = errors === errs_3;
                        var valid2 = errors === errs_2;
                        if (!valid2) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.profile',
                        schemaPath: '#/properties/profile/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.subjectCodeableConcept === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[17](data.subjectCodeableConcept, (dataPath || '') + '.subjectCodeableConcept', data, 'subjectCodeableConcept', rootData)) {
                        if (vErrors === null) vErrors = refVal[17].errors;
                        else vErrors = vErrors.concat(refVal[17].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.subjectReference === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[15](data.subjectReference, (dataPath || '') + '.subjectReference', data, 'subjectReference', rootData)) {
                          if (vErrors === null) vErrors = refVal[15].errors;
                          else vErrors = vErrors.concat(refVal[15].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.mustSupport;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (Array.isArray(data1)) {
                            var errs__1 = errors;
                            var valid1;
                            for (var i1 = 0; i1 < data1.length; i1++) {
                              var data2 = data1[i1];
                              var errs_2 = errors;
                              var errs_3 = errors;
                              if (typeof data2 === "string") {
                                if (!pattern1.test(data2)) {
                                  validate.errors = [{
                                    keyword: 'pattern',
                                    dataPath: (dataPath || '') + '.mustSupport[' + i1 + ']',
                                    schemaPath: '#/definitions/string/pattern',
                                    params: {
                                      pattern: '^[ \\r\\n\\t\\S]+$'
                                    },
                                    message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                  }];
                                  return false;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.mustSupport[' + i1 + ']',
                                  schemaPath: '#/definitions/string/type',
                                  params: {
                                    type: 'string'
                                  },
                                  message: 'should be string'
                                }];
                                return false;
                              }
                              var valid3 = errors === errs_3;
                              var valid2 = errors === errs_2;
                              if (!valid2) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.mustSupport',
                              schemaPath: '#/properties/mustSupport/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data._mustSupport;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (Array.isArray(data1)) {
                              var errs__1 = errors;
                              var valid1;
                              for (var i1 = 0; i1 < data1.length; i1++) {
                                var errs_2 = errors;
                                if (!refVal[7](data1[i1], (dataPath || '') + '._mustSupport[' + i1 + ']', data1, i1, rootData)) {
                                  if (vErrors === null) vErrors = refVal[7].errors;
                                  else vErrors = vErrors.concat(refVal[7].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                                if (!valid2) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '._mustSupport',
                                schemaPath: '#/properties/_mustSupport/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data.codeFilter;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal45(data1[i1], (dataPath || '') + '.codeFilter[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal45.errors;
                                    else vErrors = vErrors.concat(refVal45.errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.codeFilter',
                                  schemaPath: '#/properties/codeFilter/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.dateFilter;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__1 = errors;
                                  var valid1;
                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                    var errs_2 = errors;
                                    if (!refVal46(data1[i1], (dataPath || '') + '.dateFilter[' + i1 + ']', data1, i1, rootData)) {
                                      if (vErrors === null) vErrors = refVal46.errors;
                                      else vErrors = vErrors.concat(refVal46.errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                    if (!valid2) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.dateFilter',
                                    schemaPath: '#/properties/dateFilter/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                var data1 = data.limit;
                                if (data1 === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  var errs_2 = errors;
                                  if (typeof data1 !== "number") {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.limit',
                                      schemaPath: '#/definitions/positiveInt/type',
                                      params: {
                                        type: 'number'
                                      },
                                      message: 'should be number'
                                    }];
                                    return false;
                                  }
                                  if (typeof data1 === "string") {
                                    if (!pattern12.test(data1)) {
                                      validate.errors = [{
                                        keyword: 'pattern',
                                        dataPath: (dataPath || '') + '.limit',
                                        schemaPath: '#/definitions/positiveInt/pattern',
                                        params: {
                                          pattern: '^[1-9][0-9]*$'
                                        },
                                        message: 'should match pattern "^[1-9][0-9]*$"'
                                      }];
                                      return false;
                                    }
                                  }
                                  var valid2 = errors === errs_2;
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data._limit === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (!refVal[7](data._limit, (dataPath || '') + '._limit', data, '_limit', rootData)) {
                                      if (vErrors === null) vErrors = refVal[7].errors;
                                      else vErrors = vErrors.concat(refVal[7].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    var data1 = data.sort;
                                    if (data1 === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (Array.isArray(data1)) {
                                        var errs__1 = errors;
                                        var valid1;
                                        for (var i1 = 0; i1 < data1.length; i1++) {
                                          var errs_2 = errors;
                                          if (!refVal47(data1[i1], (dataPath || '') + '.sort[' + i1 + ']', data1, i1, rootData)) {
                                            if (vErrors === null) vErrors = refVal47.errors;
                                            else vErrors = vErrors.concat(refVal47.errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                          if (!valid2) break;
                                        }
                                      } else {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.sort',
                                          schemaPath: '#/properties/sort/type',
                                          params: {
                                            type: 'array'
                                          },
                                          message: 'should be array'
                                        }];
                                        return false;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal43.schema = {
    "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
        "$ref": "#/definitions/code"
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "profile": {
        "description": "The profile of the required data, specified as the uri of the profile definition.",
        "items": {
          "$ref": "#/definitions/canonical"
        },
        "type": "array"
      },
      "subjectCodeableConcept": {
        "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "subjectReference": {
        "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
        "$ref": "#/definitions/Reference"
      },
      "mustSupport": {
        "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
        "items": {
          "$ref": "#/definitions/string"
        },
        "type": "array"
      },
      "_mustSupport": {
        "description": "Extensions for mustSupport",
        "items": {
          "$ref": "#/definitions/Element"
        },
        "type": "array"
      },
      "codeFilter": {
        "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
        "items": {
          "$ref": "#/definitions/DataRequirement_CodeFilter"
        },
        "type": "array"
      },
      "dateFilter": {
        "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
        "items": {
          "$ref": "#/definitions/DataRequirement_DateFilter"
        },
        "type": "array"
      },
      "limit": {
        "description": "Specifies a maximum number of results that are required (uses the _count search parameter).",
        "$ref": "#/definitions/positiveInt"
      },
      "_limit": {
        "description": "Extensions for limit",
        "$ref": "#/definitions/Element"
      },
      "sort": {
        "description": "Specifies the order of the results to be returned.",
        "items": {
          "$ref": "#/definitions/DataRequirement_Sort"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal43.errors = null;
  refVal[43] = refVal43;
  var refVal44 = {
    "pattern": "^\\S*$",
    "type": "string",
    "description": "A URI that is a reference to a canonical URL on a FHIR resource"
  };
  refVal[44] = refVal44;
  var refVal45 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.path;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.path',
                        schemaPath: '#/definitions/string/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.path',
                      schemaPath: '#/definitions/string/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._path === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.searchParam;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern1.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.searchParam',
                            schemaPath: '#/definitions/string/pattern',
                            params: {
                              pattern: '^[ \\r\\n\\t\\S]+$'
                            },
                            message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.searchParam',
                          schemaPath: '#/definitions/string/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._searchParam === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._searchParam, (dataPath || '') + '._searchParam', data, '_searchParam', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.valueSet;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          var errs_2 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern2.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.valueSet',
                                schemaPath: '#/definitions/canonical/pattern',
                                params: {
                                  pattern: '^\\S*$'
                                },
                                message: 'should match pattern "^\\S*$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.valueSet',
                              schemaPath: '#/definitions/canonical/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.code;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (Array.isArray(data1)) {
                              var errs__1 = errors;
                              var valid1;
                              for (var i1 = 0; i1 < data1.length; i1++) {
                                var errs_2 = errors;
                                if (!refVal[18](data1[i1], (dataPath || '') + '.code[' + i1 + ']', data1, i1, rootData)) {
                                  if (vErrors === null) vErrors = refVal[18].errors;
                                  else vErrors = vErrors.concat(refVal[18].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                                if (!valid2) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.code',
                                schemaPath: '#/properties/code/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal45.schema = {
    "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "path": {
        "description": "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
        "$ref": "#/definitions/string"
      },
      "_path": {
        "description": "Extensions for path",
        "$ref": "#/definitions/Element"
      },
      "searchParam": {
        "description": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
        "$ref": "#/definitions/string"
      },
      "_searchParam": {
        "description": "Extensions for searchParam",
        "$ref": "#/definitions/Element"
      },
      "valueSet": {
        "description": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
        "$ref": "#/definitions/canonical"
      },
      "code": {
        "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
        "items": {
          "$ref": "#/definitions/Coding"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal45.errors = null;
  refVal[45] = refVal45;
  var refVal46 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.path;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.path',
                        schemaPath: '#/definitions/string/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.path',
                      schemaPath: '#/definitions/string/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._path === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.searchParam;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern1.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.searchParam',
                            schemaPath: '#/definitions/string/pattern',
                            params: {
                              pattern: '^[ \\r\\n\\t\\S]+$'
                            },
                            message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.searchParam',
                          schemaPath: '#/definitions/string/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._searchParam === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._searchParam, (dataPath || '') + '._searchParam', data, '_searchParam', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.valueDateTime;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern7.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.valueDateTime',
                                schemaPath: '#/properties/valueDateTime/pattern',
                                params: {
                                  pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                },
                                message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.valueDateTime',
                              schemaPath: '#/properties/valueDateTime/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._valueDateTime === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data.valuePeriod === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[9](data.valuePeriod, (dataPath || '') + '.valuePeriod', data, 'valuePeriod', rootData)) {
                                if (vErrors === null) vErrors = refVal[9].errors;
                                else vErrors = vErrors.concat(refVal[9].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              if (data.valueDuration === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (!refVal[29](data.valueDuration, (dataPath || '') + '.valueDuration', data, 'valueDuration', rootData)) {
                                  if (vErrors === null) vErrors = refVal[29].errors;
                                  else vErrors = vErrors.concat(refVal[29].errors);
                                  errors = vErrors.length;
                                }
                                var valid1 = errors === errs_1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal46.schema = {
    "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "path": {
        "description": "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
        "$ref": "#/definitions/string"
      },
      "_path": {
        "description": "Extensions for path",
        "$ref": "#/definitions/Element"
      },
      "searchParam": {
        "description": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
        "$ref": "#/definitions/string"
      },
      "_searchParam": {
        "description": "Extensions for searchParam",
        "$ref": "#/definitions/Element"
      },
      "valueDateTime": {
        "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
        "type": "string"
      },
      "_valueDateTime": {
        "description": "Extensions for valueDateTime",
        "$ref": "#/definitions/Element"
      },
      "valuePeriod": {
        "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
        "$ref": "#/definitions/Period"
      },
      "valueDuration": {
        "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
        "$ref": "#/definitions/Duration"
      }
    },
    "additionalProperties": false
  };
  refVal46.errors = null;
  refVal[46] = refVal46;
  var refVal47 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'modifierExtension' || key0 == 'path' || key0 == '_path' || key0 == 'direction' || key0 == '_direction');
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.path;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.path',
                        schemaPath: '#/definitions/string/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.path',
                      schemaPath: '#/definitions/string/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._path === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.direction === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var schema1 = validate.schema.properties.direction.enum;
                      var valid1;
                      valid1 = false;
                      for (var i1 = 0; i1 < schema1.length; i1++)
                        if (equal(data.direction, schema1[i1])) {
                          valid1 = true;
                          break;
                        } if (!valid1) {
                        validate.errors = [{
                          keyword: 'enum',
                          dataPath: (dataPath || '') + '.direction',
                          schemaPath: '#/properties/direction/enum',
                          params: {
                            allowedValues: schema1
                          },
                          message: 'should be equal to one of the allowed values'
                        }];
                        return false;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._direction === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._direction, (dataPath || '') + '._direction', data, '_direction', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal47.schema = {
    "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "path": {
        "description": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
        "$ref": "#/definitions/string"
      },
      "_path": {
        "description": "Extensions for path",
        "$ref": "#/definitions/Element"
      },
      "direction": {
        "description": "The direction of the sort, ascending or descending.",
        "enum": ["ascending", "descending"]
      },
      "_direction": {
        "description": "Extensions for direction",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal47.errors = null;
  refVal[47] = refVal47;
  var refVal48 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.description;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern1.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.description',
                      schemaPath: '#/definitions/string/pattern',
                      params: {
                        pattern: '^[ \\r\\n\\t\\S]+$'
                      },
                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.description',
                    schemaPath: '#/definitions/string/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._description === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._description, (dataPath || '') + '._description', data, '_description', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.name;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern0.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.name',
                          schemaPath: '#/definitions/id/pattern',
                          params: {
                            pattern: '^[A-Za-z0-9\\-\\.]{1,64}$'
                          },
                          message: 'should match pattern "^[A-Za-z0-9\\-\\.]{1,64}$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.name',
                        schemaPath: '#/definitions/id/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._name === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.language === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var schema1 = validate.schema.properties.language.enum;
                        var valid1;
                        valid1 = false;
                        for (var i1 = 0; i1 < schema1.length; i1++)
                          if (equal(data.language, schema1[i1])) {
                            valid1 = true;
                            break;
                          } if (!valid1) {
                          validate.errors = [{
                            keyword: 'enum',
                            dataPath: (dataPath || '') + '.language',
                            schemaPath: '#/properties/language/enum',
                            params: {
                              allowedValues: schema1
                            },
                            message: 'should be equal to one of the allowed values'
                          }];
                          return false;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._language === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._language, (dataPath || '') + '._language', data, '_language', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.expression;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.expression',
                                  schemaPath: '#/definitions/string/pattern',
                                  params: {
                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                  },
                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.expression',
                                schemaPath: '#/definitions/string/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._expression === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._expression, (dataPath || '') + '._expression', data, '_expression', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.reference;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern2.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.reference',
                                      schemaPath: '#/definitions/uri/pattern',
                                      params: {
                                        pattern: '^\\S*$'
                                      },
                                      message: 'should match pattern "^\\S*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.reference',
                                    schemaPath: '#/definitions/uri/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._reference === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._reference, (dataPath || '') + '._reference', data, '_reference', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal48.schema = {
    "description": "A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "description": {
        "description": "A brief, natural language description of the condition that effectively communicates the intended semantics.",
        "$ref": "#/definitions/string"
      },
      "_description": {
        "description": "Extensions for description",
        "$ref": "#/definitions/Element"
      },
      "name": {
        "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
        "$ref": "#/definitions/id"
      },
      "_name": {
        "description": "Extensions for name",
        "$ref": "#/definitions/Element"
      },
      "language": {
        "description": "The media type of the language for the expression.",
        "enum": ["text/cql", "text/fhirpath", "application/x-fhir-query"]
      },
      "_language": {
        "description": "Extensions for language",
        "$ref": "#/definitions/Element"
      },
      "expression": {
        "description": "An expression in the specified language that returns a value.",
        "$ref": "#/definitions/string"
      },
      "_expression": {
        "description": "Extensions for expression",
        "$ref": "#/definitions/Element"
      },
      "reference": {
        "description": "A URI that defines where the expression is found.",
        "$ref": "#/definitions/uri"
      },
      "_reference": {
        "description": "Extensions for reference",
        "$ref": "#/definitions/Element"
      }
    },
    "additionalProperties": false
  };
  refVal48.errors = null;
  refVal[48] = refVal48;
  var refVal49 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.name;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.name',
                      schemaPath: '#/definitions/code/pattern',
                      params: {
                        pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                      },
                      message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.name',
                    schemaPath: '#/definitions/code/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._name === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.use;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern5.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.use',
                          schemaPath: '#/definitions/code/pattern',
                          params: {
                            pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                          },
                          message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.use',
                        schemaPath: '#/definitions/code/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._use === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.min;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.min',
                            schemaPath: '#/definitions/integer/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern10.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.min',
                              schemaPath: '#/definitions/integer/pattern',
                              params: {
                                pattern: '^-?([0]|([1-9][0-9]*))$'
                              },
                              message: 'should match pattern "^-?([0]|([1-9][0-9]*))$"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._min === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._min, (dataPath || '') + '._min', data, '_min', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.max;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.max',
                                  schemaPath: '#/definitions/string/pattern',
                                  params: {
                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                  },
                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.max',
                                schemaPath: '#/definitions/string/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._max === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._max, (dataPath || '') + '._max', data, '_max', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.documentation;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern1.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.documentation',
                                      schemaPath: '#/definitions/string/pattern',
                                      params: {
                                        pattern: '^[ \\r\\n\\t\\S]+$'
                                      },
                                      message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.documentation',
                                    schemaPath: '#/definitions/string/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._documentation === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._documentation, (dataPath || '') + '._documentation', data, '_documentation', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.type;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    var errs_2 = errors;
                                    if (typeof data1 === "string") {
                                      if (!pattern5.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.type',
                                          schemaPath: '#/definitions/code/pattern',
                                          params: {
                                            pattern: '^[^\\s]+(\\s[^\\s]+)*$'
                                          },
                                          message: 'should match pattern "^[^\\s]+(\\s[^\\s]+)*$"'
                                        }];
                                        return false;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.type',
                                        schemaPath: '#/definitions/code/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data._type === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                                        if (vErrors === null) vErrors = refVal[7].errors;
                                        else vErrors = vErrors.concat(refVal[7].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      var data1 = data.profile;
                                      if (data1 === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern2.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.profile',
                                              schemaPath: '#/definitions/canonical/pattern',
                                              params: {
                                                pattern: '^\\S*$'
                                              },
                                              message: 'should match pattern "^\\S*$"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.profile',
                                            schemaPath: '#/definitions/canonical/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                        var valid1 = errors === errs_1;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal49.schema = {
    "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
        "$ref": "#/definitions/code"
      },
      "_name": {
        "description": "Extensions for name",
        "$ref": "#/definitions/Element"
      },
      "use": {
        "description": "Whether the parameter is input or output for the module.",
        "$ref": "#/definitions/code"
      },
      "_use": {
        "description": "Extensions for use",
        "$ref": "#/definitions/Element"
      },
      "min": {
        "description": "The minimum number of times this parameter SHALL appear in the request or response.",
        "$ref": "#/definitions/integer"
      },
      "_min": {
        "description": "Extensions for min",
        "$ref": "#/definitions/Element"
      },
      "max": {
        "description": "The maximum number of times this element is permitted to appear in the request or response.",
        "$ref": "#/definitions/string"
      },
      "_max": {
        "description": "Extensions for max",
        "$ref": "#/definitions/Element"
      },
      "documentation": {
        "description": "A brief discussion of what the parameter is for and how it is used by the module.",
        "$ref": "#/definitions/string"
      },
      "_documentation": {
        "description": "Extensions for documentation",
        "$ref": "#/definitions/Element"
      },
      "type": {
        "description": "The type of the parameter.",
        "$ref": "#/definitions/code"
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "profile": {
        "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
        "$ref": "#/definitions/canonical"
      }
    },
    "additionalProperties": false
  };
  refVal49.errors = null;
  refVal[49] = refVal49;
  var refVal50 = {
    "pattern": "^-?([0]|([1-9][0-9]*))$",
    "type": "number",
    "description": "A whole number"
  };
  refVal[50] = refVal50;
  var refVal51 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.type === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.type.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.type, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/properties/type/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._type === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.label;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.label',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.label',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._label === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._label, (dataPath || '') + '._label', data, '_label', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      var data1 = data.display;
                      if (data1 === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.display',
                              schemaPath: '#/definitions/string/pattern',
                              params: {
                                pattern: '^[ \\r\\n\\t\\S]+$'
                              },
                              message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.display',
                            schemaPath: '#/definitions/string/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data._display === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[7](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                            if (vErrors === null) vErrors = refVal[7].errors;
                            else vErrors = vErrors.concat(refVal[7].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.citation;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.citation',
                                  schemaPath: '#/definitions/markdown/pattern',
                                  params: {
                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                  },
                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.citation',
                                schemaPath: '#/definitions/markdown/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._citation === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._citation, (dataPath || '') + '._citation', data, '_citation', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.url;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern2.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.url',
                                      schemaPath: '#/definitions/url/pattern',
                                      params: {
                                        pattern: '^\\S*$'
                                      },
                                      message: 'should match pattern "^\\S*$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.url',
                                    schemaPath: '#/definitions/url/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._url === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data.document === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (!refVal[21](data.document, (dataPath || '') + '.document', data, 'document', rootData)) {
                                      if (vErrors === null) vErrors = refVal[21].errors;
                                      else vErrors = vErrors.concat(refVal[21].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    var data1 = data.resource;
                                    if (data1 === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      var errs_2 = errors;
                                      if (typeof data1 === "string") {
                                        if (!pattern2.test(data1)) {
                                          validate.errors = [{
                                            keyword: 'pattern',
                                            dataPath: (dataPath || '') + '.resource',
                                            schemaPath: '#/definitions/canonical/pattern',
                                            params: {
                                              pattern: '^\\S*$'
                                            },
                                            message: 'should match pattern "^\\S*$"'
                                          }];
                                          return false;
                                        }
                                      } else {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.resource',
                                          schemaPath: '#/definitions/canonical/type',
                                          params: {
                                            type: 'string'
                                          },
                                          message: 'should be string'
                                        }];
                                        return false;
                                      }
                                      var valid2 = errors === errs_2;
                                      var valid1 = errors === errs_1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal51.schema = {
    "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of relationship to the related artifact.",
        "enum": ["documentation", "justification", "citation", "predecessor", "successor", "derived-from", "depends-on", "composed-of"]
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "label": {
        "description": "A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.",
        "$ref": "#/definitions/string"
      },
      "_label": {
        "description": "Extensions for label",
        "$ref": "#/definitions/Element"
      },
      "display": {
        "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.",
        "$ref": "#/definitions/string"
      },
      "_display": {
        "description": "Extensions for display",
        "$ref": "#/definitions/Element"
      },
      "citation": {
        "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
        "$ref": "#/definitions/markdown"
      },
      "_citation": {
        "description": "Extensions for citation",
        "$ref": "#/definitions/Element"
      },
      "url": {
        "description": "A url for the artifact that can be followed to access the actual content.",
        "$ref": "#/definitions/url"
      },
      "_url": {
        "description": "Extensions for url",
        "$ref": "#/definitions/Element"
      },
      "document": {
        "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
        "$ref": "#/definitions/Attachment"
      },
      "resource": {
        "description": "The related resource, such as a library, value set, profile, or other knowledge resource.",
        "$ref": "#/definitions/canonical"
      }
    },
    "additionalProperties": false
  };
  refVal51.errors = null;
  refVal[51] = refVal51;
  var refVal52 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.type === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                var schema1 = validate.schema.properties.type.enum;
                var valid1;
                valid1 = false;
                for (var i1 = 0; i1 < schema1.length; i1++)
                  if (equal(data.type, schema1[i1])) {
                    valid1 = true;
                    break;
                  } if (!valid1) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/properties/type/enum',
                    params: {
                      allowedValues: schema1
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data._type === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[7](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                    if (vErrors === null) vErrors = refVal[7].errors;
                    else vErrors = vErrors.concat(refVal[7].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.name;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.name',
                          schemaPath: '#/definitions/string/pattern',
                          params: {
                            pattern: '^[ \\r\\n\\t\\S]+$'
                          },
                          message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.name',
                        schemaPath: '#/definitions/string/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data._name === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[7](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                        if (vErrors === null) vErrors = refVal[7].errors;
                        else vErrors = vErrors.concat(refVal[7].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.timingTiming === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[38](data.timingTiming, (dataPath || '') + '.timingTiming', data, 'timingTiming', rootData)) {
                          if (vErrors === null) vErrors = refVal[38].errors;
                          else vErrors = vErrors.concat(refVal[38].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data.timingReference === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[15](data.timingReference, (dataPath || '') + '.timingReference', data, 'timingReference', rootData)) {
                            if (vErrors === null) vErrors = refVal[15].errors;
                            else vErrors = vErrors.concat(refVal[15].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.timingDate;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern6.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.timingDate',
                                  schemaPath: '#/properties/timingDate/pattern',
                                  params: {
                                    pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$'
                                  },
                                  message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.timingDate',
                                schemaPath: '#/properties/timingDate/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._timingDate === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._timingDate, (dataPath || '') + '._timingDate', data, '_timingDate', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.timingDateTime;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern7.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.timingDateTime',
                                      schemaPath: '#/properties/timingDateTime/pattern',
                                      params: {
                                        pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                      },
                                      message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.timingDateTime',
                                    schemaPath: '#/properties/timingDateTime/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                if (data._timingDateTime === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (!refVal[7](data._timingDateTime, (dataPath || '') + '._timingDateTime', data, '_timingDateTime', rootData)) {
                                    if (vErrors === null) vErrors = refVal[7].errors;
                                    else vErrors = vErrors.concat(refVal[7].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  var data1 = data.data;
                                  if (data1 === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (Array.isArray(data1)) {
                                      var errs__1 = errors;
                                      var valid1;
                                      for (var i1 = 0; i1 < data1.length; i1++) {
                                        var errs_2 = errors;
                                        if (!refVal[43](data1[i1], (dataPath || '') + '.data[' + i1 + ']', data1, i1, rootData)) {
                                          if (vErrors === null) vErrors = refVal[43].errors;
                                          else vErrors = vErrors.concat(refVal[43].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid2 = errors === errs_2;
                                        if (!valid2) break;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.data',
                                        schemaPath: '#/properties/data/type',
                                        params: {
                                          type: 'array'
                                        },
                                        message: 'should be array'
                                      }];
                                      return false;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data.condition === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[48](data.condition, (dataPath || '') + '.condition', data, 'condition', rootData)) {
                                        if (vErrors === null) vErrors = refVal[48].errors;
                                        else vErrors = vErrors.concat(refVal[48].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal52.schema = {
    "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of triggering event.",
        "enum": ["named-event", "periodic", "data-changed", "data-added", "data-modified", "data-removed", "data-accessed", "data-access-ended"]
      },
      "_type": {
        "description": "Extensions for type",
        "$ref": "#/definitions/Element"
      },
      "name": {
        "description": "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.",
        "$ref": "#/definitions/string"
      },
      "_name": {
        "description": "Extensions for name",
        "$ref": "#/definitions/Element"
      },
      "timingTiming": {
        "description": "The timing of the event (if this is a periodic trigger).",
        "$ref": "#/definitions/Timing"
      },
      "timingReference": {
        "description": "The timing of the event (if this is a periodic trigger).",
        "$ref": "#/definitions/Reference"
      },
      "timingDate": {
        "description": "The timing of the event (if this is a periodic trigger).",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
        "type": "string"
      },
      "_timingDate": {
        "description": "Extensions for timingDate",
        "$ref": "#/definitions/Element"
      },
      "timingDateTime": {
        "description": "The timing of the event (if this is a periodic trigger).",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
        "type": "string"
      },
      "_timingDateTime": {
        "description": "Extensions for timingDateTime",
        "$ref": "#/definitions/Element"
      },
      "data": {
        "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
        "items": {
          "$ref": "#/definitions/DataRequirement"
        },
        "type": "array"
      },
      "condition": {
        "description": "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
        "$ref": "#/definitions/Expression"
      }
    },
    "additionalProperties": false
  };
  refVal52.errors = null;
  refVal[52] = refVal52;
  var refVal53 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'code' || key0 == 'valueCodeableConcept' || key0 == 'valueQuantity' || key0 == 'valueRange' || key0 == 'valueReference');
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [{
                keyword: 'additionalProperties',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/additionalProperties',
                params: {
                  additionalProperty: '' + key0 + ''
                },
                message: 'should NOT have additional properties'
              }];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern1.test(data1)) {
                  validate.errors = [{
                    keyword: 'pattern',
                    dataPath: (dataPath || '') + '.id',
                    schemaPath: '#/definitions/string/pattern',
                    params: {
                      pattern: '^[ \\r\\n\\t\\S]+$'
                    },
                    message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                  }];
                  return false;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.extension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.extension',
                    schemaPath: '#/properties/extension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.code === undefined) {
                  valid1 = false;
                  validate.errors = [{
                    keyword: 'required',
                    dataPath: (dataPath || '') + "",
                    schemaPath: '#/required',
                    params: {
                      missingProperty: 'code'
                    },
                    message: 'should have required property \'code\''
                  }];
                  return false;
                } else {
                  var errs_1 = errors;
                  if (!refVal[18](data.code, (dataPath || '') + '.code', data, 'code', rootData)) {
                    if (vErrors === null) vErrors = refVal[18].errors;
                    else vErrors = vErrors.concat(refVal[18].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.valueCodeableConcept === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[17](data.valueCodeableConcept, (dataPath || '') + '.valueCodeableConcept', data, 'valueCodeableConcept', rootData)) {
                      if (vErrors === null) vErrors = refVal[17].errors;
                      else vErrors = vErrors.concat(refVal[17].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.valueQuantity === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[32](data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                        if (vErrors === null) vErrors = refVal[32].errors;
                        else vErrors = vErrors.concat(refVal[32].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.valueRange === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[33](data.valueRange, (dataPath || '') + '.valueRange', data, 'valueRange', rootData)) {
                          if (vErrors === null) vErrors = refVal[33].errors;
                          else vErrors = vErrors.concat(refVal[33].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data.valueReference === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[15](data.valueReference, (dataPath || '') + '.valueReference', data, 'valueReference', rootData)) {
                            if (vErrors === null) vErrors = refVal[15].errors;
                            else vErrors = vErrors.concat(refVal[15].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal53.schema = {
    "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "code": {
        "description": "A code that identifies the type of context being specified by this usage context.",
        "$ref": "#/definitions/Coding"
      },
      "valueCodeableConcept": {
        "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "valueQuantity": {
        "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
        "$ref": "#/definitions/Quantity"
      },
      "valueRange": {
        "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
        "$ref": "#/definitions/Range"
      },
      "valueReference": {
        "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
        "$ref": "#/definitions/Reference"
      }
    },
    "additionalProperties": false,
    "required": ["code"]
  };
  refVal53.errors = null;
  refVal[53] = refVal53;
  var refVal54 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.sequence;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 !== "number") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.sequence',
                      schemaPath: '#/definitions/integer/type',
                      params: {
                        type: 'number'
                      },
                      message: 'should be number'
                    }];
                    return false;
                  }
                  if (typeof data1 === "string") {
                    if (!pattern10.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.sequence',
                        schemaPath: '#/definitions/integer/pattern',
                        params: {
                          pattern: '^-?([0]|([1-9][0-9]*))$'
                        },
                        message: 'should match pattern "^-?([0]|([1-9][0-9]*))$"'
                      }];
                      return false;
                    }
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._sequence === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._sequence, (dataPath || '') + '._sequence', data, '_sequence', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.text;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern1.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.text',
                            schemaPath: '#/definitions/string/pattern',
                            params: {
                              pattern: '^[ \\r\\n\\t\\S]+$'
                            },
                            message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.text',
                          schemaPath: '#/definitions/string/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._text === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.additionalInstruction;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (Array.isArray(data1)) {
                            var errs__1 = errors;
                            var valid1;
                            for (var i1 = 0; i1 < data1.length; i1++) {
                              var errs_2 = errors;
                              if (!refVal[17](data1[i1], (dataPath || '') + '.additionalInstruction[' + i1 + ']', data1, i1, rootData)) {
                                if (vErrors === null) vErrors = refVal[17].errors;
                                else vErrors = vErrors.concat(refVal[17].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                              if (!valid2) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.additionalInstruction',
                              schemaPath: '#/properties/additionalInstruction/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          var data1 = data.patientInstruction;
                          if (data1 === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.patientInstruction',
                                  schemaPath: '#/definitions/string/pattern',
                                  params: {
                                    pattern: '^[ \\r\\n\\t\\S]+$'
                                  },
                                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.patientInstruction',
                                schemaPath: '#/definitions/string/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            if (data._patientInstruction === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (!refVal[7](data._patientInstruction, (dataPath || '') + '._patientInstruction', data, '_patientInstruction', rootData)) {
                                if (vErrors === null) vErrors = refVal[7].errors;
                                else vErrors = vErrors.concat(refVal[7].errors);
                                errors = vErrors.length;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              if (data.timing === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (!refVal[38](data.timing, (dataPath || '') + '.timing', data, 'timing', rootData)) {
                                  if (vErrors === null) vErrors = refVal[38].errors;
                                  else vErrors = vErrors.concat(refVal[38].errors);
                                  errors = vErrors.length;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                var data1 = data.asNeededBoolean;
                                if (data1 === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (typeof data1 !== "boolean") {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.asNeededBoolean',
                                      schemaPath: '#/properties/asNeededBoolean/type',
                                      params: {
                                        type: 'boolean'
                                      },
                                      message: 'should be boolean'
                                    }];
                                    return false;
                                  }
                                  if (typeof data1 === "string") {
                                    if (!pattern4.test(data1)) {
                                      validate.errors = [{
                                        keyword: 'pattern',
                                        dataPath: (dataPath || '') + '.asNeededBoolean',
                                        schemaPath: '#/properties/asNeededBoolean/pattern',
                                        params: {
                                          pattern: '^true|false$'
                                        },
                                        message: 'should match pattern "^true|false$"'
                                      }];
                                      return false;
                                    }
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data._asNeededBoolean === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (!refVal[7](data._asNeededBoolean, (dataPath || '') + '._asNeededBoolean', data, '_asNeededBoolean', rootData)) {
                                      if (vErrors === null) vErrors = refVal[7].errors;
                                      else vErrors = vErrors.concat(refVal[7].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    if (data.asNeededCodeableConcept === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (!refVal[17](data.asNeededCodeableConcept, (dataPath || '') + '.asNeededCodeableConcept', data, 'asNeededCodeableConcept', rootData)) {
                                        if (vErrors === null) vErrors = refVal[17].errors;
                                        else vErrors = vErrors.concat(refVal[17].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      if (data.site === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        if (!refVal[17](data.site, (dataPath || '') + '.site', data, 'site', rootData)) {
                                          if (vErrors === null) vErrors = refVal[17].errors;
                                          else vErrors = vErrors.concat(refVal[17].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        if (data.route === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (!refVal[17](data.route, (dataPath || '') + '.route', data, 'route', rootData)) {
                                            if (vErrors === null) vErrors = refVal[17].errors;
                                            else vErrors = vErrors.concat(refVal[17].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          if (data.method === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            if (!refVal[17](data.method, (dataPath || '') + '.method', data, 'method', rootData)) {
                                              if (vErrors === null) vErrors = refVal[17].errors;
                                              else vErrors = vErrors.concat(refVal[17].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            var data1 = data.doseAndRate;
                                            if (data1 === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (Array.isArray(data1)) {
                                                var errs__1 = errors;
                                                var valid1;
                                                for (var i1 = 0; i1 < data1.length; i1++) {
                                                  var errs_2 = errors;
                                                  if (!refVal55(data1[i1], (dataPath || '') + '.doseAndRate[' + i1 + ']', data1, i1, rootData)) {
                                                    if (vErrors === null) vErrors = refVal55.errors;
                                                    else vErrors = vErrors.concat(refVal55.errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                  if (!valid2) break;
                                                }
                                              } else {
                                                validate.errors = [{
                                                  keyword: 'type',
                                                  dataPath: (dataPath || '') + '.doseAndRate',
                                                  schemaPath: '#/properties/doseAndRate/type',
                                                  params: {
                                                    type: 'array'
                                                  },
                                                  message: 'should be array'
                                                }];
                                                return false;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              if (data.maxDosePerPeriod === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                if (!refVal[34](data.maxDosePerPeriod, (dataPath || '') + '.maxDosePerPeriod', data, 'maxDosePerPeriod', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[34].errors;
                                                  else vErrors = vErrors.concat(refVal[34].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data.maxDosePerAdministration === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[32](data.maxDosePerAdministration, (dataPath || '') + '.maxDosePerAdministration', data, 'maxDosePerAdministration', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[32].errors;
                                                    else vErrors = vErrors.concat(refVal[32].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  if (data.maxDosePerLifetime === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    if (!refVal[32](data.maxDosePerLifetime, (dataPath || '') + '.maxDosePerLifetime', data, 'maxDosePerLifetime', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[32].errors;
                                                      else vErrors = vErrors.concat(refVal[32].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid1 = errors === errs_1;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal54.schema = {
    "description": "Indicates how the medication is/was taken or should be taken by the patient.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "sequence": {
        "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
        "$ref": "#/definitions/integer"
      },
      "_sequence": {
        "description": "Extensions for sequence",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "Free text dosage instructions e.g. SIG.",
        "$ref": "#/definitions/string"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      },
      "additionalInstruction": {
        "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").",
        "items": {
          "$ref": "#/definitions/CodeableConcept"
        },
        "type": "array"
      },
      "patientInstruction": {
        "description": "Instructions in terms that are understood by the patient or consumer.",
        "$ref": "#/definitions/string"
      },
      "_patientInstruction": {
        "description": "Extensions for patientInstruction",
        "$ref": "#/definitions/Element"
      },
      "timing": {
        "description": "When medication should be administered.",
        "$ref": "#/definitions/Timing"
      },
      "asNeededBoolean": {
        "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
        "pattern": "^true|false$",
        "type": "boolean"
      },
      "_asNeededBoolean": {
        "description": "Extensions for asNeededBoolean",
        "$ref": "#/definitions/Element"
      },
      "asNeededCodeableConcept": {
        "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
        "$ref": "#/definitions/CodeableConcept"
      },
      "site": {
        "description": "Body site to administer to.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "route": {
        "description": "How drug should enter body.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "method": {
        "description": "Technique for administering medication.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "doseAndRate": {
        "description": "The amount of medication administered.",
        "items": {
          "$ref": "#/definitions/Dosage_DoseAndRate"
        },
        "type": "array"
      },
      "maxDosePerPeriod": {
        "description": "Upper limit on medication per unit of time.",
        "$ref": "#/definitions/Ratio"
      },
      "maxDosePerAdministration": {
        "description": "Upper limit on medication per administration.",
        "$ref": "#/definitions/Quantity"
      },
      "maxDosePerLifetime": {
        "description": "Upper limit on medication per lifetime of the patient.",
        "$ref": "#/definitions/Quantity"
      }
    },
    "additionalProperties": false
  };
  refVal54.errors = null;
  refVal[54] = refVal54;
  var refVal55 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.type === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (!refVal[17](data.type, (dataPath || '') + '.type', data, 'type', rootData)) {
                    if (vErrors === null) vErrors = refVal[17].errors;
                    else vErrors = vErrors.concat(refVal[17].errors);
                    errors = vErrors.length;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data.doseRange === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[33](data.doseRange, (dataPath || '') + '.doseRange', data, 'doseRange', rootData)) {
                      if (vErrors === null) vErrors = refVal[33].errors;
                      else vErrors = vErrors.concat(refVal[33].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.doseQuantity === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (!refVal[32](data.doseQuantity, (dataPath || '') + '.doseQuantity', data, 'doseQuantity', rootData)) {
                        if (vErrors === null) vErrors = refVal[32].errors;
                        else vErrors = vErrors.concat(refVal[32].errors);
                        errors = vErrors.length;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.rateRatio === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[34](data.rateRatio, (dataPath || '') + '.rateRatio', data, 'rateRatio', rootData)) {
                          if (vErrors === null) vErrors = refVal[34].errors;
                          else vErrors = vErrors.concat(refVal[34].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        if (data.rateRange === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (!refVal[33](data.rateRange, (dataPath || '') + '.rateRange', data, 'rateRange', rootData)) {
                            if (vErrors === null) vErrors = refVal[33].errors;
                            else vErrors = vErrors.concat(refVal[33].errors);
                            errors = vErrors.length;
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data.rateQuantity === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[32](data.rateQuantity, (dataPath || '') + '.rateQuantity', data, 'rateQuantity', rootData)) {
                              if (vErrors === null) vErrors = refVal[32].errors;
                              else vErrors = vErrors.concat(refVal[32].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal55.schema = {
    "description": "Indicates how the medication is/was taken or should be taken by the patient.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "type": {
        "description": "The kind of dose or rate specified, for example, ordered or calculated.",
        "$ref": "#/definitions/CodeableConcept"
      },
      "doseRange": {
        "description": "Amount of medication per dose.",
        "$ref": "#/definitions/Range"
      },
      "doseQuantity": {
        "description": "Amount of medication per dose.",
        "$ref": "#/definitions/Quantity"
      },
      "rateRatio": {
        "description": "Amount of medication per unit of time.",
        "$ref": "#/definitions/Ratio"
      },
      "rateRange": {
        "description": "Amount of medication per unit of time.",
        "$ref": "#/definitions/Range"
      },
      "rateQuantity": {
        "description": "Amount of medication per unit of time.",
        "$ref": "#/definitions/Quantity"
      }
    },
    "additionalProperties": false
  };
  refVal55.errors = null;
  refVal[55] = refVal55;
  var refVal56 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || key0 == 'id' || key0 == 'extension' || key0 == 'status' || key0 == '_status' || key0 == 'div');
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [{
                keyword: 'additionalProperties',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/additionalProperties',
                params: {
                  additionalProperty: '' + key0 + ''
                },
                message: 'should NOT have additional properties'
              }];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern1.test(data1)) {
                  validate.errors = [{
                    keyword: 'pattern',
                    dataPath: (dataPath || '') + '.id',
                    schemaPath: '#/definitions/string/pattern',
                    params: {
                      pattern: '^[ \\r\\n\\t\\S]+$'
                    },
                    message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                  }];
                  return false;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.extension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.extension',
                    schemaPath: '#/properties/extension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                if (data.status === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var schema1 = validate.schema.properties.status.enum;
                  var valid1;
                  valid1 = false;
                  for (var i1 = 0; i1 < schema1.length; i1++)
                    if (equal(data.status, schema1[i1])) {
                      valid1 = true;
                      break;
                    } if (!valid1) {
                    validate.errors = [{
                      keyword: 'enum',
                      dataPath: (dataPath || '') + '.status',
                      schemaPath: '#/properties/status/enum',
                      params: {
                        allowedValues: schema1
                      },
                      message: 'should be equal to one of the allowed values'
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._status === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._status, (dataPath || '') + '._status', data, '_status', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.div === undefined) {
                      valid1 = false;
                      validate.errors = [{
                        keyword: 'required',
                        dataPath: (dataPath || '') + "",
                        schemaPath: '#/required',
                        params: {
                          missingProperty: 'div'
                        },
                        message: 'should have required property \'div\''
                      }];
                      return false;
                    } else {
                      var errs_1 = errors;
                      var valid2 = true;
                      var valid1 = errors === errs_1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal56.schema = {
    "description": "A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
        "enum": ["generated", "extensions", "additional", "empty"]
      },
      "_status": {
        "description": "Extensions for status",
        "$ref": "#/definitions/Element"
      },
      "div": {
        "description": "The actual narrative content, a stripped down version of XHTML.",
        "$ref": "#/definitions/xhtml"
      }
    },
    "additionalProperties": false,
    "required": ["div"]
  };
  refVal56.errors = null;
  refVal[56] = refVal56;
  var refVal57 = {
    "description": "xhtml - escaped html (see specfication)"
  };
  refVal[57] = refVal57;
  var refVal58 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs__0 = errors;
      var prevValid0 = false;
      var valid0 = false;
      var passingSchemas0 = null;
      var errs_1 = errors;
      if (!refVal[1](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[1].errors;
        else vErrors = vErrors.concat(refVal[1].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        valid0 = prevValid0 = true;
        passingSchemas0 = 0;
      }
      if (!valid0) {
        var err = {
          keyword: 'oneOf',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/oneOf',
          params: {
            passingSchemas: passingSchemas0
          },
          message: 'should match exactly one schema in oneOf'
        };
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
        validate.errors = vErrors;
        return false;
      } else {
        errors = errs__0;
        if (vErrors !== null) {
          if (errs__0) vErrors.length = errs__0;
          else vErrors = null;
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal58.schema = {
    "oneOf": [{
      "$ref": "#/definitions/QuestionnaireResponse"
    }]
  };
  refVal58.errors = null;
  refVal[58] = refVal58;
  var refVal59 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.linkId;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern1.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.linkId',
                        schemaPath: '#/definitions/string/pattern',
                        params: {
                          pattern: '^[ \\r\\n\\t\\S]+$'
                        },
                        message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.linkId',
                      schemaPath: '#/definitions/string/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._linkId === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._linkId, (dataPath || '') + '._linkId', data, '_linkId', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.definition;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      var errs_2 = errors;
                      if (typeof data1 === "string") {
                        if (!pattern2.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.definition',
                            schemaPath: '#/definitions/uri/pattern',
                            params: {
                              pattern: '^\\S*$'
                            },
                            message: 'should match pattern "^\\S*$"'
                          }];
                          return false;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.definition',
                          schemaPath: '#/definitions/uri/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._definition === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._definition, (dataPath || '') + '._definition', data, '_definition', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.text;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          var errs_2 = errors;
                          if (typeof data1 === "string") {
                            if (!pattern1.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.text',
                                schemaPath: '#/definitions/string/pattern',
                                params: {
                                  pattern: '^[ \\r\\n\\t\\S]+$'
                                },
                                message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.text',
                              schemaPath: '#/definitions/string/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._text === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data.answer;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (Array.isArray(data1)) {
                                var errs__1 = errors;
                                var valid1;
                                for (var i1 = 0; i1 < data1.length; i1++) {
                                  var errs_2 = errors;
                                  if (!refVal60(data1[i1], (dataPath || '') + '.answer[' + i1 + ']', data1, i1, rootData)) {
                                    if (vErrors === null) vErrors = refVal60.errors;
                                    else vErrors = vErrors.concat(refVal60.errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                  if (!valid2) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.answer',
                                  schemaPath: '#/properties/answer/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              var data1 = data.item;
                              if (data1 === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__1 = errors;
                                  var valid1;
                                  for (var i1 = 0; i1 < data1.length; i1++) {
                                    var errs_2 = errors;
                                    if (!refVal[59](data1[i1], (dataPath || '') + '.item[' + i1 + ']', data1, i1, rootData)) {
                                      if (vErrors === null) vErrors = refVal[59].errors;
                                      else vErrors = vErrors.concat(refVal[59].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                    if (!valid2) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.item',
                                    schemaPath: '#/properties/item/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid1 = errors === errs_1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal59.schema = {
    "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "linkId": {
        "description": "The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.",
        "$ref": "#/definitions/string"
      },
      "_linkId": {
        "description": "Extensions for linkId",
        "$ref": "#/definitions/Element"
      },
      "definition": {
        "description": "A reference to an [[[ElementDefinition]]] that provides the details for the item.",
        "$ref": "#/definitions/uri"
      },
      "_definition": {
        "description": "Extensions for definition",
        "$ref": "#/definitions/Element"
      },
      "text": {
        "description": "Text that is displayed above the contents of the group or as the text of the question being answered.",
        "$ref": "#/definitions/string"
      },
      "_text": {
        "description": "Extensions for text",
        "$ref": "#/definitions/Element"
      },
      "answer": {
        "description": "The respondent's answer(s) to the question.",
        "items": {
          "$ref": "#/definitions/QuestionnaireResponse_Answer"
        },
        "type": "array"
      },
      "item": {
        "description": "Questions or sub-groups nested beneath a question or group.",
        "items": {
          "$ref": "#/definitions/QuestionnaireResponse_Item"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal59.errors = null;
  refVal[59] = refVal59;
  var refVal60 = (function() {
    var pattern0 = new RegExp('^[A-Za-z0-9\\-\\.]{1,64}$');
    var pattern1 = new RegExp('^[ \\r\\n\\t\\S]+$');
    var pattern2 = new RegExp('^\\S*$');
    var pattern3 = new RegExp('^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$');
    var pattern4 = new RegExp('^true|false$');
    var pattern5 = new RegExp('^[^\\s]+(\\s[^\\s]+)*$');
    var pattern6 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$');
    var pattern7 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$');
    var pattern8 = new RegExp('^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$');
    var pattern9 = new RegExp('^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$');
    var pattern10 = new RegExp('^-?([0]|([1-9][0-9]*))$');
    var pattern11 = new RegExp('^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$');
    var pattern12 = new RegExp('^[1-9][0-9]*$');
    var pattern13 = new RegExp('^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$');
    var pattern14 = new RegExp('^[0]|([1-9][0-9]*)$');
    var pattern15 = new RegExp('^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [{
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: {
                additionalProperty: '' + key0 + ''
              },
              message: 'should NOT have additional properties'
            }];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.id;
          if (data1 === undefined) {
            valid1 = true;
          } else {
            var errs_1 = errors;
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.id',
                  schemaPath: '#/definitions/string/pattern',
                  params: {
                    pattern: '^[ \\r\\n\\t\\S]+$'
                  },
                  message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.id',
                schemaPath: '#/definitions/string/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                    if (vErrors === null) vErrors = refVal[5].errors;
                    else vErrors = vErrors.concat(refVal[5].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.modifierExtension;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal[5].errors;
                      else vErrors = vErrors.concat(refVal[5].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.modifierExtension',
                    schemaPath: '#/properties/modifierExtension/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.valueBoolean;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (typeof data1 !== "boolean") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.valueBoolean',
                      schemaPath: '#/properties/valueBoolean/type',
                      params: {
                        type: 'boolean'
                      },
                      message: 'should be boolean'
                    }];
                    return false;
                  }
                  if (typeof data1 === "string") {
                    if (!pattern4.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.valueBoolean',
                        schemaPath: '#/properties/valueBoolean/pattern',
                        params: {
                          pattern: '^true|false$'
                        },
                        message: 'should match pattern "^true|false$"'
                      }];
                      return false;
                    }
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  if (data._valueBoolean === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (!refVal[7](data._valueBoolean, (dataPath || '') + '._valueBoolean', data, '_valueBoolean', rootData)) {
                      if (vErrors === null) vErrors = refVal[7].errors;
                      else vErrors = vErrors.concat(refVal[7].errors);
                      errors = vErrors.length;
                    }
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    var data1 = data.valueDecimal;
                    if (data1 === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (typeof data1 !== "number") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.valueDecimal',
                          schemaPath: '#/properties/valueDecimal/type',
                          params: {
                            type: 'number'
                          },
                          message: 'should be number'
                        }];
                        return false;
                      }
                      if (typeof data1 === "string") {
                        if (!pattern8.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.valueDecimal',
                            schemaPath: '#/properties/valueDecimal/pattern',
                            params: {
                              pattern: '^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$'
                            },
                            message: 'should match pattern "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$"'
                          }];
                          return false;
                        }
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data._valueDecimal === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (!refVal[7](data._valueDecimal, (dataPath || '') + '._valueDecimal', data, '_valueDecimal', rootData)) {
                          if (vErrors === null) vErrors = refVal[7].errors;
                          else vErrors = vErrors.concat(refVal[7].errors);
                          errors = vErrors.length;
                        }
                        var valid1 = errors === errs_1;
                      }
                      if (valid1) {
                        var data1 = data.valueInteger;
                        if (data1 === undefined) {
                          valid1 = true;
                        } else {
                          var errs_1 = errors;
                          if (typeof data1 !== "number") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.valueInteger',
                              schemaPath: '#/properties/valueInteger/type',
                              params: {
                                type: 'number'
                              },
                              message: 'should be number'
                            }];
                            return false;
                          }
                          if (typeof data1 === "string") {
                            if (!pattern10.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.valueInteger',
                                schemaPath: '#/properties/valueInteger/pattern',
                                params: {
                                  pattern: '^-?([0]|([1-9][0-9]*))$'
                                },
                                message: 'should match pattern "^-?([0]|([1-9][0-9]*))$"'
                              }];
                              return false;
                            }
                          }
                          var valid1 = errors === errs_1;
                        }
                        if (valid1) {
                          if (data._valueInteger === undefined) {
                            valid1 = true;
                          } else {
                            var errs_1 = errors;
                            if (!refVal[7](data._valueInteger, (dataPath || '') + '._valueInteger', data, '_valueInteger', rootData)) {
                              if (vErrors === null) vErrors = refVal[7].errors;
                              else vErrors = vErrors.concat(refVal[7].errors);
                              errors = vErrors.length;
                            }
                            var valid1 = errors === errs_1;
                          }
                          if (valid1) {
                            var data1 = data.valueDate;
                            if (data1 === undefined) {
                              valid1 = true;
                            } else {
                              var errs_1 = errors;
                              if (typeof data1 === "string") {
                                if (!pattern6.test(data1)) {
                                  validate.errors = [{
                                    keyword: 'pattern',
                                    dataPath: (dataPath || '') + '.valueDate',
                                    schemaPath: '#/properties/valueDate/pattern',
                                    params: {
                                      pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$'
                                    },
                                    message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$"'
                                  }];
                                  return false;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.valueDate',
                                  schemaPath: '#/properties/valueDate/type',
                                  params: {
                                    type: 'string'
                                  },
                                  message: 'should be string'
                                }];
                                return false;
                              }
                              var valid1 = errors === errs_1;
                            }
                            if (valid1) {
                              if (data._valueDate === undefined) {
                                valid1 = true;
                              } else {
                                var errs_1 = errors;
                                if (!refVal[7](data._valueDate, (dataPath || '') + '._valueDate', data, '_valueDate', rootData)) {
                                  if (vErrors === null) vErrors = refVal[7].errors;
                                  else vErrors = vErrors.concat(refVal[7].errors);
                                  errors = vErrors.length;
                                }
                                var valid1 = errors === errs_1;
                              }
                              if (valid1) {
                                var data1 = data.valueDateTime;
                                if (data1 === undefined) {
                                  valid1 = true;
                                } else {
                                  var errs_1 = errors;
                                  if (typeof data1 === "string") {
                                    if (!pattern7.test(data1)) {
                                      validate.errors = [{
                                        keyword: 'pattern',
                                        dataPath: (dataPath || '') + '.valueDateTime',
                                        schemaPath: '#/properties/valueDateTime/pattern',
                                        params: {
                                          pattern: '^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$'
                                        },
                                        message: 'should match pattern "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$"'
                                      }];
                                      return false;
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.valueDateTime',
                                      schemaPath: '#/properties/valueDateTime/type',
                                      params: {
                                        type: 'string'
                                      },
                                      message: 'should be string'
                                    }];
                                    return false;
                                  }
                                  var valid1 = errors === errs_1;
                                }
                                if (valid1) {
                                  if (data._valueDateTime === undefined) {
                                    valid1 = true;
                                  } else {
                                    var errs_1 = errors;
                                    if (!refVal[7](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                                      if (vErrors === null) vErrors = refVal[7].errors;
                                      else vErrors = vErrors.concat(refVal[7].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid1 = errors === errs_1;
                                  }
                                  if (valid1) {
                                    var data1 = data.valueTime;
                                    if (data1 === undefined) {
                                      valid1 = true;
                                    } else {
                                      var errs_1 = errors;
                                      if (typeof data1 === "string") {
                                        if (!pattern13.test(data1)) {
                                          validate.errors = [{
                                            keyword: 'pattern',
                                            dataPath: (dataPath || '') + '.valueTime',
                                            schemaPath: '#/properties/valueTime/pattern',
                                            params: {
                                              pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$'
                                            },
                                            message: 'should match pattern "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$"'
                                          }];
                                          return false;
                                        }
                                      } else {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.valueTime',
                                          schemaPath: '#/properties/valueTime/type',
                                          params: {
                                            type: 'string'
                                          },
                                          message: 'should be string'
                                        }];
                                        return false;
                                      }
                                      var valid1 = errors === errs_1;
                                    }
                                    if (valid1) {
                                      if (data._valueTime === undefined) {
                                        valid1 = true;
                                      } else {
                                        var errs_1 = errors;
                                        if (!refVal[7](data._valueTime, (dataPath || '') + '._valueTime', data, '_valueTime', rootData)) {
                                          if (vErrors === null) vErrors = refVal[7].errors;
                                          else vErrors = vErrors.concat(refVal[7].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid1 = errors === errs_1;
                                      }
                                      if (valid1) {
                                        var data1 = data.valueString;
                                        if (data1 === undefined) {
                                          valid1 = true;
                                        } else {
                                          var errs_1 = errors;
                                          if (typeof data1 === "string") {
                                            if (!pattern1.test(data1)) {
                                              validate.errors = [{
                                                keyword: 'pattern',
                                                dataPath: (dataPath || '') + '.valueString',
                                                schemaPath: '#/properties/valueString/pattern',
                                                params: {
                                                  pattern: '^[ \\r\\n\\t\\S]+$'
                                                },
                                                message: 'should match pattern "^[ \\r\\n\\t\\S]+$"'
                                              }];
                                              return false;
                                            }
                                          } else {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '.valueString',
                                              schemaPath: '#/properties/valueString/type',
                                              params: {
                                                type: 'string'
                                              },
                                              message: 'should be string'
                                            }];
                                            return false;
                                          }
                                          var valid1 = errors === errs_1;
                                        }
                                        if (valid1) {
                                          if (data._valueString === undefined) {
                                            valid1 = true;
                                          } else {
                                            var errs_1 = errors;
                                            if (!refVal[7](data._valueString, (dataPath || '') + '._valueString', data, '_valueString', rootData)) {
                                              if (vErrors === null) vErrors = refVal[7].errors;
                                              else vErrors = vErrors.concat(refVal[7].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid1 = errors === errs_1;
                                          }
                                          if (valid1) {
                                            var data1 = data.valueUri;
                                            if (data1 === undefined) {
                                              valid1 = true;
                                            } else {
                                              var errs_1 = errors;
                                              if (typeof data1 === "string") {
                                                if (!pattern2.test(data1)) {
                                                  validate.errors = [{
                                                    keyword: 'pattern',
                                                    dataPath: (dataPath || '') + '.valueUri',
                                                    schemaPath: '#/properties/valueUri/pattern',
                                                    params: {
                                                      pattern: '^\\S*$'
                                                    },
                                                    message: 'should match pattern "^\\S*$"'
                                                  }];
                                                  return false;
                                                }
                                              } else {
                                                validate.errors = [{
                                                  keyword: 'type',
                                                  dataPath: (dataPath || '') + '.valueUri',
                                                  schemaPath: '#/properties/valueUri/type',
                                                  params: {
                                                    type: 'string'
                                                  },
                                                  message: 'should be string'
                                                }];
                                                return false;
                                              }
                                              var valid1 = errors === errs_1;
                                            }
                                            if (valid1) {
                                              if (data._valueUri === undefined) {
                                                valid1 = true;
                                              } else {
                                                var errs_1 = errors;
                                                if (!refVal[7](data._valueUri, (dataPath || '') + '._valueUri', data, '_valueUri', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[7].errors;
                                                  else vErrors = vErrors.concat(refVal[7].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid1 = errors === errs_1;
                                              }
                                              if (valid1) {
                                                if (data.valueAttachment === undefined) {
                                                  valid1 = true;
                                                } else {
                                                  var errs_1 = errors;
                                                  if (!refVal[21](data.valueAttachment, (dataPath || '') + '.valueAttachment', data, 'valueAttachment', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[21].errors;
                                                    else vErrors = vErrors.concat(refVal[21].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid1 = errors === errs_1;
                                                }
                                                if (valid1) {
                                                  if (data.valueCoding === undefined) {
                                                    valid1 = true;
                                                  } else {
                                                    var errs_1 = errors;
                                                    if (!refVal[18](data.valueCoding, (dataPath || '') + '.valueCoding', data, 'valueCoding', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[18].errors;
                                                      else vErrors = vErrors.concat(refVal[18].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid1 = errors === errs_1;
                                                  }
                                                  if (valid1) {
                                                    if (data.valueQuantity === undefined) {
                                                      valid1 = true;
                                                    } else {
                                                      var errs_1 = errors;
                                                      if (!refVal[32](data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[32].errors;
                                                        else vErrors = vErrors.concat(refVal[32].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid1 = errors === errs_1;
                                                    }
                                                    if (valid1) {
                                                      if (data.valueReference === undefined) {
                                                        valid1 = true;
                                                      } else {
                                                        var errs_1 = errors;
                                                        if (!refVal[15](data.valueReference, (dataPath || '') + '.valueReference', data, 'valueReference', rootData)) {
                                                          if (vErrors === null) vErrors = refVal[15].errors;
                                                          else vErrors = vErrors.concat(refVal[15].errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid1 = errors === errs_1;
                                                      }
                                                      if (valid1) {
                                                        var data1 = data.item;
                                                        if (data1 === undefined) {
                                                          valid1 = true;
                                                        } else {
                                                          var errs_1 = errors;
                                                          if (Array.isArray(data1)) {
                                                            var errs__1 = errors;
                                                            var valid1;
                                                            for (var i1 = 0; i1 < data1.length; i1++) {
                                                              var errs_2 = errors;
                                                              if (!refVal[59](data1[i1], (dataPath || '') + '.item[' + i1 + ']', data1, i1, rootData)) {
                                                                if (vErrors === null) vErrors = refVal[59].errors;
                                                                else vErrors = vErrors.concat(refVal[59].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                              if (!valid2) break;
                                                            }
                                                          } else {
                                                            validate.errors = [{
                                                              keyword: 'type',
                                                              dataPath: (dataPath || '') + '.item',
                                                              schemaPath: '#/properties/item/type',
                                                              params: {
                                                                type: 'array'
                                                              },
                                                              message: 'should be array'
                                                            }];
                                                            return false;
                                                          }
                                                          var valid1 = errors === errs_1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal60.schema = {
    "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
    "properties": {
      "id": {
        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        "$ref": "#/definitions/string"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "valueBoolean": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^true|false$",
        "type": "boolean"
      },
      "_valueBoolean": {
        "description": "Extensions for valueBoolean",
        "$ref": "#/definitions/Element"
      },
      "valueDecimal": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
        "type": "number"
      },
      "_valueDecimal": {
        "description": "Extensions for valueDecimal",
        "$ref": "#/definitions/Element"
      },
      "valueInteger": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^-?([0]|([1-9][0-9]*))$",
        "type": "number"
      },
      "_valueInteger": {
        "description": "Extensions for valueInteger",
        "$ref": "#/definitions/Element"
      },
      "valueDate": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
        "type": "string"
      },
      "_valueDate": {
        "description": "Extensions for valueDate",
        "$ref": "#/definitions/Element"
      },
      "valueDateTime": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
        "type": "string"
      },
      "_valueDateTime": {
        "description": "Extensions for valueDateTime",
        "$ref": "#/definitions/Element"
      },
      "valueTime": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
        "type": "string"
      },
      "_valueTime": {
        "description": "Extensions for valueTime",
        "$ref": "#/definitions/Element"
      },
      "valueString": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^[ \\r\\n\\t\\S]+$",
        "type": "string"
      },
      "_valueString": {
        "description": "Extensions for valueString",
        "$ref": "#/definitions/Element"
      },
      "valueUri": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "pattern": "^\\S*$",
        "type": "string"
      },
      "_valueUri": {
        "description": "Extensions for valueUri",
        "$ref": "#/definitions/Element"
      },
      "valueAttachment": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "$ref": "#/definitions/Attachment"
      },
      "valueCoding": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "$ref": "#/definitions/Coding"
      },
      "valueQuantity": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "$ref": "#/definitions/Quantity"
      },
      "valueReference": {
        "description": "The answer (or one of the answers) provided by the respondent to the question.",
        "$ref": "#/definitions/Reference"
      },
      "item": {
        "description": "Nested groups and/or questions found within this particular answer.",
        "items": {
          "$ref": "#/definitions/QuestionnaireResponse_Item"
        },
        "type": "array"
      }
    },
    "additionalProperties": false
  };
  refVal60.errors = null;
  refVal[60] = refVal60;
  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
    'use strict';/*# sourceURL=http://hl7.org/fhir/json-schema/4.0 */
    var vErrors = null;
    var errors = 0;
    if (rootData === undefined) rootData = data;
    var errs__0 = errors;
    var prevValid0 = false;
    var valid0 = false;
    var passingSchemas0 = null;
    var errs_1 = errors;
    if (!refVal1(data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
      if (vErrors === null) vErrors = refVal1.errors;
      else vErrors = vErrors.concat(refVal1.errors);
      errors = vErrors.length;
    }
    var valid1 = errors === errs_1;
    if (valid1) {
      valid0 = prevValid0 = true;
      passingSchemas0 = 0;
    }
    if (!valid0) {
      var err = {
        keyword: 'oneOf',
        dataPath: (dataPath || '') + "",
        schemaPath: '#/oneOf',
        params: {
          passingSchemas: passingSchemas0
        },
        message: 'should match exactly one schema in oneOf'
      };
      if (vErrors === null) vErrors = [err];
      else vErrors.push(err);
      errors++;
      validate.errors = vErrors;
      return false;
    } else {
      errors = errs__0;
      if (vErrors !== null) {
        if (errs__0) vErrors.length = errs__0;
        else vErrors = null;
      }
    }
    validate.errors = vErrors;
    return errors === 0;
  };
})();
validate.schema = {
  "$schema": "http://json-schema.org/draft-06/schema#",
  "id": "http://hl7.org/fhir/json-schema/4.0",
  "description": "see http://hl7.org/fhir/json.html#schema for information about the FHIR Json Schemas",
  "discriminator": {
    "propertyName": "resourceType",
    "mapping": {
      "DocumentReference": "#/definitions/QuestionnaireResponse"
    }
  },
  "oneOf": [{
    "$ref": "#/definitions/QuestionnaireResponse"
  }],
  "definitions": {
    "ResourceList": {
      "oneOf": [{
        "$ref": "#/definitions/QuestionnaireResponse"
      }]
    },
    "base64Binary": {
      "type": "string",
      "description": "A stream of bytes"
    },
    "boolean": {
      "pattern": "^true|false$",
      "type": "boolean",
      "description": "Value of \"true\" or \"false\""
    },
    "canonical": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "A URI that is a reference to a canonical URL on a FHIR resource"
    },
    "code": {
      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
      "type": "string",
      "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
    },
    "date": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
      "type": "string",
      "description": "A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates."
    },
    "dateTime": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
      "type": "string",
      "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
    },
    "decimal": {
      "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
      "type": "number",
      "description": "A rational number with implicit precision"
    },
    "id": {
      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
      "type": "string",
      "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
    },
    "instant": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
      "type": "string",
      "description": "An instant in time - known at least to the second"
    },
    "integer": {
      "pattern": "^-?([0]|([1-9][0-9]*))$",
      "type": "number",
      "description": "A whole number"
    },
    "markdown": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "oid": {
      "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
      "type": "string",
      "description": "An OID represented as a URI"
    },
    "positiveInt": {
      "pattern": "^[1-9][0-9]*$",
      "type": "number",
      "description": "An integer with a value that is positive (e.g. >0)"
    },
    "string": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "time": {
      "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
      "type": "string",
      "description": "A time during the day, with no date specified"
    },
    "unsignedInt": {
      "pattern": "^[0]|([1-9][0-9]*)$",
      "type": "number",
      "description": "An integer with a value that is not negative (e.g. >= 0)"
    },
    "uri": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "url": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "A URI that is a literal reference"
    },
    "uuid": {
      "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "type": "string",
      "description": "A UUID, represented as a URI"
    },
    "xhtml": {
      "description": "xhtml - escaped html (see specfication)"
    },
    "Element": {
      "description": "Base definition for all elements in a resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "Extension": {
      "description": "Optional Extension Element - found in all resources.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "url": {
          "description": "Source of the definition for the extension code - a logical name or a URL.",
          "$ref": "#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueCanonical": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueCanonical": {
          "description": "Extensions for valueCanonical",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueUrl": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUrl": {
          "description": "Extensions for valueUrl",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueAddress": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Address"
        },
        "valueAge": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Age"
        },
        "valueAnnotation": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Attachment"
        },
        "valueCodeableConcept": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Coding"
        },
        "valueContactPoint": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueCount": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Count"
        },
        "valueDistance": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Distance"
        },
        "valueDuration": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Duration"
        },
        "valueHumanName": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/HumanName"
        },
        "valueIdentifier": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Identifier"
        },
        "valueMoney": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Money"
        },
        "valuePeriod": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Period"
        },
        "valueQuantity": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Range"
        },
        "valueRatio": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Signature"
        },
        "valueTiming": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Timing"
        },
        "valueContactDetail": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Contributor"
        },
        "valueDataRequirement": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueExpression": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Expression"
        },
        "valueParameterDefinition": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueRelatedArtifact": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueTriggerDefinition": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "valueUsageContext": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDosage": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Dosage"
        },
        "valueMeta": {
          "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "$ref": "#/definitions/Meta"
        }
      },
      "additionalProperties": false
    },
    "Narrative": {
      "description": "A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
          "enum": ["generated", "extensions", "additional", "empty"]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "div": {
          "description": "The actual narrative content, a stripped down version of XHTML.",
          "$ref": "#/definitions/xhtml"
        }
      },
      "additionalProperties": false,
      "required": ["div"]
    },
    "Annotation": {
      "description": "A  text note which also  contains information about who made the statement and when.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "authorReference": {
          "description": "The individual responsible for making the annotation.",
          "$ref": "#/definitions/Reference"
        },
        "authorString": {
          "description": "The individual responsible for making the annotation.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_authorString": {
          "description": "Extensions for authorString",
          "$ref": "#/definitions/Element"
        },
        "time": {
          "description": "Indicates when this particular annotation was made.",
          "$ref": "#/definitions/dateTime"
        },
        "_time": {
          "description": "Extensions for time",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "The text of the annotation in markdown format.",
          "$ref": "#/definitions/markdown"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Attachment": {
      "description": "For referring to data content defined in other formats.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "contentType": {
          "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
          "$ref": "#/definitions/code"
        },
        "_contentType": {
          "description": "Extensions for contentType",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The human language of the content. The value can be any valid value according to BCP 47.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The actual data of the attachment - a sequence of bytes, base64 encoded.",
          "$ref": "#/definitions/base64Binary"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "A location where the data can be accessed.",
          "$ref": "#/definitions/url"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "size": {
          "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
          "$ref": "#/definitions/unsignedInt"
        },
        "_size": {
          "description": "Extensions for size",
          "$ref": "#/definitions/Element"
        },
        "hash": {
          "description": "The calculated hash of the data using SHA-1. Represented using base64.",
          "$ref": "#/definitions/base64Binary"
        },
        "_hash": {
          "description": "Extensions for hash",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A label or set of text to display in place of the data.",
          "$ref": "#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "creation": {
          "description": "The date that the attachment was first created.",
          "$ref": "#/definitions/dateTime"
        },
        "_creation": {
          "description": "Extensions for creation",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Identifier": {
      "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "The purpose of this identifier.",
          "enum": ["usual", "official", "temp", "secondary", "old"]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "system": {
          "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period during which identifier is/was valid for use.",
          "$ref": "#/definitions/Period"
        },
        "assigner": {
          "description": "Organization that issued/manages the identifier.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false
    },
    "CodeableConcept": {
      "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "coding": {
          "description": "A reference to a code defined by a terminology system.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "text": {
          "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Coding": {
      "description": "A reference to a code defined by a terminology system.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "The identification of the code system that defines the meaning of the symbol in the code.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "$ref": "#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A representation of the meaning of the code in the system, following the rules of the system.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "userSelected": {
          "description": "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
          "$ref": "#/definitions/boolean"
        },
        "_userSelected": {
          "description": "Extensions for userSelected",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Quantity": {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Duration": {
      "description": "A length of time.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Distance": {
      "description": "A length - a value with a unit that is a physical distance.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Count": {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Money": {
      "description": "An amount of economic utility in some recognized currency.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "Numerical value (with implicit precision).",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "currency": {
          "description": "ISO 4217 Currency Code.",
          "$ref": "#/definitions/code"
        },
        "_currency": {
          "description": "Extensions for currency",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Age": {
      "description": "A duration of time during which an organism (or a process) has existed.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "$ref": "#/definitions/decimal"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"]
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "$ref": "#/definitions/string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "$ref": "#/definitions/uri"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "$ref": "#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Range": {
      "description": "A set of ordered Quantities defined by a low and high limit.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "low": {
          "description": "The low limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        },
        "high": {
          "description": "The high limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Period": {
      "description": "A time period defined by a start and end date and optionally time.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "start": {
          "description": "The start of the period. The boundary is inclusive.",
          "$ref": "#/definitions/dateTime"
        },
        "_start": {
          "description": "Extensions for start",
          "$ref": "#/definitions/Element"
        },
        "end": {
          "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
          "$ref": "#/definitions/dateTime"
        },
        "_end": {
          "description": "Extensions for end",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Ratio": {
      "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "numerator": {
          "description": "The value of the numerator.",
          "$ref": "#/definitions/Quantity"
        },
        "denominator": {
          "description": "The value of the denominator.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Reference": {
      "description": "A reference from one resource to another.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "reference": {
          "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
          "$ref": "#/definitions/string"
        },
        "_reference": {
          "description": "Extensions for reference",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
          "$ref": "#/definitions/uri"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
          "$ref": "#/definitions/Identifier"
        },
        "display": {
          "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "SampledData": {
      "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "origin": {
          "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
          "$ref": "#/definitions/Quantity"
        },
        "period": {
          "description": "The length of time between sampling times, measured in milliseconds.",
          "$ref": "#/definitions/decimal"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "factor": {
          "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
          "$ref": "#/definitions/decimal"
        },
        "_factor": {
          "description": "Extensions for factor",
          "$ref": "#/definitions/Element"
        },
        "lowerLimit": {
          "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
          "$ref": "#/definitions/decimal"
        },
        "_lowerLimit": {
          "description": "Extensions for lowerLimit",
          "$ref": "#/definitions/Element"
        },
        "upperLimit": {
          "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
          "$ref": "#/definitions/decimal"
        },
        "_upperLimit": {
          "description": "Extensions for upperLimit",
          "$ref": "#/definitions/Element"
        },
        "dimensions": {
          "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
          "$ref": "#/definitions/positiveInt"
        },
        "_dimensions": {
          "description": "Extensions for dimensions",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
          "$ref": "#/definitions/string"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": ["origin"]
    },
    "Signature": {
      "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "when": {
          "description": "When the digital signature was signed.",
          "$ref": "#/definitions/instant"
        },
        "_when": {
          "description": "Extensions for when",
          "$ref": "#/definitions/Element"
        },
        "who": {
          "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
          "$ref": "#/definitions/Reference"
        },
        "onBehalfOf": {
          "description": "A reference to an application-usable description of the identity that is represented by the signature.",
          "$ref": "#/definitions/Reference"
        },
        "targetFormat": {
          "description": "A mime type that indicates the technical format of the target resources signed by the signature.",
          "$ref": "#/definitions/code"
        },
        "_targetFormat": {
          "description": "Extensions for targetFormat",
          "$ref": "#/definitions/Element"
        },
        "sigFormat": {
          "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.",
          "$ref": "#/definitions/code"
        },
        "_sigFormat": {
          "description": "Extensions for sigFormat",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
          "$ref": "#/definitions/base64Binary"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": ["type", "who"]
    },
    "HumanName": {
      "description": "A human's name with the ability to identify parts and usage.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "Identifies the purpose for this name.",
          "enum": ["usual", "official", "temp", "nickname", "anonymous", "old", "maiden"]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "family": {
          "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
          "$ref": "#/definitions/string"
        },
        "_family": {
          "description": "Extensions for family",
          "$ref": "#/definitions/Element"
        },
        "given": {
          "description": "Given name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_given": {
          "description": "Extensions for given",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "prefix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_prefix": {
          "description": "Extensions for prefix",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "suffix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_suffix": {
          "description": "Extensions for suffix",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "period": {
          "description": "Indicates the period of time when this name was valid for the named person.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "Address": {
      "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "use": {
          "description": "The purpose of this address.",
          "enum": ["home", "work", "temp", "old", "billing"]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
          "enum": ["postal", "physical", "both"]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "line": {
          "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_line": {
          "description": "Extensions for line",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "city": {
          "description": "The name of the city, town, suburb, village or other community or delivery center.",
          "$ref": "#/definitions/string"
        },
        "_city": {
          "description": "Extensions for city",
          "$ref": "#/definitions/Element"
        },
        "district": {
          "description": "The name of the administrative area (county).",
          "$ref": "#/definitions/string"
        },
        "_district": {
          "description": "Extensions for district",
          "$ref": "#/definitions/Element"
        },
        "state": {
          "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
          "$ref": "#/definitions/string"
        },
        "_state": {
          "description": "Extensions for state",
          "$ref": "#/definitions/Element"
        },
        "postalCode": {
          "description": "A postal code designating a region defined by the postal service.",
          "$ref": "#/definitions/string"
        },
        "_postalCode": {
          "description": "Extensions for postalCode",
          "$ref": "#/definitions/Element"
        },
        "country": {
          "description": "Country - a nation as commonly understood or generally accepted.",
          "$ref": "#/definitions/string"
        },
        "_country": {
          "description": "Extensions for country",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when address was/is in use.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "ContactPoint": {
      "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "system": {
          "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
          "enum": ["phone", "fax", "email", "pager", "url", "sms", "other"]
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
          "$ref": "#/definitions/string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Identifies the purpose for the contact point.",
          "enum": ["home", "work", "temp", "old", "mobile"]
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "rank": {
          "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
          "$ref": "#/definitions/positiveInt"
        },
        "_rank": {
          "description": "Extensions for rank",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when the contact point was/is in use.",
          "$ref": "#/definitions/Period"
        }
      },
      "additionalProperties": false
    },
    "Timing": {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "event": {
          "description": "Identifies specific times when the event occurs.",
          "items": {
            "$ref": "#/definitions/dateTime"
          },
          "type": "array"
        },
        "_event": {
          "description": "Extensions for event",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "repeat": {
          "description": "A set of rules that describe when the event is scheduled.",
          "$ref": "#/definitions/Timing_Repeat"
        },
        "code": {
          "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "Timing_Repeat": {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "boundsDuration": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Duration"
        },
        "boundsRange": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Range"
        },
        "boundsPeriod": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Period"
        },
        "count": {
          "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
          "$ref": "#/definitions/positiveInt"
        },
        "_count": {
          "description": "Extensions for count",
          "$ref": "#/definitions/Element"
        },
        "countMax": {
          "description": "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
          "$ref": "#/definitions/positiveInt"
        },
        "_countMax": {
          "description": "Extensions for countMax",
          "$ref": "#/definitions/Element"
        },
        "duration": {
          "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
          "$ref": "#/definitions/decimal"
        },
        "_duration": {
          "description": "Extensions for duration",
          "$ref": "#/definitions/Element"
        },
        "durationMax": {
          "description": "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
          "$ref": "#/definitions/decimal"
        },
        "_durationMax": {
          "description": "Extensions for durationMax",
          "$ref": "#/definitions/Element"
        },
        "durationUnit": {
          "description": "The units of time for the duration, in UCUM units.",
          "enum": ["s", "min", "h", "d", "wk", "mo", "a"]
        },
        "_durationUnit": {
          "description": "Extensions for durationUnit",
          "$ref": "#/definitions/Element"
        },
        "frequency": {
          "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
          "$ref": "#/definitions/positiveInt"
        },
        "_frequency": {
          "description": "Extensions for frequency",
          "$ref": "#/definitions/Element"
        },
        "frequencyMax": {
          "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
          "$ref": "#/definitions/positiveInt"
        },
        "_frequencyMax": {
          "description": "Extensions for frequencyMax",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
          "$ref": "#/definitions/decimal"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "periodMax": {
          "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
          "$ref": "#/definitions/decimal"
        },
        "_periodMax": {
          "description": "Extensions for periodMax",
          "$ref": "#/definitions/Element"
        },
        "periodUnit": {
          "description": "The units of time for the period in UCUM units.",
          "enum": ["s", "min", "h", "d", "wk", "mo", "a"]
        },
        "_periodUnit": {
          "description": "Extensions for periodUnit",
          "$ref": "#/definitions/Element"
        },
        "dayOfWeek": {
          "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
          "items": {
            "$ref": "#/definitions/code"
          },
          "type": "array"
        },
        "_dayOfWeek": {
          "description": "Extensions for dayOfWeek",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "timeOfDay": {
          "description": "Specified time of day for action to take place.",
          "items": {
            "$ref": "#/definitions/time"
          },
          "type": "array"
        },
        "_timeOfDay": {
          "description": "Extensions for timeOfDay",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "when": {
          "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
          "items": {
            "enum": ["MORN", "MORN.early", "MORN.late", "NOON", "AFT", "AFT.early", "AFT.late", "EVE", "EVE.early", "EVE.late", "NIGHT", "PHS", "HS", "WAKE", "C", "CM", "CD", "CV", "AC", "ACM", "ACD", "ACV", "PC", "PCM", "PCD", "PCV"]
          },
          "type": "array"
        },
        "_when": {
          "description": "Extensions for when",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "offset": {
          "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_offset": {
          "description": "Extensions for offset",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "Meta": {
      "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "versionId": {
          "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
          "$ref": "#/definitions/id"
        },
        "_versionId": {
          "description": "Extensions for versionId",
          "$ref": "#/definitions/Element"
        },
        "lastUpdated": {
          "description": "When the resource last changed - e.g. when the version changed.",
          "$ref": "#/definitions/instant"
        },
        "_lastUpdated": {
          "description": "Extensions for lastUpdated",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
          "$ref": "#/definitions/uri"
        },
        "_source": {
          "description": "Extensions for source",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "security": {
          "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "tag": {
          "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ContactDetail": {
      "description": "Specifies contact information for a person or organization.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of an individual to contact.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "telecom": {
          "description": "The contact details for the individual (if a name was provided) or the organization.",
          "items": {
            "$ref": "#/definitions/ContactPoint"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "Contributor": {
      "description": "A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of contributor.",
          "enum": ["author", "editor", "reviewer", "endorser"]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "The name of the individual or organization responsible for the contribution.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the contributor.",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "The profile of the required data, specified as the uri of the profile definition.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "subjectCodeableConcept": {
          "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "subjectReference": {
          "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
          "$ref": "#/definitions/Reference"
        },
        "mustSupport": {
          "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "codeFilter": {
          "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
          "items": {
            "$ref": "#/definitions/DataRequirement_CodeFilter"
          },
          "type": "array"
        },
        "dateFilter": {
          "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
          "items": {
            "$ref": "#/definitions/DataRequirement_DateFilter"
          },
          "type": "array"
        },
        "limit": {
          "description": "Specifies a maximum number of results that are required (uses the _count search parameter).",
          "$ref": "#/definitions/positiveInt"
        },
        "_limit": {
          "description": "Extensions for limit",
          "$ref": "#/definitions/Element"
        },
        "sort": {
          "description": "Specifies the order of the results to be returned.",
          "items": {
            "$ref": "#/definitions/DataRequirement_Sort"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_CodeFilter": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "searchParam": {
          "description": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
          "$ref": "#/definitions/string"
        },
        "_searchParam": {
          "description": "Extensions for searchParam",
          "$ref": "#/definitions/Element"
        },
        "valueSet": {
          "description": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
          "$ref": "#/definitions/canonical"
        },
        "code": {
          "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_DateFilter": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "searchParam": {
          "description": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
          "$ref": "#/definitions/string"
        },
        "_searchParam": {
          "description": "Extensions for searchParam",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valuePeriod": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "$ref": "#/definitions/Period"
        },
        "valueDuration": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "$ref": "#/definitions/Duration"
        }
      },
      "additionalProperties": false
    },
    "DataRequirement_Sort": {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "direction": {
          "description": "The direction of the sort, ascending or descending.",
          "enum": ["ascending", "descending"]
        },
        "_direction": {
          "description": "Extensions for direction",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ParameterDefinition": {
      "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
          "$ref": "#/definitions/code"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Whether the parameter is input or output for the module.",
          "$ref": "#/definitions/code"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "The minimum number of times this parameter SHALL appear in the request or response.",
          "$ref": "#/definitions/integer"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the request or response.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "documentation": {
          "description": "A brief discussion of what the parameter is for and how it is used by the module.",
          "$ref": "#/definitions/string"
        },
        "_documentation": {
          "description": "Extensions for documentation",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The type of the parameter.",
          "$ref": "#/definitions/code"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "RelatedArtifact": {
      "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of relationship to the related artifact.",
          "enum": ["documentation", "justification", "citation", "predecessor", "successor", "derived-from", "depends-on", "composed-of"]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "label": {
          "description": "A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.",
          "$ref": "#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "citation": {
          "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
          "$ref": "#/definitions/markdown"
        },
        "_citation": {
          "description": "Extensions for citation",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "A url for the artifact that can be followed to access the actual content.",
          "$ref": "#/definitions/url"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "document": {
          "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
          "$ref": "#/definitions/Attachment"
        },
        "resource": {
          "description": "The related resource, such as a library, value set, profile, or other knowledge resource.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "TriggerDefinition": {
      "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of triggering event.",
          "enum": ["named-event", "periodic", "data-changed", "data-added", "data-modified", "data-removed", "data-accessed", "data-access-ended"]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.",
          "$ref": "#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "timingTiming": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "$ref": "#/definitions/Timing"
        },
        "timingReference": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "$ref": "#/definitions/Reference"
        },
        "timingDate": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_timingDate": {
          "description": "Extensions for timingDate",
          "$ref": "#/definitions/Element"
        },
        "timingDateTime": {
          "description": "The timing of the event (if this is a periodic trigger).",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_timingDateTime": {
          "description": "Extensions for timingDateTime",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
          "items": {
            "$ref": "#/definitions/DataRequirement"
          },
          "type": "array"
        },
        "condition": {
          "description": "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
          "$ref": "#/definitions/Expression"
        }
      },
      "additionalProperties": false
    },
    "UsageContext": {
      "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "A code that identifies the type of context being specified by this usage context.",
          "$ref": "#/definitions/Coding"
        },
        "valueCodeableConcept": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueQuantity": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Range"
        },
        "valueReference": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": ["code"]
    },
    "Dosage": {
      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "sequence": {
          "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
          "$ref": "#/definitions/integer"
        },
        "_sequence": {
          "description": "Extensions for sequence",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Free text dosage instructions e.g. SIG.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "additionalInstruction": {
          "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "patientInstruction": {
          "description": "Instructions in terms that are understood by the patient or consumer.",
          "$ref": "#/definitions/string"
        },
        "_patientInstruction": {
          "description": "Extensions for patientInstruction",
          "$ref": "#/definitions/Element"
        },
        "timing": {
          "description": "When medication should be administered.",
          "$ref": "#/definitions/Timing"
        },
        "asNeededBoolean": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_asNeededBoolean": {
          "description": "Extensions for asNeededBoolean",
          "$ref": "#/definitions/Element"
        },
        "asNeededCodeableConcept": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "site": {
          "description": "Body site to administer to.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "route": {
          "description": "How drug should enter body.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "method": {
          "description": "Technique for administering medication.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "doseAndRate": {
          "description": "The amount of medication administered.",
          "items": {
            "$ref": "#/definitions/Dosage_DoseAndRate"
          },
          "type": "array"
        },
        "maxDosePerPeriod": {
          "description": "Upper limit on medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "maxDosePerAdministration": {
          "description": "Upper limit on medication per administration.",
          "$ref": "#/definitions/Quantity"
        },
        "maxDosePerLifetime": {
          "description": "Upper limit on medication per lifetime of the patient.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Dosage_DoseAndRate": {
      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The kind of dose or rate specified, for example, ordered or calculated.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "doseRange": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Range"
        },
        "doseQuantity": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Quantity"
        },
        "rateRatio": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "rateRange": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Range"
        },
        "rateQuantity": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Population": {
      "description": "A populatioof people with some set of grouping criteria.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "ageRange": {
          "description": "The age of the specific population.",
          "$ref": "#/definitions/Range"
        },
        "ageCodeableConcept": {
          "description": "The age of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "gender": {
          "description": "The gender of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "race": {
          "description": "Race of the specific population.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "physiologicalCondition": {
          "description": "The existing physiological conditions of the specific population to which this applies.",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "ProductShelfLife": {
      "description": "The shelf-life and storage information for a medicinal product item or container can be described using this class.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "Unique identifier for the packaged Medicinal Product.",
          "$ref": "#/definitions/Identifier"
        },
        "type": {
          "description": "This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "period": {
          "description": "The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "specialPrecautionsForStorage": {
          "description": "Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": ["period", "type"]
    },
    "ProdCharacteristic": {
      "description": "The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "height": {
          "description": "Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "width": {
          "description": "Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "depth": {
          "description": "Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "weight": {
          "description": "Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "nominalVolume": {
          "description": "Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "externalDiameter": {
          "description": "Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.",
          "$ref": "#/definitions/Quantity"
        },
        "shape": {
          "description": "Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "$ref": "#/definitions/string"
        },
        "_shape": {
          "description": "Extensions for shape",
          "$ref": "#/definitions/Element"
        },
        "color": {
          "description": "Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_color": {
          "description": "Extensions for color",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "imprint": {
          "description": "Where applicable, the imprint can be specified as text.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_imprint": {
          "description": "Extensions for imprint",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "image": {
          "description": "Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.",
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "scoring": {
          "description": "Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.",
          "$ref": "#/definitions/CodeableConcept"
        }
      },
      "additionalProperties": false
    },
    "MarketingStatus": {
      "description": "The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "country": {
          "description": "The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "jurisdiction": {
          "description": "Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "status": {
          "description": "This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "dateRange": {
          "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.",
          "$ref": "#/definitions/Period"
        },
        "restoreDate": {
          "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.",
          "$ref": "#/definitions/dateTime"
        },
        "_restoreDate": {
          "description": "Extensions for restoreDate",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false,
      "required": ["country", "dateRange", "status"]
    },
    "SubstanceAmount": {
      "description": "Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "amountQuantity": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "$ref": "#/definitions/Quantity"
        },
        "amountRange": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "$ref": "#/definitions/Range"
        },
        "amountString": {
          "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_amountString": {
          "description": "Extensions for amountString",
          "$ref": "#/definitions/Element"
        },
        "amountType": {
          "description": "Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "amountText": {
          "description": "A textual comment on a numeric value.",
          "$ref": "#/definitions/string"
        },
        "_amountText": {
          "description": "Extensions for amountText",
          "$ref": "#/definitions/Element"
        },
        "referenceRange": {
          "description": "Reference range of possible or expected values.",
          "$ref": "#/definitions/SubstanceAmount_ReferenceRange"
        }
      },
      "additionalProperties": false
    },
    "SubstanceAmount_ReferenceRange": {
      "description": "Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "lowLimit": {
          "description": "Lower limit possible or expected.",
          "$ref": "#/definitions/Quantity"
        },
        "highLimit": {
          "description": "Upper limit possible or expected.",
          "$ref": "#/definitions/Quantity"
        }
      },
      "additionalProperties": false
    },
    "Expression": {
      "description": "A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "description": {
          "description": "A brief, natural language description of the condition that effectively communicates the intended semantics.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
          "$ref": "#/definitions/id"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The media type of the language for the expression.",
          "enum": ["text/cql", "text/fhirpath", "application/x-fhir-query"]
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "An expression in the specified language that returns a value.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "reference": {
          "description": "A URI that defines where the expression is found.",
          "$ref": "#/definitions/uri"
        },
        "_reference": {
          "description": "Extensions for reference",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "representation": {
          "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
          "items": {
            "enum": ["xmlAttr", "xmlText", "typeAttr", "cdaText", "xhtml"]
          },
          "type": "array"
        },
        "_representation": {
          "description": "Extensions for representation",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "sliceName": {
          "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
          "$ref": "#/definitions/string"
        },
        "_sliceName": {
          "description": "Extensions for sliceName",
          "$ref": "#/definitions/Element"
        },
        "sliceIsConstraining": {
          "description": "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.",
          "$ref": "#/definitions/boolean"
        },
        "_sliceIsConstraining": {
          "description": "Extensions for sliceIsConstraining",
          "$ref": "#/definitions/Element"
        },
        "label": {
          "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A code that has the same meaning as the element in a particular terminology.",
          "items": {
            "$ref": "#/definitions/Coding"
          },
          "type": "array"
        },
        "slicing": {
          "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
          "$ref": "#/definitions/ElementDefinition_Slicing"
        },
        "short": {
          "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
          "$ref": "#/definitions/string"
        },
        "_short": {
          "description": "Extensions for short",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).",
          "$ref": "#/definitions/markdown"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).",
          "$ref": "#/definitions/markdown"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
          "$ref": "#/definitions/markdown"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "alias": {
          "description": "Identifies additional names by which this element might also be known.",
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        },
        "_alias": {
          "description": "Extensions for alias",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "min": {
          "description": "The minimum number of times this element SHALL appear in the instance.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the instance.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "base": {
          "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.",
          "$ref": "#/definitions/ElementDefinition_Base"
        },
        "contentReference": {
          "description": "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.",
          "$ref": "#/definitions/uri"
        },
        "_contentReference": {
          "description": "Extensions for contentReference",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The data type or resource that the value of this element is permitted to be.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Type"
          },
          "type": "array"
        },
        "defaultValueBase64Binary": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
          "type": "string"
        },
        "_defaultValueBase64Binary": {
          "description": "Extensions for defaultValueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "defaultValueBoolean": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_defaultValueBoolean": {
          "description": "Extensions for defaultValueBoolean",
          "$ref": "#/definitions/Element"
        },
        "defaultValueCanonical": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueCanonical": {
          "description": "Extensions for defaultValueCanonical",
          "$ref": "#/definitions/Element"
        },
        "defaultValueCode": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_defaultValueCode": {
          "description": "Extensions for defaultValueCode",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDate": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_defaultValueDate": {
          "description": "Extensions for defaultValueDate",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDateTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_defaultValueDateTime": {
          "description": "Extensions for defaultValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDecimal": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_defaultValueDecimal": {
          "description": "Extensions for defaultValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "defaultValueId": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_defaultValueId": {
          "description": "Extensions for defaultValueId",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInstant": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_defaultValueInstant": {
          "description": "Extensions for defaultValueInstant",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInteger": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_defaultValueInteger": {
          "description": "Extensions for defaultValueInteger",
          "$ref": "#/definitions/Element"
        },
        "defaultValueMarkdown": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_defaultValueMarkdown": {
          "description": "Extensions for defaultValueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "defaultValueOid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_defaultValueOid": {
          "description": "Extensions for defaultValueOid",
          "$ref": "#/definitions/Element"
        },
        "defaultValuePositiveInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_defaultValuePositiveInt": {
          "description": "Extensions for defaultValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValueString": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_defaultValueString": {
          "description": "Extensions for defaultValueString",
          "$ref": "#/definitions/Element"
        },
        "defaultValueTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_defaultValueTime": {
          "description": "Extensions for defaultValueTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUnsignedInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_defaultValueUnsignedInt": {
          "description": "Extensions for defaultValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUri": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueUri": {
          "description": "Extensions for defaultValueUri",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUrl": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_defaultValueUrl": {
          "description": "Extensions for defaultValueUrl",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUuid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_defaultValueUuid": {
          "description": "Extensions for defaultValueUuid",
          "$ref": "#/definitions/Element"
        },
        "defaultValueAddress": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Address"
        },
        "defaultValueAge": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Age"
        },
        "defaultValueAnnotation": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Annotation"
        },
        "defaultValueAttachment": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Attachment"
        },
        "defaultValueCodeableConcept": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/CodeableConcept"
        },
        "defaultValueCoding": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Coding"
        },
        "defaultValueContactPoint": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ContactPoint"
        },
        "defaultValueCount": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Count"
        },
        "defaultValueDistance": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Distance"
        },
        "defaultValueDuration": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Duration"
        },
        "defaultValueHumanName": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/HumanName"
        },
        "defaultValueIdentifier": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Identifier"
        },
        "defaultValueMoney": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Money"
        },
        "defaultValuePeriod": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Period"
        },
        "defaultValueQuantity": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Quantity"
        },
        "defaultValueRange": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Range"
        },
        "defaultValueRatio": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Ratio"
        },
        "defaultValueReference": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Reference"
        },
        "defaultValueSampledData": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/SampledData"
        },
        "defaultValueSignature": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Signature"
        },
        "defaultValueTiming": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Timing"
        },
        "defaultValueContactDetail": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ContactDetail"
        },
        "defaultValueContributor": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Contributor"
        },
        "defaultValueDataRequirement": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/DataRequirement"
        },
        "defaultValueExpression": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Expression"
        },
        "defaultValueParameterDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "defaultValueRelatedArtifact": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "defaultValueTriggerDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "defaultValueUsageContext": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/UsageContext"
        },
        "defaultValueDosage": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Dosage"
        },
        "defaultValueMeta": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Meta"
        },
        "meaningWhenMissing": {
          "description": "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').",
          "$ref": "#/definitions/markdown"
        },
        "_meaningWhenMissing": {
          "description": "Extensions for meaningWhenMissing",
          "$ref": "#/definitions/Element"
        },
        "orderMeaning": {
          "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
          "$ref": "#/definitions/string"
        },
        "_orderMeaning": {
          "description": "Extensions for orderMeaning",
          "$ref": "#/definitions/Element"
        },
        "fixedBase64Binary": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
          "type": "string"
        },
        "_fixedBase64Binary": {
          "description": "Extensions for fixedBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "fixedBoolean": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_fixedBoolean": {
          "description": "Extensions for fixedBoolean",
          "$ref": "#/definitions/Element"
        },
        "fixedCanonical": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedCanonical": {
          "description": "Extensions for fixedCanonical",
          "$ref": "#/definitions/Element"
        },
        "fixedCode": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_fixedCode": {
          "description": "Extensions for fixedCode",
          "$ref": "#/definitions/Element"
        },
        "fixedDate": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_fixedDate": {
          "description": "Extensions for fixedDate",
          "$ref": "#/definitions/Element"
        },
        "fixedDateTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_fixedDateTime": {
          "description": "Extensions for fixedDateTime",
          "$ref": "#/definitions/Element"
        },
        "fixedDecimal": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_fixedDecimal": {
          "description": "Extensions for fixedDecimal",
          "$ref": "#/definitions/Element"
        },
        "fixedId": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_fixedId": {
          "description": "Extensions for fixedId",
          "$ref": "#/definitions/Element"
        },
        "fixedInstant": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_fixedInstant": {
          "description": "Extensions for fixedInstant",
          "$ref": "#/definitions/Element"
        },
        "fixedInteger": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_fixedInteger": {
          "description": "Extensions for fixedInteger",
          "$ref": "#/definitions/Element"
        },
        "fixedMarkdown": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_fixedMarkdown": {
          "description": "Extensions for fixedMarkdown",
          "$ref": "#/definitions/Element"
        },
        "fixedOid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_fixedOid": {
          "description": "Extensions for fixedOid",
          "$ref": "#/definitions/Element"
        },
        "fixedPositiveInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_fixedPositiveInt": {
          "description": "Extensions for fixedPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "fixedString": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_fixedString": {
          "description": "Extensions for fixedString",
          "$ref": "#/definitions/Element"
        },
        "fixedTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_fixedTime": {
          "description": "Extensions for fixedTime",
          "$ref": "#/definitions/Element"
        },
        "fixedUnsignedInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_fixedUnsignedInt": {
          "description": "Extensions for fixedUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "fixedUri": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedUri": {
          "description": "Extensions for fixedUri",
          "$ref": "#/definitions/Element"
        },
        "fixedUrl": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_fixedUrl": {
          "description": "Extensions for fixedUrl",
          "$ref": "#/definitions/Element"
        },
        "fixedUuid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_fixedUuid": {
          "description": "Extensions for fixedUuid",
          "$ref": "#/definitions/Element"
        },
        "fixedAddress": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Address"
        },
        "fixedAge": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Age"
        },
        "fixedAnnotation": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Annotation"
        },
        "fixedAttachment": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Attachment"
        },
        "fixedCodeableConcept": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "fixedCoding": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Coding"
        },
        "fixedContactPoint": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactPoint"
        },
        "fixedCount": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Count"
        },
        "fixedDistance": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Distance"
        },
        "fixedDuration": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Duration"
        },
        "fixedHumanName": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/HumanName"
        },
        "fixedIdentifier": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Identifier"
        },
        "fixedMoney": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Money"
        },
        "fixedPeriod": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Period"
        },
        "fixedQuantity": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Quantity"
        },
        "fixedRange": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Range"
        },
        "fixedRatio": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Ratio"
        },
        "fixedReference": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Reference"
        },
        "fixedSampledData": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/SampledData"
        },
        "fixedSignature": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Signature"
        },
        "fixedTiming": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Timing"
        },
        "fixedContactDetail": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactDetail"
        },
        "fixedContributor": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Contributor"
        },
        "fixedDataRequirement": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/DataRequirement"
        },
        "fixedExpression": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Expression"
        },
        "fixedParameterDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "fixedRelatedArtifact": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "fixedTriggerDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "fixedUsageContext": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/UsageContext"
        },
        "fixedDosage": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Dosage"
        },
        "fixedMeta": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Meta"
        },
        "patternBase64Binary": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
          "type": "string"
        },
        "_patternBase64Binary": {
          "description": "Extensions for patternBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "patternBoolean": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_patternBoolean": {
          "description": "Extensions for patternBoolean",
          "$ref": "#/definitions/Element"
        },
        "patternCanonical": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternCanonical": {
          "description": "Extensions for patternCanonical",
          "$ref": "#/definitions/Element"
        },
        "patternCode": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_patternCode": {
          "description": "Extensions for patternCode",
          "$ref": "#/definitions/Element"
        },
        "patternDate": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_patternDate": {
          "description": "Extensions for patternDate",
          "$ref": "#/definitions/Element"
        },
        "patternDateTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_patternDateTime": {
          "description": "Extensions for patternDateTime",
          "$ref": "#/definitions/Element"
        },
        "patternDecimal": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_patternDecimal": {
          "description": "Extensions for patternDecimal",
          "$ref": "#/definitions/Element"
        },
        "patternId": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_patternId": {
          "description": "Extensions for patternId",
          "$ref": "#/definitions/Element"
        },
        "patternInstant": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_patternInstant": {
          "description": "Extensions for patternInstant",
          "$ref": "#/definitions/Element"
        },
        "patternInteger": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_patternInteger": {
          "description": "Extensions for patternInteger",
          "$ref": "#/definitions/Element"
        },
        "patternMarkdown": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_patternMarkdown": {
          "description": "Extensions for patternMarkdown",
          "$ref": "#/definitions/Element"
        },
        "patternOid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_patternOid": {
          "description": "Extensions for patternOid",
          "$ref": "#/definitions/Element"
        },
        "patternPositiveInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_patternPositiveInt": {
          "description": "Extensions for patternPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "patternString": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_patternString": {
          "description": "Extensions for patternString",
          "$ref": "#/definitions/Element"
        },
        "patternTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_patternTime": {
          "description": "Extensions for patternTime",
          "$ref": "#/definitions/Element"
        },
        "patternUnsignedInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_patternUnsignedInt": {
          "description": "Extensions for patternUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "patternUri": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternUri": {
          "description": "Extensions for patternUri",
          "$ref": "#/definitions/Element"
        },
        "patternUrl": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_patternUrl": {
          "description": "Extensions for patternUrl",
          "$ref": "#/definitions/Element"
        },
        "patternUuid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_patternUuid": {
          "description": "Extensions for patternUuid",
          "$ref": "#/definitions/Element"
        },
        "patternAddress": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Address"
        },
        "patternAge": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Age"
        },
        "patternAnnotation": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Annotation"
        },
        "patternAttachment": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Attachment"
        },
        "patternCodeableConcept": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "patternCoding": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Coding"
        },
        "patternContactPoint": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ContactPoint"
        },
        "patternCount": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Count"
        },
        "patternDistance": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Distance"
        },
        "patternDuration": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Duration"
        },
        "patternHumanName": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/HumanName"
        },
        "patternIdentifier": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Identifier"
        },
        "patternMoney": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Money"
        },
        "patternPeriod": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Period"
        },
        "patternQuantity": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Quantity"
        },
        "patternRange": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Range"
        },
        "patternRatio": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Ratio"
        },
        "patternReference": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Reference"
        },
        "patternSampledData": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/SampledData"
        },
        "patternSignature": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Signature"
        },
        "patternTiming": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Timing"
        },
        "patternContactDetail": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ContactDetail"
        },
        "patternContributor": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Contributor"
        },
        "patternDataRequirement": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/DataRequirement"
        },
        "patternExpression": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Expression"
        },
        "patternParameterDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "patternRelatedArtifact": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "patternTriggerDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "patternUsageContext": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/UsageContext"
        },
        "patternDosage": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Dosage"
        },
        "patternMeta": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
          "$ref": "#/definitions/Meta"
        },
        "example": {
          "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Example"
          },
          "type": "array"
        },
        "minValueDate": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_minValueDate": {
          "description": "Extensions for minValueDate",
          "$ref": "#/definitions/Element"
        },
        "minValueDateTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_minValueDateTime": {
          "description": "Extensions for minValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "minValueInstant": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_minValueInstant": {
          "description": "Extensions for minValueInstant",
          "$ref": "#/definitions/Element"
        },
        "minValueTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_minValueTime": {
          "description": "Extensions for minValueTime",
          "$ref": "#/definitions/Element"
        },
        "minValueDecimal": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_minValueDecimal": {
          "description": "Extensions for minValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "minValueInteger": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_minValueInteger": {
          "description": "Extensions for minValueInteger",
          "$ref": "#/definitions/Element"
        },
        "minValuePositiveInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_minValuePositiveInt": {
          "description": "Extensions for minValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "minValueUnsignedInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_minValueUnsignedInt": {
          "description": "Extensions for minValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "minValueQuantity": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxValueDate": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_maxValueDate": {
          "description": "Extensions for maxValueDate",
          "$ref": "#/definitions/Element"
        },
        "maxValueDateTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_maxValueDateTime": {
          "description": "Extensions for maxValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueInstant": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_maxValueInstant": {
          "description": "Extensions for maxValueInstant",
          "$ref": "#/definitions/Element"
        },
        "maxValueTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_maxValueTime": {
          "description": "Extensions for maxValueTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueDecimal": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_maxValueDecimal": {
          "description": "Extensions for maxValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "maxValueInteger": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_maxValueInteger": {
          "description": "Extensions for maxValueInteger",
          "$ref": "#/definitions/Element"
        },
        "maxValuePositiveInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_maxValuePositiveInt": {
          "description": "Extensions for maxValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueUnsignedInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_maxValueUnsignedInt": {
          "description": "Extensions for maxValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueQuantity": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxLength": {
          "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
          "$ref": "#/definitions/integer"
        },
        "_maxLength": {
          "description": "Extensions for maxLength",
          "$ref": "#/definitions/Element"
        },
        "condition": {
          "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
          "items": {
            "$ref": "#/definitions/id"
          },
          "type": "array"
        },
        "_condition": {
          "description": "Extensions for condition",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "constraint": {
          "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Constraint"
          },
          "type": "array"
        },
        "mustSupport": {
          "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.",
          "$ref": "#/definitions/boolean"
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "$ref": "#/definitions/Element"
        },
        "isModifier": {
          "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
          "$ref": "#/definitions/boolean"
        },
        "_isModifier": {
          "description": "Extensions for isModifier",
          "$ref": "#/definitions/Element"
        },
        "isModifierReason": {
          "description": "Explains how that element affects the interpretation of the resource or element that contains it.",
          "$ref": "#/definitions/string"
        },
        "_isModifierReason": {
          "description": "Extensions for isModifierReason",
          "$ref": "#/definitions/Element"
        },
        "isSummary": {
          "description": "Whether the element should be included if a client requests a search with the parameter _summary=true.",
          "$ref": "#/definitions/boolean"
        },
        "_isSummary": {
          "description": "Extensions for isSummary",
          "$ref": "#/definitions/Element"
        },
        "binding": {
          "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
          "$ref": "#/definitions/ElementDefinition_Binding"
        },
        "mapping": {
          "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Mapping"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Slicing": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "discriminator": {
          "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Discriminator"
          },
          "type": "array"
        },
        "description": {
          "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "ordered": {
          "description": "If the matching elements have to occur in the same order as defined in the profile.",
          "$ref": "#/definitions/boolean"
        },
        "_ordered": {
          "description": "Extensions for ordered",
          "$ref": "#/definitions/Element"
        },
        "rules": {
          "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
          "enum": ["closed", "open", "openAtEnd"]
        },
        "_rules": {
          "description": "Extensions for rules",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Discriminator": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "How the element value is interpreted when discrimination is evaluated.",
          "enum": ["value", "exists", "pattern", "type", "profile"]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "path": {
          "description": "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Base": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "path": {
          "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
          "$ref": "#/definitions/string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "Minimum cardinality of the base element identified by the path.",
          "$ref": "#/definitions/unsignedInt"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "Maximum cardinality of the base element identified by the path.",
          "$ref": "#/definitions/string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Type": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "$ref": "#/definitions/uri"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "targetProfile": {
          "description": "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
          "items": {
            "$ref": "#/definitions/canonical"
          },
          "type": "array"
        },
        "aggregation": {
          "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
          "items": {
            "enum": ["contained", "referenced", "bundled"]
          },
          "type": "array"
        },
        "_aggregation": {
          "description": "Extensions for aggregation",
          "items": {
            "$ref": "#/definitions/Element"
          },
          "type": "array"
        },
        "versioning": {
          "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
          "enum": ["either", "independent", "specific"]
        },
        "_versioning": {
          "description": "Extensions for versioning",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Example": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "label": {
          "description": "Describes the purpose of this example amoung the set of examples.",
          "$ref": "#/definitions/string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueCanonical": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueCanonical": {
          "description": "Extensions for valueCanonical",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[1-9][0-9]*$",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^[0]|([1-9][0-9]*)$",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueUrl": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUrl": {
          "description": "Extensions for valueUrl",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueAddress": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Address"
        },
        "valueAge": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Age"
        },
        "valueAnnotation": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Attachment"
        },
        "valueCodeableConcept": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Coding"
        },
        "valueContactPoint": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueCount": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Count"
        },
        "valueDistance": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Distance"
        },
        "valueDuration": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Duration"
        },
        "valueHumanName": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/HumanName"
        },
        "valueIdentifier": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Identifier"
        },
        "valueMoney": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Money"
        },
        "valuePeriod": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Period"
        },
        "valueQuantity": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Range"
        },
        "valueRatio": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Signature"
        },
        "valueTiming": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Timing"
        },
        "valueContactDetail": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Contributor"
        },
        "valueDataRequirement": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueExpression": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Expression"
        },
        "valueParameterDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueRelatedArtifact": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueTriggerDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "valueUsageContext": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDosage": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Dosage"
        },
        "valueMeta": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Meta"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Constraint": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "key": {
          "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
          "$ref": "#/definitions/id"
        },
        "_key": {
          "description": "Extensions for key",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "Description of why this constraint is necessary or appropriate.",
          "$ref": "#/definitions/string"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "severity": {
          "description": "Identifies the impact constraint violation has on the conformance of the instance.",
          "enum": ["error", "warning"]
        },
        "_severity": {
          "description": "Extensions for severity",
          "$ref": "#/definitions/Element"
        },
        "human": {
          "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
          "$ref": "#/definitions/string"
        },
        "_human": {
          "description": "Extensions for human",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.",
          "$ref": "#/definitions/string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "xpath": {
          "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
          "$ref": "#/definitions/string"
        },
        "_xpath": {
          "description": "Extensions for xpath",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "A reference to the original source of the constraint, for traceability purposes.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Binding": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "strength": {
          "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
          "enum": ["required", "extensible", "preferred", "example"]
        },
        "_strength": {
          "description": "Extensions for strength",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Describes the intended use of this particular set of codes.",
          "$ref": "#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "valueSet": {
          "description": "Refers to the value set that identifies the set of codes the binding refers to.",
          "$ref": "#/definitions/canonical"
        }
      },
      "additionalProperties": false
    },
    "ElementDefinition_Mapping": {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identity": {
          "description": "An internal reference to the definition of a mapping.",
          "$ref": "#/definitions/id"
        },
        "_identity": {
          "description": "Extensions for identity",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "Identifies the computable language in which mapping.map is expressed.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "map": {
          "description": "Expresses what part of the target specification corresponds to this element.",
          "$ref": "#/definitions/string"
        },
        "_map": {
          "description": "Extensions for map",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Comments that provide information about the mapping or its use.",
          "$ref": "#/definitions/string"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "QuestionnaireResponse": {
      "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
      "properties": {
        "resourceType": {
          "description": "This is a QuestionnaireResponse resource",
          "const": "QuestionnaireResponse"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "$ref": "#/definitions/id"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "items": {
            "$ref": "#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "A business identifier assigned to a particular completed (or partially completed) questionnaire.",
          "$ref": "#/definitions/Identifier"
        },
        "basedOn": {
          "description": "The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "partOf": {
          "description": "A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "type": "array"
        },
        "questionnaire": {
          "description": "The Questionnaire that defines and organizes the questions for which answers are being provided.",
          "$ref": "#/definitions/canonical"
        },
        "status": {
          "description": "The position of the questionnaire response within its overall lifecycle.",
          "enum": ["in-progress", "completed", "amended", "entered-in-error", "stopped"]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "subject": {
          "description": "The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.",
          "$ref": "#/definitions/Reference"
        },
        "encounter": {
          "description": "The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.",
          "$ref": "#/definitions/Reference"
        },
        "authored": {
          "description": "The date and/or time that this set of answers were last changed.",
          "$ref": "#/definitions/dateTime"
        },
        "_authored": {
          "description": "Extensions for authored",
          "$ref": "#/definitions/Element"
        },
        "author": {
          "description": "Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.",
          "$ref": "#/definitions/Reference"
        },
        "source": {
          "description": "The person who answered the questions about the subject.",
          "$ref": "#/definitions/Reference"
        },
        "item": {
          "description": "A group or question item from the original questionnaire for which answers are provided.",
          "items": {
            "$ref": "#/definitions/QuestionnaireResponse_Item"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": ["resourceType"]
    },
    "QuestionnaireResponse_Item": {
      "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "linkId": {
          "description": "The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.",
          "$ref": "#/definitions/string"
        },
        "_linkId": {
          "description": "Extensions for linkId",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "A reference to an [[[ElementDefinition]]] that provides the details for the item.",
          "$ref": "#/definitions/uri"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Text that is displayed above the contents of the group or as the text of the question being answered.",
          "$ref": "#/definitions/string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "answer": {
          "description": "The respondent's answer(s) to the question.",
          "items": {
            "$ref": "#/definitions/QuestionnaireResponse_Answer"
          },
          "type": "array"
        },
        "item": {
          "description": "Questions or sub-groups nested beneath a question or group.",
          "items": {
            "$ref": "#/definitions/QuestionnaireResponse_Item"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "QuestionnaireResponse_Answer": {
      "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "type": "array"
        },
        "valueBoolean": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^-?([0]|([1-9][0-9]*))$",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueAttachment": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "$ref": "#/definitions/Attachment"
        },
        "valueCoding": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "$ref": "#/definitions/Coding"
        },
        "valueQuantity": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "$ref": "#/definitions/Quantity"
        },
        "valueReference": {
          "description": "The answer (or one of the answers) provided by the respondent to the question.",
          "$ref": "#/definitions/Reference"
        },
        "item": {
          "description": "Nested groups and/or questions found within this particular answer.",
          "items": {
            "$ref": "#/definitions/QuestionnaireResponse_Item"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    }
  }
};
validate.errors = null;
export default validate;
