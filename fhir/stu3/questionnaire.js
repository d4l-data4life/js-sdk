import formatsFn from 'ajv/lib/compile/formats';
import equal from 'ajv/lib/compile/equal';

const formats = formatsFn();
var validate = (() => {
  var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
  var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
  var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
  var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
  var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
  var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
  var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
  var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
  var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
  var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
  var pattern10 = new RegExp('[1-9][0-9]*');
  var refVal = [];
  var refVal1 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal2(data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal2.errors;
        else vErrors = vErrors.concat(refVal2.errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          if (true) {
            var errs__1 = errors;
            var valid2 = true;
            var data1 = data.resourceType;
            if (data1 === undefined) {
              valid2 = false;
              validate.errors = [{
                keyword: 'required',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/allOf/1/required',
                params: {
                  missingProperty: 'resourceType'
                },
                message: 'should have required property \'resourceType\''
              }];
              return false;
            } else {
              var errs_2 = errors;
              if (typeof data1 !== "string") {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.resourceType',
                  schemaPath: '#/allOf/1/properties/resourceType/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var schema2 = validate.schema.allOf[1].properties.resourceType.enum;
              var valid2;
              valid2 = false;
              for (var i2 = 0; i2 < schema2.length; i2++)
                if (equal(data1, schema2[i2])) {
                  valid2 = true;
                  break;
                } if (!valid2) {
                validate.errors = [{
                  keyword: 'enum',
                  dataPath: (dataPath || '') + '.resourceType',
                  schemaPath: '#/allOf/1/properties/resourceType/enum',
                  params: {
                    allowedValues: schema2
                  },
                  message: 'should be equal to one of the allowed values'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.url === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.url !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.url',
                    schemaPath: '#/allOf/1/properties/url/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._url === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.identifier;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (!refVal[9](data1[i2], (dataPath || '') + '.identifier[' + i2 + ']', data1, i2, rootData)) {
                          if (vErrors === null) vErrors = refVal[9].errors;
                          else vErrors = vErrors.concat(refVal[9].errors);
                          errors = vErrors.length;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.identifier',
                        schemaPath: '#/allOf/1/properties/identifier/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.version === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data.version !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.version',
                          schemaPath: '#/allOf/1/properties/version/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._version === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._version, (dataPath || '') + '._version', data, '_version', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data.name === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (typeof data.name !== "string") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.name',
                              schemaPath: '#/allOf/1/properties/name/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data._name === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[4](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                              if (vErrors === null) vErrors = refVal[4].errors;
                              else vErrors = vErrors.concat(refVal[4].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data.title === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (typeof data.title !== "string") {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.title',
                                  schemaPath: '#/allOf/1/properties/title/type',
                                  params: {
                                    type: 'string'
                                  },
                                  message: 'should be string'
                                }];
                                return false;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data._title === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (!refVal[4](data._title, (dataPath || '') + '._title', data, '_title', rootData)) {
                                  if (vErrors === null) vErrors = refVal[4].errors;
                                  else vErrors = vErrors.concat(refVal[4].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                var data1 = data.status;
                                if (data1 === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (typeof data1 !== "string") {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.status',
                                      schemaPath: '#/allOf/1/properties/status/type',
                                      params: {
                                        type: 'string'
                                      },
                                      message: 'should be string'
                                    }];
                                    return false;
                                  }
                                  var schema2 = validate.schema.allOf[1].properties.status.enum;
                                  var valid2;
                                  valid2 = false;
                                  for (var i2 = 0; i2 < schema2.length; i2++)
                                    if (equal(data1, schema2[i2])) {
                                      valid2 = true;
                                      break;
                                    } if (!valid2) {
                                    validate.errors = [{
                                      keyword: 'enum',
                                      dataPath: (dataPath || '') + '.status',
                                      schemaPath: '#/allOf/1/properties/status/enum',
                                      params: {
                                        allowedValues: schema2
                                      },
                                      message: 'should be equal to one of the allowed values'
                                    }];
                                    return false;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data._status === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal[4](data._status, (dataPath || '') + '._status', data, '_status', rootData)) {
                                      if (vErrors === null) vErrors = refVal[4].errors;
                                      else vErrors = vErrors.concat(refVal[4].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data.experimental === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (typeof data.experimental !== "boolean") {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.experimental',
                                          schemaPath: '#/allOf/1/properties/experimental/type',
                                          params: {
                                            type: 'boolean'
                                          },
                                          message: 'should be boolean'
                                        }];
                                        return false;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data._experimental === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (!refVal[4](data._experimental, (dataPath || '') + '._experimental', data, '_experimental', rootData)) {
                                          if (vErrors === null) vErrors = refVal[4].errors;
                                          else vErrors = vErrors.concat(refVal[4].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        var data1 = data.date;
                                        if (data1 === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (typeof data1 === "string") {
                                            if (!pattern3.test(data1)) {
                                              validate.errors = [{
                                                keyword: 'pattern',
                                                dataPath: (dataPath || '') + '.date',
                                                schemaPath: '#/allOf/1/properties/date/pattern',
                                                params: {
                                                  pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                },
                                                message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                              }];
                                              return false;
                                            }
                                          } else {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '.date',
                                              schemaPath: '#/allOf/1/properties/date/type',
                                              params: {
                                                type: 'string'
                                              },
                                              message: 'should be string'
                                            }];
                                            return false;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data._date === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (!refVal[4](data._date, (dataPath || '') + '._date', data, '_date', rootData)) {
                                              if (vErrors === null) vErrors = refVal[4].errors;
                                              else vErrors = vErrors.concat(refVal[4].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data.publisher === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (typeof data.publisher !== "string") {
                                                validate.errors = [{
                                                  keyword: 'type',
                                                  dataPath: (dataPath || '') + '.publisher',
                                                  schemaPath: '#/allOf/1/properties/publisher/type',
                                                  params: {
                                                    type: 'string'
                                                  },
                                                  message: 'should be string'
                                                }];
                                                return false;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              if (data._publisher === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (!refVal[4](data._publisher, (dataPath || '') + '._publisher', data, '_publisher', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[4].errors;
                                                  else vErrors = vErrors.concat(refVal[4].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data.description === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (typeof data.description !== "string") {
                                                    validate.errors = [{
                                                      keyword: 'type',
                                                      dataPath: (dataPath || '') + '.description',
                                                      schemaPath: '#/allOf/1/properties/description/type',
                                                      params: {
                                                        type: 'string'
                                                      },
                                                      message: 'should be string'
                                                    }];
                                                    return false;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  if (data._description === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (!refVal[4](data._description, (dataPath || '') + '._description', data, '_description', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[4].errors;
                                                      else vErrors = vErrors.concat(refVal[4].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data.purpose === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (typeof data.purpose !== "string") {
                                                        validate.errors = [{
                                                          keyword: 'type',
                                                          dataPath: (dataPath || '') + '.purpose',
                                                          schemaPath: '#/allOf/1/properties/purpose/type',
                                                          params: {
                                                            type: 'string'
                                                          },
                                                          message: 'should be string'
                                                        }];
                                                        return false;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      if (data._purpose === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (!refVal[4](data._purpose, (dataPath || '') + '._purpose', data, '_purpose', rootData)) {
                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        var data1 = data.approvalDate;
                                                        if (data1 === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (typeof data1 === "string") {
                                                            if (!pattern2.test(data1)) {
                                                              validate.errors = [{
                                                                keyword: 'pattern',
                                                                dataPath: (dataPath || '') + '.approvalDate',
                                                                schemaPath: '#/allOf/1/properties/approvalDate/pattern',
                                                                params: {
                                                                  pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                },
                                                                message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                              }];
                                                              return false;
                                                            }
                                                          } else {
                                                            validate.errors = [{
                                                              keyword: 'type',
                                                              dataPath: (dataPath || '') + '.approvalDate',
                                                              schemaPath: '#/allOf/1/properties/approvalDate/type',
                                                              params: {
                                                                type: 'string'
                                                              },
                                                              message: 'should be string'
                                                            }];
                                                            return false;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          if (data._approvalDate === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (!refVal[4](data._approvalDate, (dataPath || '') + '._approvalDate', data, '_approvalDate', rootData)) {
                                                              if (vErrors === null) vErrors = refVal[4].errors;
                                                              else vErrors = vErrors.concat(refVal[4].errors);
                                                              errors = vErrors.length;
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            var data1 = data.lastReviewDate;
                                                            if (data1 === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (typeof data1 === "string") {
                                                                if (!pattern2.test(data1)) {
                                                                  validate.errors = [{
                                                                    keyword: 'pattern',
                                                                    dataPath: (dataPath || '') + '.lastReviewDate',
                                                                    schemaPath: '#/allOf/1/properties/lastReviewDate/pattern',
                                                                    params: {
                                                                      pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                    },
                                                                    message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                                  }];
                                                                  return false;
                                                                }
                                                              } else {
                                                                validate.errors = [{
                                                                  keyword: 'type',
                                                                  dataPath: (dataPath || '') + '.lastReviewDate',
                                                                  schemaPath: '#/allOf/1/properties/lastReviewDate/type',
                                                                  params: {
                                                                    type: 'string'
                                                                  },
                                                                  message: 'should be string'
                                                                }];
                                                                return false;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              if (data._lastReviewDate === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (!refVal[4](data._lastReviewDate, (dataPath || '') + '._lastReviewDate', data, '_lastReviewDate', rootData)) {
                                                                  if (vErrors === null) vErrors = refVal[4].errors;
                                                                  else vErrors = vErrors.concat(refVal[4].errors);
                                                                  errors = vErrors.length;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                if (data.effectivePeriod === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (!refVal[12](data.effectivePeriod, (dataPath || '') + '.effectivePeriod', data, 'effectivePeriod', rootData)) {
                                                                    if (vErrors === null) vErrors = refVal[12].errors;
                                                                    else vErrors = vErrors.concat(refVal[12].errors);
                                                                    errors = vErrors.length;
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  var data1 = data.useContext;
                                                                  if (data1 === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (Array.isArray(data1)) {
                                                                      var errs__2 = errors;
                                                                      var valid2;
                                                                      for (var i2 = 0; i2 < data1.length; i2++) {
                                                                        var errs_3 = errors;
                                                                        if (!refVal[39](data1[i2], (dataPath || '') + '.useContext[' + i2 + ']', data1, i2, rootData)) {
                                                                          if (vErrors === null) vErrors = refVal[39].errors;
                                                                          else vErrors = vErrors.concat(refVal[39].errors);
                                                                          errors = vErrors.length;
                                                                        }
                                                                        var valid3 = errors === errs_3;
                                                                        if (!valid3) break;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.useContext',
                                                                        schemaPath: '#/allOf/1/properties/useContext/type',
                                                                        params: {
                                                                          type: 'array'
                                                                        },
                                                                        message: 'should be array'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    var data1 = data.jurisdiction;
                                                                    if (data1 === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (Array.isArray(data1)) {
                                                                        var errs__2 = errors;
                                                                        var valid2;
                                                                        for (var i2 = 0; i2 < data1.length; i2++) {
                                                                          var errs_3 = errors;
                                                                          if (!refVal[10](data1[i2], (dataPath || '') + '.jurisdiction[' + i2 + ']', data1, i2, rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[10].errors;
                                                                            else vErrors = vErrors.concat(refVal[10].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid3 = errors === errs_3;
                                                                          if (!valid3) break;
                                                                        }
                                                                      } else {
                                                                        validate.errors = [{
                                                                          keyword: 'type',
                                                                          dataPath: (dataPath || '') + '.jurisdiction',
                                                                          schemaPath: '#/allOf/1/properties/jurisdiction/type',
                                                                          params: {
                                                                            type: 'array'
                                                                          },
                                                                          message: 'should be array'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      var data1 = data.contact;
                                                                      if (data1 === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (Array.isArray(data1)) {
                                                                          var errs__2 = errors;
                                                                          var valid2;
                                                                          for (var i2 = 0; i2 < data1.length; i2++) {
                                                                            var errs_3 = errors;
                                                                            if (!refVal[35](data1[i2], (dataPath || '') + '.contact[' + i2 + ']', data1, i2, rootData)) {
                                                                              if (vErrors === null) vErrors = refVal[35].errors;
                                                                              else vErrors = vErrors.concat(refVal[35].errors);
                                                                              errors = vErrors.length;
                                                                            }
                                                                            var valid3 = errors === errs_3;
                                                                            if (!valid3) break;
                                                                          }
                                                                        } else {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.contact',
                                                                            schemaPath: '#/allOf/1/properties/contact/type',
                                                                            params: {
                                                                              type: 'array'
                                                                            },
                                                                            message: 'should be array'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                      if (valid2) {
                                                                        if (data.copyright === undefined) {
                                                                          valid2 = true;
                                                                        } else {
                                                                          var errs_2 = errors;
                                                                          if (typeof data.copyright !== "string") {
                                                                            validate.errors = [{
                                                                              keyword: 'type',
                                                                              dataPath: (dataPath || '') + '.copyright',
                                                                              schemaPath: '#/allOf/1/properties/copyright/type',
                                                                              params: {
                                                                                type: 'string'
                                                                              },
                                                                              message: 'should be string'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                        }
                                                                        if (valid2) {
                                                                          if (data._copyright === undefined) {
                                                                            valid2 = true;
                                                                          } else {
                                                                            var errs_2 = errors;
                                                                            if (!refVal[4](data._copyright, (dataPath || '') + '._copyright', data, '_copyright', rootData)) {
                                                                              if (vErrors === null) vErrors = refVal[4].errors;
                                                                              else vErrors = vErrors.concat(refVal[4].errors);
                                                                              errors = vErrors.length;
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                          }
                                                                          if (valid2) {
                                                                            var data1 = data.code;
                                                                            if (data1 === undefined) {
                                                                              valid2 = true;
                                                                            } else {
                                                                              var errs_2 = errors;
                                                                              if (Array.isArray(data1)) {
                                                                                var errs__2 = errors;
                                                                                var valid2;
                                                                                for (var i2 = 0; i2 < data1.length; i2++) {
                                                                                  var errs_3 = errors;
                                                                                  if (!refVal[11](data1[i2], (dataPath || '') + '.code[' + i2 + ']', data1, i2, rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[11].errors;
                                                                                    else vErrors = vErrors.concat(refVal[11].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid3 = errors === errs_3;
                                                                                  if (!valid3) break;
                                                                                }
                                                                              } else {
                                                                                validate.errors = [{
                                                                                  keyword: 'type',
                                                                                  dataPath: (dataPath || '') + '.code',
                                                                                  schemaPath: '#/allOf/1/properties/code/type',
                                                                                  params: {
                                                                                    type: 'array'
                                                                                  },
                                                                                  message: 'should be array'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                            }
                                                                            if (valid2) {
                                                                              var data1 = data.subjectType;
                                                                              if (data1 === undefined) {
                                                                                valid2 = true;
                                                                              } else {
                                                                                var errs_2 = errors;
                                                                                if (Array.isArray(data1)) {
                                                                                  var errs__2 = errors;
                                                                                  var valid2;
                                                                                  for (var i2 = 0; i2 < data1.length; i2++) {
                                                                                    var data2 = data1[i2];
                                                                                    var errs_3 = errors;
                                                                                    if (typeof data2 === "string") {
                                                                                      if (!pattern5.test(data2)) {
                                                                                        validate.errors = [{
                                                                                          keyword: 'pattern',
                                                                                          dataPath: (dataPath || '') + '.subjectType[' + i2 + ']',
                                                                                          schemaPath: '#/allOf/1/properties/subjectType/items/pattern',
                                                                                          params: {
                                                                                            pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                                                          },
                                                                                          message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                                                        }];
                                                                                        return false;
                                                                                      }
                                                                                    } else {
                                                                                      validate.errors = [{
                                                                                        keyword: 'type',
                                                                                        dataPath: (dataPath || '') + '.subjectType[' + i2 + ']',
                                                                                        schemaPath: '#/allOf/1/properties/subjectType/items/type',
                                                                                        params: {
                                                                                          type: 'string'
                                                                                        },
                                                                                        message: 'should be string'
                                                                                      }];
                                                                                      return false;
                                                                                    }
                                                                                    var valid3 = errors === errs_3;
                                                                                    if (!valid3) break;
                                                                                  }
                                                                                } else {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.subjectType',
                                                                                    schemaPath: '#/allOf/1/properties/subjectType/type',
                                                                                    params: {
                                                                                      type: 'array'
                                                                                    },
                                                                                    message: 'should be array'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                var valid2 = errors === errs_2;
                                                                              }
                                                                              if (valid2) {
                                                                                var data1 = data._subjectType;
                                                                                if (data1 === undefined) {
                                                                                  valid2 = true;
                                                                                } else {
                                                                                  var errs_2 = errors;
                                                                                  if (Array.isArray(data1)) {
                                                                                    var errs__2 = errors;
                                                                                    var valid2;
                                                                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                                                                      var errs_3 = errors;
                                                                                      if (!refVal[4](data1[i2], (dataPath || '') + '._subjectType[' + i2 + ']', data1, i2, rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid3 = errors === errs_3;
                                                                                      if (!valid3) break;
                                                                                    }
                                                                                  } else {
                                                                                    validate.errors = [{
                                                                                      keyword: 'type',
                                                                                      dataPath: (dataPath || '') + '._subjectType',
                                                                                      schemaPath: '#/allOf/1/properties/_subjectType/type',
                                                                                      params: {
                                                                                        type: 'array'
                                                                                      },
                                                                                      message: 'should be array'
                                                                                    }];
                                                                                    return false;
                                                                                  }
                                                                                  var valid2 = errors === errs_2;
                                                                                }
                                                                                if (valid2) {
                                                                                  var data1 = data.item;
                                                                                  if (data1 === undefined) {
                                                                                    valid2 = true;
                                                                                  } else {
                                                                                    var errs_2 = errors;
                                                                                    if (Array.isArray(data1)) {
                                                                                      var errs__2 = errors;
                                                                                      var valid2;
                                                                                      for (var i2 = 0; i2 < data1.length; i2++) {
                                                                                        var errs_3 = errors;
                                                                                        if (!refVal50(data1[i2], (dataPath || '') + '.item[' + i2 + ']', data1, i2, rootData)) {
                                                                                          if (vErrors === null) vErrors = refVal50.errors;
                                                                                          else vErrors = vErrors.concat(refVal50.errors);
                                                                                          errors = vErrors.length;
                                                                                        }
                                                                                        var valid3 = errors === errs_3;
                                                                                        if (!valid3) break;
                                                                                      }
                                                                                    } else {
                                                                                      validate.errors = [{
                                                                                        keyword: 'type',
                                                                                        dataPath: (dataPath || '') + '.item',
                                                                                        schemaPath: '#/allOf/1/properties/item/type',
                                                                                        params: {
                                                                                          type: 'array'
                                                                                        },
                                                                                        message: 'should be array'
                                                                                      }];
                                                                                      return false;
                                                                                    }
                                                                                    var valid2 = errors === errs_2;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal1.schema = {
    "allOf": [{
      "$ref": "#/definitions/DomainResource"
    }, {
      "description": "A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.",
      "properties": {
        "resourceType": {
          "description": "This is a Questionnaire resource",
          "type": "string",
          "enum": ["Questionnaire"]
        },
        "url": {
          "description": "An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published. The URL SHOULD include the major version of the questionnaire. For more information see [Technical and Business Versions](resource.html#versions).",
          "type": "string"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Identifier"
          }
        },
        "version": {
          "description": "The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "type": "string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "type": "string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the questionnaire.",
          "type": "string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "status": {
          "description": "The status of this questionnaire. Enables tracking the life-cycle of the content.",
          "enum": ["draft", "active", "retired", "unknown"],
          "type": "string"
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "experimental": {
          "description": "A boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
          "type": "boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the questionnaire was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the individual or organization that published the questionnaire.",
          "type": "string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "A free text natural language description of the questionnaire from a consumer's perspective.",
          "type": "string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "purpose": {
          "description": "Explaination of why this questionnaire is needed and why it has been designed as it has.",
          "type": "string"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "#/definitions/Element"
        },
        "approvalDate": {
          "description": "The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
        },
        "_approvalDate": {
          "description": "Extensions for approvalDate",
          "$ref": "#/definitions/Element"
        },
        "lastReviewDate": {
          "description": "The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
        },
        "_lastReviewDate": {
          "description": "Extensions for lastReviewDate",
          "$ref": "#/definitions/Element"
        },
        "effectivePeriod": {
          "description": "The period during which the questionnaire content was or is planned to be in active use.",
          "$ref": "#/definitions/Period"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate questionnaire instances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsageContext"
          }
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the questionnaire is intended to be used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          }
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          }
        },
        "copyright": {
          "description": "A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.",
          "type": "string"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "An identifier for this question or group of questions in a particular terminology such as LOINC.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "subjectType": {
          "description": "The types of subjects that can be the subject of responses created for the questionnaire.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
          }
        },
        "_subjectType": {
          "description": "Extensions for subjectType",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "item": {
          "description": "A particular question, question grouping or display text that is part of the questionnaire.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Questionnaire_Item"
          }
        }
      },
      "required": ["resourceType"]
    }]
  };
  refVal1.errors = null;
  refVal[1] = refVal1;
  var refVal2 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          if (data.resourceType === undefined) {
            valid1 = false;
            validate.errors = [{
              keyword: 'required',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/required',
              params: {
                missingProperty: 'resourceType'
              },
              message: 'should have required property \'resourceType\''
            }];
            return false;
          } else {
            var errs_1 = errors;
            var schema1 = 'Questionnaire';
            var valid1 = equal(data.resourceType, schema1);
            if (!valid1) {
              validate.errors = [{
                keyword: 'const',
                dataPath: (dataPath || '') + '.resourceType',
                schemaPath: '#/properties/resourceType/const',
                params: {
                  allowedValue: schema1
                },
                message: 'should be equal to constant'
              }];
              return false;
            }
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            if (data.text === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (!refVal3(data.text, (dataPath || '') + '.text', data, 'text', rootData)) {
                if (vErrors === null) vErrors = refVal3.errors;
                else vErrors = vErrors.concat(refVal3.errors);
                errors = vErrors.length;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.contained;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (Array.isArray(data1)) {
                  var errs__1 = errors;
                  var valid1;
                  for (var i1 = 0; i1 < data1.length; i1++) {
                    var errs_2 = errors;
                    if (!refVal49(data1[i1], (dataPath || '') + '.contained[' + i1 + ']', data1, i1, rootData)) {
                      if (vErrors === null) vErrors = refVal49.errors;
                      else vErrors = vErrors.concat(refVal49.errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                    if (!valid2) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.contained',
                    schemaPath: '#/properties/contained/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.extension;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (Array.isArray(data1)) {
                    var errs__1 = errors;
                    var valid1;
                    for (var i1 = 0; i1 < data1.length; i1++) {
                      var errs_2 = errors;
                      if (!refVal[5](data1[i1], (dataPath || '') + '.extension[' + i1 + ']', data1, i1, rootData)) {
                        if (vErrors === null) vErrors = refVal[5].errors;
                        else vErrors = vErrors.concat(refVal[5].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                      if (!valid2) break;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.extension',
                      schemaPath: '#/properties/extension/type',
                      params: {
                        type: 'array'
                      },
                      message: 'should be array'
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.modifierExtension;
                  if (data1 === undefined) {
                    valid1 = true;
                  } else {
                    var errs_1 = errors;
                    if (Array.isArray(data1)) {
                      var errs__1 = errors;
                      var valid1;
                      for (var i1 = 0; i1 < data1.length; i1++) {
                        var errs_2 = errors;
                        if (!refVal[5](data1[i1], (dataPath || '') + '.modifierExtension[' + i1 + ']', data1, i1, rootData)) {
                          if (vErrors === null) vErrors = refVal[5].errors;
                          else vErrors = vErrors.concat(refVal[5].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                        if (!valid2) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.modifierExtension',
                        schemaPath: '#/properties/modifierExtension/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid1 = errors === errs_1;
                  }
                }
              }
            }
          }
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal2.schema = {
    "description": "A resource that includes narrative, extensions, and contained resources.",
    "properties": {
      "resourceType": {
        "description": "This is a DomainResource resource",
        "const": "DomainResource"
      },
      "text": {
        "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
        "$ref": "#/definitions/Narrative"
      },
      "contained": {
        "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
        "items": {
          "$ref": "#/definitions/ResourceList"
        },
        "type": "array"
      },
      "extension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "modifierExtension": {
        "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      }
    },
    "additionalProperties": true,
    "required": ["resourceType"]
  };
  refVal2.errors = null;
  refVal[2] = refVal2;
  var refVal3 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal4(data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal4.errors;
        else vErrors = vErrors.concat(refVal4.errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          if (true) {
            var errs__1 = errors;
            var valid2 = true;
            var data1 = data.status;
            if (data1 === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (typeof data1 !== "string") {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.status',
                  schemaPath: '#/allOf/1/properties/status/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var schema2 = validate.schema.allOf[1].properties.status.enum;
              var valid2;
              valid2 = false;
              for (var i2 = 0; i2 < schema2.length; i2++)
                if (equal(data1, schema2[i2])) {
                  valid2 = true;
                  break;
                } if (!valid2) {
                validate.errors = [{
                  keyword: 'enum',
                  dataPath: (dataPath || '') + '.status',
                  schemaPath: '#/allOf/1/properties/status/enum',
                  params: {
                    allowedValues: schema2
                  },
                  message: 'should be equal to one of the allowed values'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data._status === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[4](data._status, (dataPath || '') + '._status', data, '_status', rootData)) {
                  if (vErrors === null) vErrors = refVal[4].errors;
                  else vErrors = vErrors.concat(refVal[4].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.div === undefined) {
                  valid2 = false;
                  validate.errors = [{
                    keyword: 'required',
                    dataPath: (dataPath || '') + "",
                    schemaPath: '#/allOf/1/required',
                    params: {
                      missingProperty: 'div'
                    },
                    message: 'should have required property \'div\''
                  }];
                  return false;
                } else {
                  var errs_2 = errors;
                  if (typeof data.div !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.div',
                      schemaPath: '#/allOf/1/properties/div/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal3.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A human-readable formatted text, including images.",
      "properties": {
        "status": {
          "description": "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
          "enum": ["generated", "extensions", "additional", "empty"],
          "type": "string"
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "#/definitions/Element"
        },
        "div": {
          "description": "The actual narrative content, a stripped down version of XHTML.",
          "type": "string"
        }
      },
      "required": ["div"]
    }]
  };
  refVal3.errors = null;
  refVal[3] = refVal3;
  var refVal4 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__1 = errors;
        var valid2 = true;
        if (data.id === undefined) {
          valid2 = true;
        } else {
          var errs_2 = errors;
          if (typeof data.id !== "string") {
            validate.errors = [{
              keyword: 'type',
              dataPath: (dataPath || '') + '.id',
              schemaPath: '#/allOf/0/properties/id/type',
              params: {
                type: 'string'
              },
              message: 'should be string'
            }];
            return false;
          }
          var valid2 = errors === errs_2;
        }
        if (valid2) {
          if (data._id === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (!refVal[4](data._id, (dataPath || '') + '._id', data, '_id', rootData)) {
              if (vErrors === null) vErrors = refVal[4].errors;
              else vErrors = vErrors.concat(refVal[4].errors);
              errors = vErrors.length;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            var data1 = data.extension;
            if (data1 === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (Array.isArray(data1)) {
                var errs__2 = errors;
                var valid2;
                for (var i2 = 0; i2 < data1.length; i2++) {
                  var errs_3 = errors;
                  if (!refVal5(data1[i2], (dataPath || '') + '.extension[' + i2 + ']', data1, i2, rootData)) {
                    if (vErrors === null) vErrors = refVal5.errors;
                    else vErrors = vErrors.concat(refVal5.errors);
                    errors = vErrors.length;
                  }
                  var valid3 = errors === errs_3;
                  if (!valid3) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.extension',
                  schemaPath: '#/allOf/0/properties/extension/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
          }
        }
      }
      var valid1 = errors === errs_1;
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal4.schema = {
    "allOf": [{
      "description": "Base definition for all elements in a resource.",
      "properties": {
        "id": {
          "description": "unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "type": "string"
        },
        "_id": {
          "description": "Extensions for id",
          "$ref": "#/definitions/Element"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          }
        }
      }
    }]
  };
  refVal4.errors = null;
  refVal[4] = refVal4;
  var refVal5 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.url === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.url !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.url',
                schemaPath: '#/allOf/1/properties/url/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._url === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.valueBoolean === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.valueBoolean !== "boolean") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.valueBoolean',
                    schemaPath: '#/allOf/1/properties/valueBoolean/type',
                    params: {
                      type: 'boolean'
                    },
                    message: 'should be boolean'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._valueBoolean === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._valueBoolean, (dataPath || '') + '._valueBoolean', data, '_valueBoolean', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.valueInteger;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "number") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.valueInteger',
                        schemaPath: '#/allOf/1/properties/valueInteger/type',
                        params: {
                          type: 'number'
                        },
                        message: 'should be number'
                      }];
                      return false;
                    }
                    if (typeof data1 === "string") {
                      if (!pattern0.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.valueInteger',
                          schemaPath: '#/allOf/1/properties/valueInteger/pattern',
                          params: {
                            pattern: '-?([0]|([1-9][0-9]*))'
                          },
                          message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                        }];
                        return false;
                      }
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._valueInteger === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._valueInteger, (dataPath || '') + '._valueInteger', data, '_valueInteger', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.valueDecimal;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.valueDecimal',
                            schemaPath: '#/allOf/1/properties/valueDecimal/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.valueDecimal',
                              schemaPath: '#/allOf/1/properties/valueDecimal/pattern',
                              params: {
                                pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                              },
                              message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._valueDecimal === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._valueDecimal, (dataPath || '') + '._valueDecimal', data, '_valueDecimal', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.valueBase64Binary === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.valueBase64Binary !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.valueBase64Binary',
                                schemaPath: '#/allOf/1/properties/valueBase64Binary/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._valueBase64Binary === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._valueBase64Binary, (dataPath || '') + '._valueBase64Binary', data, '_valueBase64Binary', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.valueInstant === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.valueInstant !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.valueInstant',
                                    schemaPath: '#/allOf/1/properties/valueInstant/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._valueInstant === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._valueInstant, (dataPath || '') + '._valueInstant', data, '_valueInstant', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.valueString === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.valueString !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.valueString',
                                        schemaPath: '#/allOf/1/properties/valueString/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._valueString === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._valueString, (dataPath || '') + '._valueString', data, '_valueString', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.valueUri === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data.valueUri !== "string") {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.valueUri',
                                            schemaPath: '#/allOf/1/properties/valueUri/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._valueUri === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._valueUri, (dataPath || '') + '._valueUri', data, '_valueUri', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          var data1 = data.valueDate;
                                          if (data1 === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data1 === "string") {
                                              if (!pattern2.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.valueDate',
                                                  schemaPath: '#/allOf/1/properties/valueDate/pattern',
                                                  params: {
                                                    pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                  },
                                                  message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                }];
                                                return false;
                                              }
                                            } else {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.valueDate',
                                                schemaPath: '#/allOf/1/properties/valueDate/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._valueDate === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._valueDate, (dataPath || '') + '._valueDate', data, '_valueDate', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              var data1 = data.valueDateTime;
                                              if (data1 === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (typeof data1 === "string") {
                                                  if (!pattern3.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.valueDateTime',
                                                      schemaPath: '#/allOf/1/properties/valueDateTime/pattern',
                                                      params: {
                                                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                      },
                                                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                    }];
                                                    return false;
                                                  }
                                                } else {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.valueDateTime',
                                                    schemaPath: '#/allOf/1/properties/valueDateTime/type',
                                                    params: {
                                                      type: 'string'
                                                    },
                                                    message: 'should be string'
                                                  }];
                                                  return false;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data._valueDateTime === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (!refVal[4](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  var data1 = data.valueTime;
                                                  if (data1 === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (typeof data1 === "string") {
                                                      if (!pattern4.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.valueTime',
                                                          schemaPath: '#/allOf/1/properties/valueTime/pattern',
                                                          params: {
                                                            pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                          },
                                                          message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                        }];
                                                        return false;
                                                      }
                                                    } else {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.valueTime',
                                                        schemaPath: '#/allOf/1/properties/valueTime/type',
                                                        params: {
                                                          type: 'string'
                                                        },
                                                        message: 'should be string'
                                                      }];
                                                      return false;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data._valueTime === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (!refVal[4](data._valueTime, (dataPath || '') + '._valueTime', data, '_valueTime', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      var data1 = data.valueCode;
                                                      if (data1 === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (typeof data1 === "string") {
                                                          if (!pattern5.test(data1)) {
                                                            validate.errors = [{
                                                              keyword: 'pattern',
                                                              dataPath: (dataPath || '') + '.valueCode',
                                                              schemaPath: '#/allOf/1/properties/valueCode/pattern',
                                                              params: {
                                                                pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                              },
                                                              message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                            }];
                                                            return false;
                                                          }
                                                        } else {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.valueCode',
                                                            schemaPath: '#/allOf/1/properties/valueCode/type',
                                                            params: {
                                                              type: 'string'
                                                            },
                                                            message: 'should be string'
                                                          }];
                                                          return false;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        if (data._valueCode === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (!refVal[4](data._valueCode, (dataPath || '') + '._valueCode', data, '_valueCode', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          var data1 = data.valueOid;
                                                          if (data1 === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (typeof data1 === "string") {
                                                              if (!pattern6.test(data1)) {
                                                                validate.errors = [{
                                                                  keyword: 'pattern',
                                                                  dataPath: (dataPath || '') + '.valueOid',
                                                                  schemaPath: '#/allOf/1/properties/valueOid/pattern',
                                                                  params: {
                                                                    pattern: 'urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*'
                                                                  },
                                                                  message: 'should match pattern "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"'
                                                                }];
                                                                return false;
                                                              }
                                                            } else {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '.valueOid',
                                                                schemaPath: '#/allOf/1/properties/valueOid/type',
                                                                params: {
                                                                  type: 'string'
                                                                },
                                                                message: 'should be string'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            if (data._valueOid === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (!refVal[4](data._valueOid, (dataPath || '') + '._valueOid', data, '_valueOid', rootData)) {
                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              var data1 = data.valueUuid;
                                                              if (data1 === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (typeof data1 === "string") {
                                                                  if (!pattern7.test(data1)) {
                                                                    validate.errors = [{
                                                                      keyword: 'pattern',
                                                                      dataPath: (dataPath || '') + '.valueUuid',
                                                                      schemaPath: '#/allOf/1/properties/valueUuid/pattern',
                                                                      params: {
                                                                        pattern: 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                                                                      },
                                                                      message: 'should match pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                } else {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '.valueUuid',
                                                                    schemaPath: '#/allOf/1/properties/valueUuid/type',
                                                                    params: {
                                                                      type: 'string'
                                                                    },
                                                                    message: 'should be string'
                                                                  }];
                                                                  return false;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                if (data._valueUuid === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (!refVal[4](data._valueUuid, (dataPath || '') + '._valueUuid', data, '_valueUuid', rootData)) {
                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                    errors = vErrors.length;
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  var data1 = data.valueId;
                                                                  if (data1 === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (typeof data1 === "string") {
                                                                      if (!pattern8.test(data1)) {
                                                                        validate.errors = [{
                                                                          keyword: 'pattern',
                                                                          dataPath: (dataPath || '') + '.valueId',
                                                                          schemaPath: '#/allOf/1/properties/valueId/pattern',
                                                                          params: {
                                                                            pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                                                                          },
                                                                          message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.valueId',
                                                                        schemaPath: '#/allOf/1/properties/valueId/type',
                                                                        params: {
                                                                          type: 'string'
                                                                        },
                                                                        message: 'should be string'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    if (data._valueId === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (!refVal[4](data._valueId, (dataPath || '') + '._valueId', data, '_valueId', rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      var data1 = data.valueUnsignedInt;
                                                                      if (data1 === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (typeof data1 !== "number") {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                            schemaPath: '#/allOf/1/properties/valueUnsignedInt/type',
                                                                            params: {
                                                                              type: 'number'
                                                                            },
                                                                            message: 'should be number'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        if (typeof data1 === "string") {
                                                                          if (!pattern9.test(data1)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                              schemaPath: '#/allOf/1/properties/valueUnsignedInt/pattern',
                                                                              params: {
                                                                                pattern: '[0]|([1-9][0-9]*)'
                                                                              },
                                                                              message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                      if (valid2) {
                                                                        if (data._valueUnsignedInt === undefined) {
                                                                          valid2 = true;
                                                                        } else {
                                                                          var errs_2 = errors;
                                                                          if (!refVal[4](data._valueUnsignedInt, (dataPath || '') + '._valueUnsignedInt', data, '_valueUnsignedInt', rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                        }
                                                                        if (valid2) {
                                                                          var data1 = data.valuePositiveInt;
                                                                          if (data1 === undefined) {
                                                                            valid2 = true;
                                                                          } else {
                                                                            var errs_2 = errors;
                                                                            if (typeof data1 !== "number") {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                                schemaPath: '#/allOf/1/properties/valuePositiveInt/type',
                                                                                params: {
                                                                                  type: 'number'
                                                                                },
                                                                                message: 'should be number'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern10.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                                  schemaPath: '#/allOf/1/properties/valuePositiveInt/pattern',
                                                                                  params: {
                                                                                    pattern: '[1-9][0-9]*'
                                                                                  },
                                                                                  message: 'should match pattern "[1-9][0-9]*"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                          }
                                                                          if (valid2) {
                                                                            if (data._valuePositiveInt === undefined) {
                                                                              valid2 = true;
                                                                            } else {
                                                                              var errs_2 = errors;
                                                                              if (!refVal[4](data._valuePositiveInt, (dataPath || '') + '._valuePositiveInt', data, '_valuePositiveInt', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                            }
                                                                            if (valid2) {
                                                                              if (data.valueMarkdown === undefined) {
                                                                                valid2 = true;
                                                                              } else {
                                                                                var errs_2 = errors;
                                                                                if (typeof data.valueMarkdown !== "string") {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.valueMarkdown',
                                                                                    schemaPath: '#/allOf/1/properties/valueMarkdown/type',
                                                                                    params: {
                                                                                      type: 'string'
                                                                                    },
                                                                                    message: 'should be string'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                var valid2 = errors === errs_2;
                                                                              }
                                                                              if (valid2) {
                                                                                if (data._valueMarkdown === undefined) {
                                                                                  valid2 = true;
                                                                                } else {
                                                                                  var errs_2 = errors;
                                                                                  if (!refVal[4](data._valueMarkdown, (dataPath || '') + '._valueMarkdown', data, '_valueMarkdown', rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid2 = errors === errs_2;
                                                                                }
                                                                                if (valid2) {
                                                                                  if (data.valueElement === undefined) {
                                                                                    valid2 = true;
                                                                                  } else {
                                                                                    var errs_2 = errors;
                                                                                    if (!refVal[4](data.valueElement, (dataPath || '') + '.valueElement', data, 'valueElement', rootData)) {
                                                                                      if (vErrors === null) vErrors = refVal[4].errors;
                                                                                      else vErrors = vErrors.concat(refVal[4].errors);
                                                                                      errors = vErrors.length;
                                                                                    }
                                                                                    var valid2 = errors === errs_2;
                                                                                  }
                                                                                  if (valid2) {
                                                                                    if (data.valueExtension === undefined) {
                                                                                      valid2 = true;
                                                                                    } else {
                                                                                      var errs_2 = errors;
                                                                                      if (!refVal[5](data.valueExtension, (dataPath || '') + '.valueExtension', data, 'valueExtension', rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[5].errors;
                                                                                        else vErrors = vErrors.concat(refVal[5].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid2 = errors === errs_2;
                                                                                    }
                                                                                    if (valid2) {
                                                                                      if (data.valueBackboneElement === undefined) {
                                                                                        valid2 = true;
                                                                                      } else {
                                                                                        var errs_2 = errors;
                                                                                        if (!refVal6(data.valueBackboneElement, (dataPath || '') + '.valueBackboneElement', data, 'valueBackboneElement', rootData)) {
                                                                                          if (vErrors === null) vErrors = refVal6.errors;
                                                                                          else vErrors = vErrors.concat(refVal6.errors);
                                                                                          errors = vErrors.length;
                                                                                        }
                                                                                        var valid2 = errors === errs_2;
                                                                                      }
                                                                                      if (valid2) {
                                                                                        if (data.valueNarrative === undefined) {
                                                                                          valid2 = true;
                                                                                        } else {
                                                                                          var errs_2 = errors;
                                                                                          if (!refVal[3](data.valueNarrative, (dataPath || '') + '.valueNarrative', data, 'valueNarrative', rootData)) {
                                                                                            if (vErrors === null) vErrors = refVal[3].errors;
                                                                                            else vErrors = vErrors.concat(refVal[3].errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid2 = errors === errs_2;
                                                                                        }
                                                                                        if (valid2) {
                                                                                          if (data.valueAnnotation === undefined) {
                                                                                            valid2 = true;
                                                                                          } else {
                                                                                            var errs_2 = errors;
                                                                                            if (!refVal7(data.valueAnnotation, (dataPath || '') + '.valueAnnotation', data, 'valueAnnotation', rootData)) {
                                                                                              if (vErrors === null) vErrors = refVal7.errors;
                                                                                              else vErrors = vErrors.concat(refVal7.errors);
                                                                                              errors = vErrors.length;
                                                                                            }
                                                                                            var valid2 = errors === errs_2;
                                                                                          }
                                                                                          if (valid2) {
                                                                                            if (data.valueAttachment === undefined) {
                                                                                              valid2 = true;
                                                                                            } else {
                                                                                              var errs_2 = errors;
                                                                                              if (!refVal13(data.valueAttachment, (dataPath || '') + '.valueAttachment', data, 'valueAttachment', rootData)) {
                                                                                                if (vErrors === null) vErrors = refVal13.errors;
                                                                                                else vErrors = vErrors.concat(refVal13.errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid2 = errors === errs_2;
                                                                                            }
                                                                                            if (valid2) {
                                                                                              if (data.valueIdentifier === undefined) {
                                                                                                valid2 = true;
                                                                                              } else {
                                                                                                var errs_2 = errors;
                                                                                                if (!refVal[9](data.valueIdentifier, (dataPath || '') + '.valueIdentifier', data, 'valueIdentifier', rootData)) {
                                                                                                  if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                  else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                  errors = vErrors.length;
                                                                                                }
                                                                                                var valid2 = errors === errs_2;
                                                                                              }
                                                                                              if (valid2) {
                                                                                                if (data.valueCodeableConcept === undefined) {
                                                                                                  valid2 = true;
                                                                                                } else {
                                                                                                  var errs_2 = errors;
                                                                                                  if (!refVal[10](data.valueCodeableConcept, (dataPath || '') + '.valueCodeableConcept', data, 'valueCodeableConcept', rootData)) {
                                                                                                    if (vErrors === null) vErrors = refVal[10].errors;
                                                                                                    else vErrors = vErrors.concat(refVal[10].errors);
                                                                                                    errors = vErrors.length;
                                                                                                  }
                                                                                                  var valid2 = errors === errs_2;
                                                                                                }
                                                                                                if (valid2) {
                                                                                                  if (data.valueCoding === undefined) {
                                                                                                    valid2 = true;
                                                                                                  } else {
                                                                                                    var errs_2 = errors;
                                                                                                    if (!refVal[11](data.valueCoding, (dataPath || '') + '.valueCoding', data, 'valueCoding', rootData)) {
                                                                                                      if (vErrors === null) vErrors = refVal[11].errors;
                                                                                                      else vErrors = vErrors.concat(refVal[11].errors);
                                                                                                      errors = vErrors.length;
                                                                                                    }
                                                                                                    var valid2 = errors === errs_2;
                                                                                                  }
                                                                                                  if (valid2) {
                                                                                                    if (data.valueQuantity === undefined) {
                                                                                                      valid2 = true;
                                                                                                    } else {
                                                                                                      var errs_2 = errors;
                                                                                                      if (!refVal14(data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                                                                                                        if (vErrors === null) vErrors = refVal14.errors;
                                                                                                        else vErrors = vErrors.concat(refVal14.errors);
                                                                                                        errors = vErrors.length;
                                                                                                      }
                                                                                                      var valid2 = errors === errs_2;
                                                                                                    }
                                                                                                    if (valid2) {
                                                                                                      if (data.valueDuration === undefined) {
                                                                                                        valid2 = true;
                                                                                                      } else {
                                                                                                        var errs_2 = errors;
                                                                                                        if (!refVal15(data.valueDuration, (dataPath || '') + '.valueDuration', data, 'valueDuration', rootData)) {
                                                                                                          if (vErrors === null) vErrors = refVal15.errors;
                                                                                                          else vErrors = vErrors.concat(refVal15.errors);
                                                                                                          errors = vErrors.length;
                                                                                                        }
                                                                                                        var valid2 = errors === errs_2;
                                                                                                      }
                                                                                                      if (valid2) {
                                                                                                        if (data.valueSimpleQuantity === undefined) {
                                                                                                          valid2 = true;
                                                                                                        } else {
                                                                                                          var errs_2 = errors;
                                                                                                          if (!refVal[14](data.valueSimpleQuantity, (dataPath || '') + '.valueSimpleQuantity', data, 'valueSimpleQuantity', rootData)) {
                                                                                                            if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                            else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                            errors = vErrors.length;
                                                                                                          }
                                                                                                          var valid2 = errors === errs_2;
                                                                                                        }
                                                                                                        if (valid2) {
                                                                                                          if (data.valueDistance === undefined) {
                                                                                                            valid2 = true;
                                                                                                          } else {
                                                                                                            var errs_2 = errors;
                                                                                                            if (!refVal16(data.valueDistance, (dataPath || '') + '.valueDistance', data, 'valueDistance', rootData)) {
                                                                                                              if (vErrors === null) vErrors = refVal16.errors;
                                                                                                              else vErrors = vErrors.concat(refVal16.errors);
                                                                                                              errors = vErrors.length;
                                                                                                            }
                                                                                                            var valid2 = errors === errs_2;
                                                                                                          }
                                                                                                          if (valid2) {
                                                                                                            if (data.valueCount === undefined) {
                                                                                                              valid2 = true;
                                                                                                            } else {
                                                                                                              var errs_2 = errors;
                                                                                                              if (!refVal17(data.valueCount, (dataPath || '') + '.valueCount', data, 'valueCount', rootData)) {
                                                                                                                if (vErrors === null) vErrors = refVal17.errors;
                                                                                                                else vErrors = vErrors.concat(refVal17.errors);
                                                                                                                errors = vErrors.length;
                                                                                                              }
                                                                                                              var valid2 = errors === errs_2;
                                                                                                            }
                                                                                                            if (valid2) {
                                                                                                              if (data.valueMoney === undefined) {
                                                                                                                valid2 = true;
                                                                                                              } else {
                                                                                                                var errs_2 = errors;
                                                                                                                if (!refVal18(data.valueMoney, (dataPath || '') + '.valueMoney', data, 'valueMoney', rootData)) {
                                                                                                                  if (vErrors === null) vErrors = refVal18.errors;
                                                                                                                  else vErrors = vErrors.concat(refVal18.errors);
                                                                                                                  errors = vErrors.length;
                                                                                                                }
                                                                                                                var valid2 = errors === errs_2;
                                                                                                              }
                                                                                                              if (valid2) {
                                                                                                                if (data.valueAge === undefined) {
                                                                                                                  valid2 = true;
                                                                                                                } else {
                                                                                                                  var errs_2 = errors;
                                                                                                                  if (!refVal19(data.valueAge, (dataPath || '') + '.valueAge', data, 'valueAge', rootData)) {
                                                                                                                    if (vErrors === null) vErrors = refVal19.errors;
                                                                                                                    else vErrors = vErrors.concat(refVal19.errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                  }
                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                }
                                                                                                                if (valid2) {
                                                                                                                  if (data.valueRange === undefined) {
                                                                                                                    valid2 = true;
                                                                                                                  } else {
                                                                                                                    var errs_2 = errors;
                                                                                                                    if (!refVal20(data.valueRange, (dataPath || '') + '.valueRange', data, 'valueRange', rootData)) {
                                                                                                                      if (vErrors === null) vErrors = refVal20.errors;
                                                                                                                      else vErrors = vErrors.concat(refVal20.errors);
                                                                                                                      errors = vErrors.length;
                                                                                                                    }
                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                  }
                                                                                                                  if (valid2) {
                                                                                                                    if (data.valuePeriod === undefined) {
                                                                                                                      valid2 = true;
                                                                                                                    } else {
                                                                                                                      var errs_2 = errors;
                                                                                                                      if (!refVal[12](data.valuePeriod, (dataPath || '') + '.valuePeriod', data, 'valuePeriod', rootData)) {
                                                                                                                        if (vErrors === null) vErrors = refVal[12].errors;
                                                                                                                        else vErrors = vErrors.concat(refVal[12].errors);
                                                                                                                        errors = vErrors.length;
                                                                                                                      }
                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                    }
                                                                                                                    if (valid2) {
                                                                                                                      if (data.valueRatio === undefined) {
                                                                                                                        valid2 = true;
                                                                                                                      } else {
                                                                                                                        var errs_2 = errors;
                                                                                                                        if (!refVal21(data.valueRatio, (dataPath || '') + '.valueRatio', data, 'valueRatio', rootData)) {
                                                                                                                          if (vErrors === null) vErrors = refVal21.errors;
                                                                                                                          else vErrors = vErrors.concat(refVal21.errors);
                                                                                                                          errors = vErrors.length;
                                                                                                                        }
                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                      }
                                                                                                                      if (valid2) {
                                                                                                                        if (data.valueReference === undefined) {
                                                                                                                          valid2 = true;
                                                                                                                        } else {
                                                                                                                          var errs_2 = errors;
                                                                                                                          if (!refVal[8](data.valueReference, (dataPath || '') + '.valueReference', data, 'valueReference', rootData)) {
                                                                                                                            if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                                            else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                                            errors = vErrors.length;
                                                                                                                          }
                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                        }
                                                                                                                        if (valid2) {
                                                                                                                          if (data.valueSampledData === undefined) {
                                                                                                                            valid2 = true;
                                                                                                                          } else {
                                                                                                                            var errs_2 = errors;
                                                                                                                            if (!refVal22(data.valueSampledData, (dataPath || '') + '.valueSampledData', data, 'valueSampledData', rootData)) {
                                                                                                                              if (vErrors === null) vErrors = refVal22.errors;
                                                                                                                              else vErrors = vErrors.concat(refVal22.errors);
                                                                                                                              errors = vErrors.length;
                                                                                                                            }
                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                          }
                                                                                                                          if (valid2) {
                                                                                                                            if (data.valueSignature === undefined) {
                                                                                                                              valid2 = true;
                                                                                                                            } else {
                                                                                                                              var errs_2 = errors;
                                                                                                                              if (!refVal23(data.valueSignature, (dataPath || '') + '.valueSignature', data, 'valueSignature', rootData)) {
                                                                                                                                if (vErrors === null) vErrors = refVal23.errors;
                                                                                                                                else vErrors = vErrors.concat(refVal23.errors);
                                                                                                                                errors = vErrors.length;
                                                                                                                              }
                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                            }
                                                                                                                            if (valid2) {
                                                                                                                              if (data.valueHumanName === undefined) {
                                                                                                                                valid2 = true;
                                                                                                                              } else {
                                                                                                                                var errs_2 = errors;
                                                                                                                                if (!refVal24(data.valueHumanName, (dataPath || '') + '.valueHumanName', data, 'valueHumanName', rootData)) {
                                                                                                                                  if (vErrors === null) vErrors = refVal24.errors;
                                                                                                                                  else vErrors = vErrors.concat(refVal24.errors);
                                                                                                                                  errors = vErrors.length;
                                                                                                                                }
                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                              }
                                                                                                                              if (valid2) {
                                                                                                                                if (data.valueAddress === undefined) {
                                                                                                                                  valid2 = true;
                                                                                                                                } else {
                                                                                                                                  var errs_2 = errors;
                                                                                                                                  if (!refVal25(data.valueAddress, (dataPath || '') + '.valueAddress', data, 'valueAddress', rootData)) {
                                                                                                                                    if (vErrors === null) vErrors = refVal25.errors;
                                                                                                                                    else vErrors = vErrors.concat(refVal25.errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                  }
                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                }
                                                                                                                                if (valid2) {
                                                                                                                                  if (data.valueContactPoint === undefined) {
                                                                                                                                    valid2 = true;
                                                                                                                                  } else {
                                                                                                                                    var errs_2 = errors;
                                                                                                                                    if (!refVal26(data.valueContactPoint, (dataPath || '') + '.valueContactPoint', data, 'valueContactPoint', rootData)) {
                                                                                                                                      if (vErrors === null) vErrors = refVal26.errors;
                                                                                                                                      else vErrors = vErrors.concat(refVal26.errors);
                                                                                                                                      errors = vErrors.length;
                                                                                                                                    }
                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                  }
                                                                                                                                  if (valid2) {
                                                                                                                                    if (data.valueTiming === undefined) {
                                                                                                                                      valid2 = true;
                                                                                                                                    } else {
                                                                                                                                      var errs_2 = errors;
                                                                                                                                      if (!refVal27(data.valueTiming, (dataPath || '') + '.valueTiming', data, 'valueTiming', rootData)) {
                                                                                                                                        if (vErrors === null) vErrors = refVal27.errors;
                                                                                                                                        else vErrors = vErrors.concat(refVal27.errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                      }
                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                    }
                                                                                                                                    if (valid2) {
                                                                                                                                      if (data.valueMeta === undefined) {
                                                                                                                                        valid2 = true;
                                                                                                                                      } else {
                                                                                                                                        var errs_2 = errors;
                                                                                                                                        if (!refVal29(data.valueMeta, (dataPath || '') + '.valueMeta', data, 'valueMeta', rootData)) {
                                                                                                                                          if (vErrors === null) vErrors = refVal29.errors;
                                                                                                                                          else vErrors = vErrors.concat(refVal29.errors);
                                                                                                                                          errors = vErrors.length;
                                                                                                                                        }
                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                      }
                                                                                                                                      if (valid2) {
                                                                                                                                        if (data.valueElementDefinition === undefined) {
                                                                                                                                          valid2 = true;
                                                                                                                                        } else {
                                                                                                                                          var errs_2 = errors;
                                                                                                                                          if (!refVal30(data.valueElementDefinition, (dataPath || '') + '.valueElementDefinition', data, 'valueElementDefinition', rootData)) {
                                                                                                                                            if (vErrors === null) vErrors = refVal30.errors;
                                                                                                                                            else vErrors = vErrors.concat(refVal30.errors);
                                                                                                                                            errors = vErrors.length;
                                                                                                                                          }
                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                        }
                                                                                                                                        if (valid2) {
                                                                                                                                          if (data.valueContactDetail === undefined) {
                                                                                                                                            valid2 = true;
                                                                                                                                          } else {
                                                                                                                                            var errs_2 = errors;
                                                                                                                                            if (!refVal[35](data.valueContactDetail, (dataPath || '') + '.valueContactDetail', data, 'valueContactDetail', rootData)) {
                                                                                                                                              if (vErrors === null) vErrors = refVal[35].errors;
                                                                                                                                              else vErrors = vErrors.concat(refVal[35].errors);
                                                                                                                                              errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                          }
                                                                                                                                          if (valid2) {
                                                                                                                                            if (data.valueContributor === undefined) {
                                                                                                                                              valid2 = true;
                                                                                                                                            } else {
                                                                                                                                              var errs_2 = errors;
                                                                                                                                              if (!refVal[36](data.valueContributor, (dataPath || '') + '.valueContributor', data, 'valueContributor', rootData)) {
                                                                                                                                                if (vErrors === null) vErrors = refVal[36].errors;
                                                                                                                                                else vErrors = vErrors.concat(refVal[36].errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                              }
                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                            }
                                                                                                                                            if (valid2) {
                                                                                                                                              if (data.valueDosage === undefined) {
                                                                                                                                                valid2 = true;
                                                                                                                                              } else {
                                                                                                                                                var errs_2 = errors;
                                                                                                                                                if (!refVal[37](data.valueDosage, (dataPath || '') + '.valueDosage', data, 'valueDosage', rootData)) {
                                                                                                                                                  if (vErrors === null) vErrors = refVal[37].errors;
                                                                                                                                                  else vErrors = vErrors.concat(refVal[37].errors);
                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                }
                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                              }
                                                                                                                                              if (valid2) {
                                                                                                                                                if (data.valueRelatedArtifact === undefined) {
                                                                                                                                                  valid2 = true;
                                                                                                                                                } else {
                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                  if (!refVal[38](data.valueRelatedArtifact, (dataPath || '') + '.valueRelatedArtifact', data, 'valueRelatedArtifact', rootData)) {
                                                                                                                                                    if (vErrors === null) vErrors = refVal[38].errors;
                                                                                                                                                    else vErrors = vErrors.concat(refVal[38].errors);
                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                  }
                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                }
                                                                                                                                                if (valid2) {
                                                                                                                                                  if (data.valueUsageContext === undefined) {
                                                                                                                                                    valid2 = true;
                                                                                                                                                  } else {
                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                    if (!refVal[39](data.valueUsageContext, (dataPath || '') + '.valueUsageContext', data, 'valueUsageContext', rootData)) {
                                                                                                                                                      if (vErrors === null) vErrors = refVal[39].errors;
                                                                                                                                                      else vErrors = vErrors.concat(refVal[39].errors);
                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                    }
                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                  }
                                                                                                                                                  if (valid2) {
                                                                                                                                                    if (data.valueDataRequirement === undefined) {
                                                                                                                                                      valid2 = true;
                                                                                                                                                    } else {
                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                      if (!refVal[40](data.valueDataRequirement, (dataPath || '') + '.valueDataRequirement', data, 'valueDataRequirement', rootData)) {
                                                                                                                                                        if (vErrors === null) vErrors = refVal[40].errors;
                                                                                                                                                        else vErrors = vErrors.concat(refVal[40].errors);
                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                      }
                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                    }
                                                                                                                                                    if (valid2) {
                                                                                                                                                      if (data.valueParameterDefinition === undefined) {
                                                                                                                                                        valid2 = true;
                                                                                                                                                      } else {
                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                        if (!refVal[43](data.valueParameterDefinition, (dataPath || '') + '.valueParameterDefinition', data, 'valueParameterDefinition', rootData)) {
                                                                                                                                                          if (vErrors === null) vErrors = refVal[43].errors;
                                                                                                                                                          else vErrors = vErrors.concat(refVal[43].errors);
                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                        }
                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                      }
                                                                                                                                                      if (valid2) {
                                                                                                                                                        if (data.valueTriggerDefinition === undefined) {
                                                                                                                                                          valid2 = true;
                                                                                                                                                        } else {
                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                          if (!refVal[44](data.valueTriggerDefinition, (dataPath || '') + '.valueTriggerDefinition', data, 'valueTriggerDefinition', rootData)) {
                                                                                                                                                            if (vErrors === null) vErrors = refVal[44].errors;
                                                                                                                                                            else vErrors = vErrors.concat(refVal[44].errors);
                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                          }
                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal5.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Optional Extension Element - found in all resources.",
      "properties": {
        "url": {
          "description": "Source of the definition for the extension code - a logical name or a URL.",
          "type": "string"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueElement": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Element"
        },
        "valueExtension": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Extension"
        },
        "valueBackboneElement": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/BackboneElement"
        },
        "valueNarrative": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Narrative"
        },
        "valueAnnotation": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Attachment"
        },
        "valueIdentifier": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Identifier"
        },
        "valueCodeableConcept": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Coding"
        },
        "valueQuantity": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Quantity"
        },
        "valueDuration": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Duration"
        },
        "valueSimpleQuantity": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Quantity"
        },
        "valueDistance": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Distance"
        },
        "valueCount": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Count"
        },
        "valueMoney": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Money"
        },
        "valueAge": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Age"
        },
        "valueRange": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Range"
        },
        "valuePeriod": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Period"
        },
        "valueRatio": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Signature"
        },
        "valueHumanName": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/HumanName"
        },
        "valueAddress": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Address"
        },
        "valueContactPoint": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueTiming": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Timing"
        },
        "valueMeta": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Meta"
        },
        "valueElementDefinition": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/ElementDefinition"
        },
        "valueContactDetail": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Contributor"
        },
        "valueDosage": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/Dosage"
        },
        "valueRelatedArtifact": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueUsageContext": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDataRequirement": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueParameterDefinition": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueTriggerDefinition": {
          "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
          "$ref": "#/definitions/TriggerDefinition"
        }
      }
    }]
  };
  refVal5.errors = null;
  refVal[5] = refVal5;
  var refVal6 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.modifierExtension;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (Array.isArray(data1)) {
              var errs__2 = errors;
              var valid2;
              for (var i2 = 0; i2 < data1.length; i2++) {
                var errs_3 = errors;
                if (!refVal[5](data1[i2], (dataPath || '') + '.modifierExtension[' + i2 + ']', data1, i2, rootData)) {
                  if (vErrors === null) vErrors = refVal[5].errors;
                  else vErrors = vErrors.concat(refVal[5].errors);
                  errors = vErrors.length;
                }
                var valid3 = errors === errs_3;
                if (!valid3) break;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.modifierExtension',
                schemaPath: '#/allOf/1/properties/modifierExtension/type',
                params: {
                  type: 'array'
                },
                message: 'should be array'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal6.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Base definition for all elements that are defined inside a resource - but not those in a data type.",
      "properties": {
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          }
        }
      }
    }]
  };
  refVal6.errors = null;
  refVal[6] = refVal6;
  var refVal7 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.authorReference === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (!refVal8(data.authorReference, (dataPath || '') + '.authorReference', data, 'authorReference', rootData)) {
              if (vErrors === null) vErrors = refVal8.errors;
              else vErrors = vErrors.concat(refVal8.errors);
              errors = vErrors.length;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.authorString === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (typeof data.authorString !== "string") {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.authorString',
                  schemaPath: '#/allOf/1/properties/authorString/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data._authorString === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[4](data._authorString, (dataPath || '') + '._authorString', data, '_authorString', rootData)) {
                  if (vErrors === null) vErrors = refVal[4].errors;
                  else vErrors = vErrors.concat(refVal[4].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                var data1 = data.time;
                if (data1 === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern3.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.time',
                        schemaPath: '#/allOf/1/properties/time/pattern',
                        params: {
                          pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                        },
                        message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.time',
                      schemaPath: '#/allOf/1/properties/time/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data._time === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[4](data._time, (dataPath || '') + '._time', data, '_time', rootData)) {
                      if (vErrors === null) vErrors = refVal[4].errors;
                      else vErrors = vErrors.concat(refVal[4].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.text === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data.text !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.text',
                          schemaPath: '#/allOf/1/properties/text/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._text === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal7.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A  text note which also  contains information about who made the statement and when.",
      "properties": {
        "authorReference": {
          "description": "The individual responsible for making the annotation.",
          "$ref": "#/definitions/Reference"
        },
        "authorString": {
          "description": "The individual responsible for making the annotation.",
          "type": "string"
        },
        "_authorString": {
          "description": "Extensions for authorString",
          "$ref": "#/definitions/Element"
        },
        "time": {
          "description": "Indicates when this particular annotation was made.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
        },
        "_time": {
          "description": "Extensions for time",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "The text of the annotation.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal7.errors = null;
  refVal[7] = refVal7;
  var refVal8 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.reference === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.reference !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.reference',
                schemaPath: '#/allOf/1/properties/reference/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._reference === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._reference, (dataPath || '') + '._reference', data, '_reference', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.identifier === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal9(data.identifier, (dataPath || '') + '.identifier', data, 'identifier', rootData)) {
                  if (vErrors === null) vErrors = refVal9.errors;
                  else vErrors = vErrors.concat(refVal9.errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.display === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data.display !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.display',
                      schemaPath: '#/allOf/1/properties/display/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data._display === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[4](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                      if (vErrors === null) vErrors = refVal[4].errors;
                      else vErrors = vErrors.concat(refVal[4].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal8.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A reference from one resource to another.",
      "properties": {
        "reference": {
          "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
          "type": "string"
        },
        "_reference": {
          "description": "Extensions for reference",
          "$ref": "#/definitions/Element"
        },
        "identifier": {
          "description": "An identifier for the other resource. This is used when there is no way to reference the other resource directly, either because the entity is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
          "$ref": "#/definitions/Identifier"
        },
        "display": {
          "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
          "type": "string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal8.errors = null;
  refVal[8] = refVal8;
  var refVal9 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.use;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.use.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._use === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.type === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal10(data.type, (dataPath || '') + '.type', data, 'type', rootData)) {
                  if (vErrors === null) vErrors = refVal10.errors;
                  else vErrors = vErrors.concat(refVal10.errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.system === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data.system !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.system',
                      schemaPath: '#/allOf/1/properties/system/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data._system === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[4](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                      if (vErrors === null) vErrors = refVal[4].errors;
                      else vErrors = vErrors.concat(refVal[4].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.value === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data.value !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.value',
                          schemaPath: '#/allOf/1/properties/value/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._value === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data.period === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal12(data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                            if (vErrors === null) vErrors = refVal12.errors;
                            else vErrors = vErrors.concat(refVal12.errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.assigner === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[8](data.assigner, (dataPath || '') + '.assigner', data, 'assigner', rootData)) {
                              if (vErrors === null) vErrors = refVal[8].errors;
                              else vErrors = vErrors.concat(refVal[8].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal9.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A technical identifier - identifies some entity uniquely and unambiguously.",
      "properties": {
        "use": {
          "description": "The purpose of this identifier.",
          "enum": ["usual", "official", "temp", "secondary"],
          "type": "string"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "system": {
          "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
          "type": "string"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
          "type": "string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period during which identifier is/was valid for use.",
          "$ref": "#/definitions/Period"
        },
        "assigner": {
          "description": "Organization that issued/manages the identifier.",
          "$ref": "#/definitions/Reference"
        }
      }
    }]
  };
  refVal9.errors = null;
  refVal[9] = refVal9;
  var refVal10 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.coding;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (Array.isArray(data1)) {
              var errs__2 = errors;
              var valid2;
              for (var i2 = 0; i2 < data1.length; i2++) {
                var errs_3 = errors;
                if (!refVal11(data1[i2], (dataPath || '') + '.coding[' + i2 + ']', data1, i2, rootData)) {
                  if (vErrors === null) vErrors = refVal11.errors;
                  else vErrors = vErrors.concat(refVal11.errors);
                  errors = vErrors.length;
                }
                var valid3 = errors === errs_3;
                if (!valid3) break;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.coding',
                schemaPath: '#/allOf/1/properties/coding/type',
                params: {
                  type: 'array'
                },
                message: 'should be array'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.text === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (typeof data.text !== "string") {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.text',
                  schemaPath: '#/allOf/1/properties/text/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data._text === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                  if (vErrors === null) vErrors = refVal[4].errors;
                  else vErrors = vErrors.concat(refVal[4].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal10.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
      "properties": {
        "coding": {
          "description": "A reference to a code defined by a terminology system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "text": {
          "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal10.errors = null;
  refVal[10] = refVal10;
  var refVal11 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.system === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.system !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.system',
                schemaPath: '#/allOf/1/properties/system/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._system === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.version === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.version !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.version',
                    schemaPath: '#/allOf/1/properties/version/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._version === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._version, (dataPath || '') + '._version', data, '_version', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.code;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern5.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.code',
                          schemaPath: '#/allOf/1/properties/code/pattern',
                          params: {
                            pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                          },
                          message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.code',
                        schemaPath: '#/allOf/1/properties/code/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._code === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.display === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.display !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.display',
                            schemaPath: '#/allOf/1/properties/display/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._display === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.userSelected === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.userSelected !== "boolean") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.userSelected',
                                schemaPath: '#/allOf/1/properties/userSelected/type',
                                params: {
                                  type: 'boolean'
                                },
                                message: 'should be boolean'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._userSelected === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._userSelected, (dataPath || '') + '._userSelected', data, '_userSelected', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal11.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A reference to a code defined by a terminology system.",
      "properties": {
        "system": {
          "description": "The identification of the code system that defines the meaning of the symbol in the code.",
          "type": "string"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "version": {
          "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "type": "string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A representation of the meaning of the code in the system, following the rules of the system.",
          "type": "string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "userSelected": {
          "description": "Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).",
          "type": "boolean"
        },
        "_userSelected": {
          "description": "Extensions for userSelected",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal11.errors = null;
  refVal[11] = refVal11;
  var refVal12 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.start;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern3.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.start',
                  schemaPath: '#/allOf/1/properties/start/pattern',
                  params: {
                    pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                  },
                  message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.start',
                schemaPath: '#/allOf/1/properties/start/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._start === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._start, (dataPath || '') + '._start', data, '_start', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.end;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern3.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.end',
                      schemaPath: '#/allOf/1/properties/end/pattern',
                      params: {
                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                      },
                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.end',
                    schemaPath: '#/allOf/1/properties/end/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._end === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._end, (dataPath || '') + '._end', data, '_end', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal12.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A time period defined by a start and end date and optionally time.",
      "properties": {
        "start": {
          "description": "The start of the period. The boundary is inclusive.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
        },
        "_start": {
          "description": "Extensions for start",
          "$ref": "#/definitions/Element"
        },
        "end": {
          "description": "The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
        },
        "_end": {
          "description": "Extensions for end",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal12.errors = null;
  refVal[12] = refVal12;
  var refVal13 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.contentType;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern5.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.contentType',
                  schemaPath: '#/allOf/1/properties/contentType/pattern',
                  params: {
                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                  },
                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.contentType',
                schemaPath: '#/allOf/1/properties/contentType/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._contentType === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._contentType, (dataPath || '') + '._contentType', data, '_contentType', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.language;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.language',
                      schemaPath: '#/allOf/1/properties/language/pattern',
                      params: {
                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                      },
                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.language',
                    schemaPath: '#/allOf/1/properties/language/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._language === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._language, (dataPath || '') + '._language', data, '_language', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.data === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.data !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.data',
                        schemaPath: '#/allOf/1/properties/data/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._data === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._data, (dataPath || '') + '._data', data, '_data', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.url === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.url !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.url',
                            schemaPath: '#/allOf/1/properties/url/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._url === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.size;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.size',
                                schemaPath: '#/allOf/1/properties/size/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern9.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.size',
                                  schemaPath: '#/allOf/1/properties/size/pattern',
                                  params: {
                                    pattern: '[0]|([1-9][0-9]*)'
                                  },
                                  message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._size === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._size, (dataPath || '') + '._size', data, '_size', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.hash === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.hash !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.hash',
                                    schemaPath: '#/allOf/1/properties/hash/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._hash === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._hash, (dataPath || '') + '._hash', data, '_hash', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.title === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.title !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.title',
                                        schemaPath: '#/allOf/1/properties/title/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._title === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._title, (dataPath || '') + '._title', data, '_title', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      var data1 = data.creation;
                                      if (data1 === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern3.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.creation',
                                              schemaPath: '#/allOf/1/properties/creation/pattern',
                                              params: {
                                                pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                              },
                                              message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.creation',
                                            schemaPath: '#/allOf/1/properties/creation/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._creation === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._creation, (dataPath || '') + '._creation', data, '_creation', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal13.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "For referring to data content defined in other formats.",
      "properties": {
        "contentType": {
          "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_contentType": {
          "description": "Extensions for contentType",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "The human language of the content. The value can be any valid value according to BCP 47.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "The actual data of the attachment - a sequence of bytes. In XML, represented using base64.",
          "type": "string"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "An alternative location where the data can be accessed.",
          "type": "string"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "size": {
          "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
          "type": "number",
          "pattern": "[0]|([1-9][0-9]*)"
        },
        "_size": {
          "description": "Extensions for size",
          "$ref": "#/definitions/Element"
        },
        "hash": {
          "description": "The calculated hash of the data using SHA-1. Represented using base64.",
          "type": "string"
        },
        "_hash": {
          "description": "Extensions for hash",
          "$ref": "#/definitions/Element"
        },
        "title": {
          "description": "A label or set of text to display in place of the data.",
          "type": "string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "#/definitions/Element"
        },
        "creation": {
          "description": "The date that the attachment was first created.",
          "type": "string",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
        },
        "_creation": {
          "description": "Extensions for creation",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal13.errors = null;
  refVal[13] = refVal13;
  var refVal14 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.value;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "number") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.value',
                schemaPath: '#/allOf/1/properties/value/type',
                params: {
                  type: 'number'
                },
                message: 'should be number'
              }];
              return false;
            }
            if (typeof data1 === "string") {
              if (!pattern1.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.value',
                  schemaPath: '#/allOf/1/properties/value/pattern',
                  params: {
                    pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                  },
                  message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                }];
                return false;
              }
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._value === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.comparator;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.comparator',
                    schemaPath: '#/allOf/1/properties/comparator/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var schema2 = validate.schema.allOf[1].properties.comparator.enum;
                var valid2;
                valid2 = false;
                for (var i2 = 0; i2 < schema2.length; i2++)
                  if (equal(data1, schema2[i2])) {
                    valid2 = true;
                    break;
                  } if (!valid2) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.comparator',
                    schemaPath: '#/allOf/1/properties/comparator/enum',
                    params: {
                      allowedValues: schema2
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._comparator === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._comparator, (dataPath || '') + '._comparator', data, '_comparator', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.unit === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.unit !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.unit',
                        schemaPath: '#/allOf/1/properties/unit/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._unit === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._unit, (dataPath || '') + '._unit', data, '_unit', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.system === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.system !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.system',
                            schemaPath: '#/allOf/1/properties/system/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._system === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.code;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern5.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.code',
                                  schemaPath: '#/allOf/1/properties/code/pattern',
                                  params: {
                                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                  },
                                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.code',
                                schemaPath: '#/allOf/1/properties/code/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._code === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal14.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {
        "value": {
          "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "comparator": {
          "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "enum": ["<", "<=", ">=", ">"],
          "type": "string"
        },
        "_comparator": {
          "description": "Extensions for comparator",
          "$ref": "#/definitions/Element"
        },
        "unit": {
          "description": "A human-readable form of the unit.",
          "type": "string"
        },
        "_unit": {
          "description": "Extensions for unit",
          "$ref": "#/definitions/Element"
        },
        "system": {
          "description": "The identification of the system that provides the coded form of the unit.",
          "type": "string"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A computer processable form of the unit in some unit representation system.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal14.errors = null;
  refVal[14] = refVal14;
  var refVal15 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[14](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[14].errors;
        else vErrors = vErrors.concat(refVal[14].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal15.schema = {
    "allOf": [{
      "$ref": "#/definitions/Quantity"
    }, {
      "description": "A length of time.",
      "properties": {}
    }]
  };
  refVal15.errors = null;
  refVal[15] = refVal15;
  var refVal16 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[14](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[14].errors;
        else vErrors = vErrors.concat(refVal[14].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal16.schema = {
    "allOf": [{
      "$ref": "#/definitions/Quantity"
    }, {
      "description": "A length - a value with a unit that is a physical distance.",
      "properties": {}
    }]
  };
  refVal16.errors = null;
  refVal[16] = refVal16;
  var refVal17 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[14](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[14].errors;
        else vErrors = vErrors.concat(refVal[14].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal17.schema = {
    "allOf": [{
      "$ref": "#/definitions/Quantity"
    }, {
      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "properties": {}
    }]
  };
  refVal17.errors = null;
  refVal[17] = refVal17;
  var refVal18 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[14](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[14].errors;
        else vErrors = vErrors.concat(refVal[14].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal18.schema = {
    "allOf": [{
      "$ref": "#/definitions/Quantity"
    }, {
      "description": "An amount of economic utility in some recognized currency.",
      "properties": {}
    }]
  };
  refVal18.errors = null;
  refVal[18] = refVal18;
  var refVal19 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[14](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[14].errors;
        else vErrors = vErrors.concat(refVal[14].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal19.schema = {
    "allOf": [{
      "$ref": "#/definitions/Quantity"
    }, {
      "description": "A duration of time during which an organism (or a process) has existed.",
      "properties": {}
    }]
  };
  refVal19.errors = null;
  refVal[19] = refVal19;
  var refVal20 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.low === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (!refVal[14](data.low, (dataPath || '') + '.low', data, 'low', rootData)) {
              if (vErrors === null) vErrors = refVal[14].errors;
              else vErrors = vErrors.concat(refVal[14].errors);
              errors = vErrors.length;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.high === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[14](data.high, (dataPath || '') + '.high', data, 'high', rootData)) {
                if (vErrors === null) vErrors = refVal[14].errors;
                else vErrors = vErrors.concat(refVal[14].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal20.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A set of ordered Quantities defined by a low and high limit.",
      "properties": {
        "low": {
          "description": "The low limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        },
        "high": {
          "description": "The high limit. The boundary is inclusive.",
          "$ref": "#/definitions/Quantity"
        }
      }
    }]
  };
  refVal20.errors = null;
  refVal[20] = refVal20;
  var refVal21 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.numerator === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (!refVal[14](data.numerator, (dataPath || '') + '.numerator', data, 'numerator', rootData)) {
              if (vErrors === null) vErrors = refVal[14].errors;
              else vErrors = vErrors.concat(refVal[14].errors);
              errors = vErrors.length;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.denominator === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[14](data.denominator, (dataPath || '') + '.denominator', data, 'denominator', rootData)) {
                if (vErrors === null) vErrors = refVal[14].errors;
                else vErrors = vErrors.concat(refVal[14].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal21.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
      "properties": {
        "numerator": {
          "description": "The value of the numerator.",
          "$ref": "#/definitions/Quantity"
        },
        "denominator": {
          "description": "The value of the denominator.",
          "$ref": "#/definitions/Quantity"
        }
      }
    }]
  };
  refVal21.errors = null;
  refVal[21] = refVal21;
  var refVal22 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          if (true) {
            var errs__1 = errors;
            var valid2 = true;
            if (data.origin === undefined) {
              valid2 = false;
              validate.errors = [{
                keyword: 'required',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/allOf/1/required',
                params: {
                  missingProperty: 'origin'
                },
                message: 'should have required property \'origin\''
              }];
              return false;
            } else {
              var errs_2 = errors;
              if (!refVal[14](data.origin, (dataPath || '') + '.origin', data, 'origin', rootData)) {
                if (vErrors === null) vErrors = refVal[14].errors;
                else vErrors = vErrors.concat(refVal[14].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.period;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.period',
                    schemaPath: '#/allOf/1/properties/period/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern1.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.period',
                      schemaPath: '#/allOf/1/properties/period/pattern',
                      params: {
                        pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                      },
                      message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._period === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._period, (dataPath || '') + '._period', data, '_period', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.factor;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "number") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.factor',
                        schemaPath: '#/allOf/1/properties/factor/type',
                        params: {
                          type: 'number'
                        },
                        message: 'should be number'
                      }];
                      return false;
                    }
                    if (typeof data1 === "string") {
                      if (!pattern1.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.factor',
                          schemaPath: '#/allOf/1/properties/factor/pattern',
                          params: {
                            pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                          },
                          message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                        }];
                        return false;
                      }
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._factor === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._factor, (dataPath || '') + '._factor', data, '_factor', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.lowerLimit;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.lowerLimit',
                            schemaPath: '#/allOf/1/properties/lowerLimit/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.lowerLimit',
                              schemaPath: '#/allOf/1/properties/lowerLimit/pattern',
                              params: {
                                pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                              },
                              message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._lowerLimit === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._lowerLimit, (dataPath || '') + '._lowerLimit', data, '_lowerLimit', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.upperLimit;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.upperLimit',
                                schemaPath: '#/allOf/1/properties/upperLimit/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern1.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.upperLimit',
                                  schemaPath: '#/allOf/1/properties/upperLimit/pattern',
                                  params: {
                                    pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                  },
                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._upperLimit === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._upperLimit, (dataPath || '') + '._upperLimit', data, '_upperLimit', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data1 = data.dimensions;
                              if (data1 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data1 !== "number") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.dimensions',
                                    schemaPath: '#/allOf/1/properties/dimensions/type',
                                    params: {
                                      type: 'number'
                                    },
                                    message: 'should be number'
                                  }];
                                  return false;
                                }
                                if (typeof data1 === "string") {
                                  if (!pattern10.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.dimensions',
                                      schemaPath: '#/allOf/1/properties/dimensions/pattern',
                                      params: {
                                        pattern: '[1-9][0-9]*'
                                      },
                                      message: 'should match pattern "[1-9][0-9]*"'
                                    }];
                                    return false;
                                  }
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._dimensions === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._dimensions, (dataPath || '') + '._dimensions', data, '_dimensions', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.data === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.data !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.data',
                                        schemaPath: '#/allOf/1/properties/data/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._data === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._data, (dataPath || '') + '._data', data, '_data', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal22.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
      "properties": {
        "origin": {
          "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
          "$ref": "#/definitions/Quantity"
        },
        "period": {
          "description": "The length of time between sampling times, measured in milliseconds.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "factor": {
          "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_factor": {
          "description": "Extensions for factor",
          "$ref": "#/definitions/Element"
        },
        "lowerLimit": {
          "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_lowerLimit": {
          "description": "Extensions for lowerLimit",
          "$ref": "#/definitions/Element"
        },
        "upperLimit": {
          "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_upperLimit": {
          "description": "Extensions for upperLimit",
          "$ref": "#/definitions/Element"
        },
        "dimensions": {
          "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
          "type": "number",
          "pattern": "[1-9][0-9]*"
        },
        "_dimensions": {
          "description": "Extensions for dimensions",
          "$ref": "#/definitions/Element"
        },
        "data": {
          "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
          "type": "string"
        },
        "_data": {
          "description": "Extensions for data",
          "$ref": "#/definitions/Element"
        }
      },
      "required": ["origin"]
    }]
  };
  refVal22.errors = null;
  refVal[22] = refVal22;
  var refVal23 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          if (true) {
            var errs__1 = errors;
            var valid2 = true;
            var data1 = data.type;
            if (data1 === undefined) {
              valid2 = false;
              validate.errors = [{
                keyword: 'required',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/allOf/1/required',
                params: {
                  missingProperty: 'type'
                },
                message: 'should have required property \'type\''
              }];
              return false;
            } else {
              var errs_2 = errors;
              if (Array.isArray(data1)) {
                var errs__2 = errors;
                var valid2;
                for (var i2 = 0; i2 < data1.length; i2++) {
                  var errs_3 = errors;
                  if (!refVal[11](data1[i2], (dataPath || '') + '.type[' + i2 + ']', data1, i2, rootData)) {
                    if (vErrors === null) vErrors = refVal[11].errors;
                    else vErrors = vErrors.concat(refVal[11].errors);
                    errors = vErrors.length;
                  }
                  var valid3 = errors === errs_3;
                  if (!valid3) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.type',
                  schemaPath: '#/allOf/1/properties/type/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.when === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.when !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.when',
                    schemaPath: '#/allOf/1/properties/when/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._when === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._when, (dataPath || '') + '._when', data, '_when', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.whoUri === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.whoUri !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.whoUri',
                        schemaPath: '#/allOf/1/properties/whoUri/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._whoUri === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._whoUri, (dataPath || '') + '._whoUri', data, '_whoUri', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.whoReference === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[8](data.whoReference, (dataPath || '') + '.whoReference', data, 'whoReference', rootData)) {
                          if (vErrors === null) vErrors = refVal[8].errors;
                          else vErrors = vErrors.concat(refVal[8].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data.onBehalfOfUri === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (typeof data.onBehalfOfUri !== "string") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.onBehalfOfUri',
                              schemaPath: '#/allOf/1/properties/onBehalfOfUri/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data._onBehalfOfUri === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[4](data._onBehalfOfUri, (dataPath || '') + '._onBehalfOfUri', data, '_onBehalfOfUri', rootData)) {
                              if (vErrors === null) vErrors = refVal[4].errors;
                              else vErrors = vErrors.concat(refVal[4].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data.onBehalfOfReference === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[8](data.onBehalfOfReference, (dataPath || '') + '.onBehalfOfReference', data, 'onBehalfOfReference', rootData)) {
                                if (vErrors === null) vErrors = refVal[8].errors;
                                else vErrors = vErrors.concat(refVal[8].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data1 = data.contentType;
                              if (data1 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.contentType',
                                      schemaPath: '#/allOf/1/properties/contentType/pattern',
                                      params: {
                                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                      },
                                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.contentType',
                                    schemaPath: '#/allOf/1/properties/contentType/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._contentType === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._contentType, (dataPath || '') + '._contentType', data, '_contentType', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.blob === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.blob !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.blob',
                                        schemaPath: '#/allOf/1/properties/blob/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._blob === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._blob, (dataPath || '') + '._blob', data, '_blob', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal23.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different signature approaches have different utilities.",
      "properties": {
        "type": {
          "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "when": {
          "description": "When the digital signature was signed.",
          "type": "string"
        },
        "_when": {
          "description": "Extensions for when",
          "$ref": "#/definitions/Element"
        },
        "whoUri": {
          "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
          "type": "string"
        },
        "_whoUri": {
          "description": "Extensions for whoUri",
          "$ref": "#/definitions/Element"
        },
        "whoReference": {
          "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
          "$ref": "#/definitions/Reference"
        },
        "onBehalfOfUri": {
          "description": "A reference to an application-usable description of the identity that is represented by the signature.",
          "type": "string"
        },
        "_onBehalfOfUri": {
          "description": "Extensions for onBehalfOfUri",
          "$ref": "#/definitions/Element"
        },
        "onBehalfOfReference": {
          "description": "A reference to an application-usable description of the identity that is represented by the signature.",
          "$ref": "#/definitions/Reference"
        },
        "contentType": {
          "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_contentType": {
          "description": "Extensions for contentType",
          "$ref": "#/definitions/Element"
        },
        "blob": {
          "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
          "type": "string"
        },
        "_blob": {
          "description": "Extensions for blob",
          "$ref": "#/definitions/Element"
        }
      },
      "required": ["type"]
    }]
  };
  refVal23.errors = null;
  refVal[23] = refVal23;
  var refVal24 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.use;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.use.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._use === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.text === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.text !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.text',
                    schemaPath: '#/allOf/1/properties/text/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._text === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.family === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.family !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.family',
                        schemaPath: '#/allOf/1/properties/family/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._family === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._family, (dataPath || '') + '._family', data, '_family', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.given;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (typeof data1[i2] !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.given[' + i2 + ']',
                                schemaPath: '#/allOf/1/properties/given/items/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.given',
                            schemaPath: '#/allOf/1/properties/given/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data._given;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal[4](data1[i2], (dataPath || '') + '._given[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '._given',
                              schemaPath: '#/allOf/1/properties/_given/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.prefix;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (Array.isArray(data1)) {
                              var errs__2 = errors;
                              var valid2;
                              for (var i2 = 0; i2 < data1.length; i2++) {
                                var errs_3 = errors;
                                if (typeof data1[i2] !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.prefix[' + i2 + ']',
                                    schemaPath: '#/allOf/1/properties/prefix/items/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid3 = errors === errs_3;
                                if (!valid3) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.prefix',
                                schemaPath: '#/allOf/1/properties/prefix/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            var data1 = data._prefix;
                            if (data1 === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (Array.isArray(data1)) {
                                var errs__2 = errors;
                                var valid2;
                                for (var i2 = 0; i2 < data1.length; i2++) {
                                  var errs_3 = errors;
                                  if (!refVal[4](data1[i2], (dataPath || '') + '._prefix[' + i2 + ']', data1, i2, rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid3 = errors === errs_3;
                                  if (!valid3) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '._prefix',
                                  schemaPath: '#/allOf/1/properties/_prefix/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data1 = data.suffix;
                              if (data1 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (Array.isArray(data1)) {
                                  var errs__2 = errors;
                                  var valid2;
                                  for (var i2 = 0; i2 < data1.length; i2++) {
                                    var errs_3 = errors;
                                    if (typeof data1[i2] !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.suffix[' + i2 + ']',
                                        schemaPath: '#/allOf/1/properties/suffix/items/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid3 = errors === errs_3;
                                    if (!valid3) break;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.suffix',
                                    schemaPath: '#/allOf/1/properties/suffix/type',
                                    params: {
                                      type: 'array'
                                    },
                                    message: 'should be array'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                var data1 = data._suffix;
                                if (data1 === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (Array.isArray(data1)) {
                                    var errs__2 = errors;
                                    var valid2;
                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                      var errs_3 = errors;
                                      if (!refVal[4](data1[i2], (dataPath || '') + '._suffix[' + i2 + ']', data1, i2, rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid3 = errors === errs_3;
                                      if (!valid3) break;
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '._suffix',
                                      schemaPath: '#/allOf/1/properties/_suffix/type',
                                      params: {
                                        type: 'array'
                                      },
                                      message: 'should be array'
                                    }];
                                    return false;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.period === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal[12](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                      if (vErrors === null) vErrors = refVal[12].errors;
                                      else vErrors = vErrors.concat(refVal[12].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal24.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A human's name with the ability to identify parts and usage.",
      "properties": {
        "use": {
          "description": "Identifies the purpose for this name.",
          "enum": ["usual", "official", "temp", "nickname", "anonymous", "old", "maiden"],
          "type": "string"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A full text representation of the name.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "family": {
          "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
          "type": "string"
        },
        "_family": {
          "description": "Extensions for family",
          "$ref": "#/definitions/Element"
        },
        "given": {
          "description": "Given name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_given": {
          "description": "Extensions for given",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "prefix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_prefix": {
          "description": "Extensions for prefix",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "suffix": {
          "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_suffix": {
          "description": "Extensions for suffix",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "period": {
          "description": "Indicates the period of time when this name was valid for the named person.",
          "$ref": "#/definitions/Period"
        }
      }
    }]
  };
  refVal24.errors = null;
  refVal[24] = refVal24;
  var refVal25 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.use;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.use.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.use',
                schemaPath: '#/allOf/1/properties/use/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._use === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.type;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/allOf/1/properties/type/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var schema2 = validate.schema.allOf[1].properties.type.enum;
                var valid2;
                valid2 = false;
                for (var i2 = 0; i2 < schema2.length; i2++)
                  if (equal(data1, schema2[i2])) {
                    valid2 = true;
                    break;
                  } if (!valid2) {
                  validate.errors = [{
                    keyword: 'enum',
                    dataPath: (dataPath || '') + '.type',
                    schemaPath: '#/allOf/1/properties/type/enum',
                    params: {
                      allowedValues: schema2
                    },
                    message: 'should be equal to one of the allowed values'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._type === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.text === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.text !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.text',
                        schemaPath: '#/allOf/1/properties/text/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._text === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.line;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (typeof data1[i2] !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.line[' + i2 + ']',
                                schemaPath: '#/allOf/1/properties/line/items/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.line',
                            schemaPath: '#/allOf/1/properties/line/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data._line;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal[4](data1[i2], (dataPath || '') + '._line[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '._line',
                              schemaPath: '#/allOf/1/properties/_line/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.city === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.city !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.city',
                                schemaPath: '#/allOf/1/properties/city/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._city === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._city, (dataPath || '') + '._city', data, '_city', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.district === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.district !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.district',
                                    schemaPath: '#/allOf/1/properties/district/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._district === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._district, (dataPath || '') + '._district', data, '_district', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.state === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.state !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.state',
                                        schemaPath: '#/allOf/1/properties/state/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._state === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._state, (dataPath || '') + '._state', data, '_state', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.postalCode === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data.postalCode !== "string") {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.postalCode',
                                            schemaPath: '#/allOf/1/properties/postalCode/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._postalCode === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._postalCode, (dataPath || '') + '._postalCode', data, '_postalCode', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data.country === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data.country !== "string") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.country',
                                                schemaPath: '#/allOf/1/properties/country/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._country === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._country, (dataPath || '') + '._country', data, '_country', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              if (data.period === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (!refVal[12](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[12].errors;
                                                  else vErrors = vErrors.concat(refVal[12].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal25.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
      "properties": {
        "use": {
          "description": "The purpose of this address.",
          "enum": ["home", "work", "temp", "old"],
          "type": "string"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
          "enum": ["postal", "physical", "both"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "A full text representation of the address.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "line": {
          "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_line": {
          "description": "Extensions for line",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "city": {
          "description": "The name of the city, town, village or other community or delivery center.",
          "type": "string"
        },
        "_city": {
          "description": "Extensions for city",
          "$ref": "#/definitions/Element"
        },
        "district": {
          "description": "The name of the administrative area (county).",
          "type": "string"
        },
        "_district": {
          "description": "Extensions for district",
          "$ref": "#/definitions/Element"
        },
        "state": {
          "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).",
          "type": "string"
        },
        "_state": {
          "description": "Extensions for state",
          "$ref": "#/definitions/Element"
        },
        "postalCode": {
          "description": "A postal code designating a region defined by the postal service.",
          "type": "string"
        },
        "_postalCode": {
          "description": "Extensions for postalCode",
          "$ref": "#/definitions/Element"
        },
        "country": {
          "description": "Country - a nation as commonly understood or generally accepted.",
          "type": "string"
        },
        "_country": {
          "description": "Extensions for country",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when address was/is in use.",
          "$ref": "#/definitions/Period"
        }
      }
    }]
  };
  refVal25.errors = null;
  refVal[25] = refVal25;
  var refVal26 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.system;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.system',
                schemaPath: '#/allOf/1/properties/system/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.system.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.system',
                schemaPath: '#/allOf/1/properties/system/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._system === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._system, (dataPath || '') + '._system', data, '_system', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.value === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.value !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.value',
                    schemaPath: '#/allOf/1/properties/value/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._value === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._value, (dataPath || '') + '._value', data, '_value', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.use;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.use',
                        schemaPath: '#/allOf/1/properties/use/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var schema2 = validate.schema.allOf[1].properties.use.enum;
                    var valid2;
                    valid2 = false;
                    for (var i2 = 0; i2 < schema2.length; i2++)
                      if (equal(data1, schema2[i2])) {
                        valid2 = true;
                        break;
                      } if (!valid2) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.use',
                        schemaPath: '#/allOf/1/properties/use/enum',
                        params: {
                          allowedValues: schema2
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._use === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.rank;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.rank',
                            schemaPath: '#/allOf/1/properties/rank/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern10.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.rank',
                              schemaPath: '#/allOf/1/properties/rank/pattern',
                              params: {
                                pattern: '[1-9][0-9]*'
                              },
                              message: 'should match pattern "[1-9][0-9]*"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._rank === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._rank, (dataPath || '') + '._rank', data, '_rank', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.period === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[12](data.period, (dataPath || '') + '.period', data, 'period', rootData)) {
                              if (vErrors === null) vErrors = refVal[12].errors;
                              else vErrors = vErrors.concat(refVal[12].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal26.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
      "properties": {
        "system": {
          "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
          "enum": ["phone", "fax", "email", "pager", "url", "sms", "other"],
          "type": "string"
        },
        "_system": {
          "description": "Extensions for system",
          "$ref": "#/definitions/Element"
        },
        "value": {
          "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
          "type": "string"
        },
        "_value": {
          "description": "Extensions for value",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Identifies the purpose for the contact point.",
          "enum": ["home", "work", "temp", "old", "mobile"],
          "type": "string"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "rank": {
          "description": "Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.",
          "type": "number",
          "pattern": "[1-9][0-9]*"
        },
        "_rank": {
          "description": "Extensions for rank",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Time period when the contact point was/is in use.",
          "$ref": "#/definitions/Period"
        }
      }
    }]
  };
  refVal26.errors = null;
  refVal[26] = refVal26;
  var refVal27 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.event;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (Array.isArray(data1)) {
              var errs__2 = errors;
              var valid2;
              for (var i2 = 0; i2 < data1.length; i2++) {
                var data2 = data1[i2];
                var errs_3 = errors;
                if (typeof data2 === "string") {
                  if (!pattern3.test(data2)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.event[' + i2 + ']',
                      schemaPath: '#/allOf/1/properties/event/items/pattern',
                      params: {
                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                      },
                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.event[' + i2 + ']',
                    schemaPath: '#/allOf/1/properties/event/items/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid3 = errors === errs_3;
                if (!valid3) break;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.event',
                schemaPath: '#/allOf/1/properties/event/type',
                params: {
                  type: 'array'
                },
                message: 'should be array'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            var data1 = data._event;
            if (data1 === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (Array.isArray(data1)) {
                var errs__2 = errors;
                var valid2;
                for (var i2 = 0; i2 < data1.length; i2++) {
                  var errs_3 = errors;
                  if (!refVal[4](data1[i2], (dataPath || '') + '._event[' + i2 + ']', data1, i2, rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid3 = errors === errs_3;
                  if (!valid3) break;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '._event',
                  schemaPath: '#/allOf/1/properties/_event/type',
                  params: {
                    type: 'array'
                  },
                  message: 'should be array'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.repeat === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal28(data.repeat, (dataPath || '') + '.repeat', data, 'repeat', rootData)) {
                  if (vErrors === null) vErrors = refVal28.errors;
                  else vErrors = vErrors.concat(refVal28.errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.code === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[10](data.code, (dataPath || '') + '.code', data, 'code', rootData)) {
                    if (vErrors === null) vErrors = refVal[10].errors;
                    else vErrors = vErrors.concat(refVal[10].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal27.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "event": {
          "description": "Identifies specific times when the event occurs.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
          }
        },
        "_event": {
          "description": "Extensions for event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "repeat": {
          "description": "A set of rules that describe when the event is scheduled.",
          "$ref": "#/definitions/Timing_Repeat"
        },
        "code": {
          "description": "A code for the timing schedule. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
          "$ref": "#/definitions/CodeableConcept"
        }
      }
    }]
  };
  refVal27.errors = null;
  refVal[27] = refVal27;
  var refVal28 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.boundsDuration === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (!refVal[15](data.boundsDuration, (dataPath || '') + '.boundsDuration', data, 'boundsDuration', rootData)) {
              if (vErrors === null) vErrors = refVal[15].errors;
              else vErrors = vErrors.concat(refVal[15].errors);
              errors = vErrors.length;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.boundsRange === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[20](data.boundsRange, (dataPath || '') + '.boundsRange', data, 'boundsRange', rootData)) {
                if (vErrors === null) vErrors = refVal[20].errors;
                else vErrors = vErrors.concat(refVal[20].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.boundsPeriod === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[12](data.boundsPeriod, (dataPath || '') + '.boundsPeriod', data, 'boundsPeriod', rootData)) {
                  if (vErrors === null) vErrors = refVal[12].errors;
                  else vErrors = vErrors.concat(refVal[12].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                var data1 = data.count;
                if (data1 === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data1 !== "number") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.count',
                      schemaPath: '#/allOf/1/properties/count/type',
                      params: {
                        type: 'number'
                      },
                      message: 'should be number'
                    }];
                    return false;
                  }
                  if (typeof data1 === "string") {
                    if (!pattern0.test(data1)) {
                      validate.errors = [{
                        keyword: 'pattern',
                        dataPath: (dataPath || '') + '.count',
                        schemaPath: '#/allOf/1/properties/count/pattern',
                        params: {
                          pattern: '-?([0]|([1-9][0-9]*))'
                        },
                        message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                      }];
                      return false;
                    }
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data._count === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[4](data._count, (dataPath || '') + '._count', data, '_count', rootData)) {
                      if (vErrors === null) vErrors = refVal[4].errors;
                      else vErrors = vErrors.concat(refVal[4].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    var data1 = data.countMax;
                    if (data1 === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data1 !== "number") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.countMax',
                          schemaPath: '#/allOf/1/properties/countMax/type',
                          params: {
                            type: 'number'
                          },
                          message: 'should be number'
                        }];
                        return false;
                      }
                      if (typeof data1 === "string") {
                        if (!pattern0.test(data1)) {
                          validate.errors = [{
                            keyword: 'pattern',
                            dataPath: (dataPath || '') + '.countMax',
                            schemaPath: '#/allOf/1/properties/countMax/pattern',
                            params: {
                              pattern: '-?([0]|([1-9][0-9]*))'
                            },
                            message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                          }];
                          return false;
                        }
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._countMax === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._countMax, (dataPath || '') + '._countMax', data, '_countMax', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data.duration;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (typeof data1 !== "number") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.duration',
                              schemaPath: '#/allOf/1/properties/duration/type',
                              params: {
                                type: 'number'
                              },
                              message: 'should be number'
                            }];
                            return false;
                          }
                          if (typeof data1 === "string") {
                            if (!pattern1.test(data1)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.duration',
                                schemaPath: '#/allOf/1/properties/duration/pattern',
                                params: {
                                  pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                },
                                message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                              }];
                              return false;
                            }
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data._duration === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[4](data._duration, (dataPath || '') + '._duration', data, '_duration', rootData)) {
                              if (vErrors === null) vErrors = refVal[4].errors;
                              else vErrors = vErrors.concat(refVal[4].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            var data1 = data.durationMax;
                            if (data1 === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (typeof data1 !== "number") {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.durationMax',
                                  schemaPath: '#/allOf/1/properties/durationMax/type',
                                  params: {
                                    type: 'number'
                                  },
                                  message: 'should be number'
                                }];
                                return false;
                              }
                              if (typeof data1 === "string") {
                                if (!pattern1.test(data1)) {
                                  validate.errors = [{
                                    keyword: 'pattern',
                                    dataPath: (dataPath || '') + '.durationMax',
                                    schemaPath: '#/allOf/1/properties/durationMax/pattern',
                                    params: {
                                      pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                    },
                                    message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                  }];
                                  return false;
                                }
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data._durationMax === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (!refVal[4](data._durationMax, (dataPath || '') + '._durationMax', data, '_durationMax', rootData)) {
                                  if (vErrors === null) vErrors = refVal[4].errors;
                                  else vErrors = vErrors.concat(refVal[4].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                var data1 = data.durationUnit;
                                if (data1 === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (typeof data1 !== "string") {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.durationUnit',
                                      schemaPath: '#/allOf/1/properties/durationUnit/type',
                                      params: {
                                        type: 'string'
                                      },
                                      message: 'should be string'
                                    }];
                                    return false;
                                  }
                                  var schema2 = validate.schema.allOf[1].properties.durationUnit.enum;
                                  var valid2;
                                  valid2 = false;
                                  for (var i2 = 0; i2 < schema2.length; i2++)
                                    if (equal(data1, schema2[i2])) {
                                      valid2 = true;
                                      break;
                                    } if (!valid2) {
                                    validate.errors = [{
                                      keyword: 'enum',
                                      dataPath: (dataPath || '') + '.durationUnit',
                                      schemaPath: '#/allOf/1/properties/durationUnit/enum',
                                      params: {
                                        allowedValues: schema2
                                      },
                                      message: 'should be equal to one of the allowed values'
                                    }];
                                    return false;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data._durationUnit === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal[4](data._durationUnit, (dataPath || '') + '._durationUnit', data, '_durationUnit', rootData)) {
                                      if (vErrors === null) vErrors = refVal[4].errors;
                                      else vErrors = vErrors.concat(refVal[4].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    var data1 = data.frequency;
                                    if (data1 === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (typeof data1 !== "number") {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '.frequency',
                                          schemaPath: '#/allOf/1/properties/frequency/type',
                                          params: {
                                            type: 'number'
                                          },
                                          message: 'should be number'
                                        }];
                                        return false;
                                      }
                                      if (typeof data1 === "string") {
                                        if (!pattern0.test(data1)) {
                                          validate.errors = [{
                                            keyword: 'pattern',
                                            dataPath: (dataPath || '') + '.frequency',
                                            schemaPath: '#/allOf/1/properties/frequency/pattern',
                                            params: {
                                              pattern: '-?([0]|([1-9][0-9]*))'
                                            },
                                            message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                          }];
                                          return false;
                                        }
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data._frequency === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (!refVal[4](data._frequency, (dataPath || '') + '._frequency', data, '_frequency', rootData)) {
                                          if (vErrors === null) vErrors = refVal[4].errors;
                                          else vErrors = vErrors.concat(refVal[4].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        var data1 = data.frequencyMax;
                                        if (data1 === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (typeof data1 !== "number") {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '.frequencyMax',
                                              schemaPath: '#/allOf/1/properties/frequencyMax/type',
                                              params: {
                                                type: 'number'
                                              },
                                              message: 'should be number'
                                            }];
                                            return false;
                                          }
                                          if (typeof data1 === "string") {
                                            if (!pattern0.test(data1)) {
                                              validate.errors = [{
                                                keyword: 'pattern',
                                                dataPath: (dataPath || '') + '.frequencyMax',
                                                schemaPath: '#/allOf/1/properties/frequencyMax/pattern',
                                                params: {
                                                  pattern: '-?([0]|([1-9][0-9]*))'
                                                },
                                                message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                              }];
                                              return false;
                                            }
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data._frequencyMax === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (!refVal[4](data._frequencyMax, (dataPath || '') + '._frequencyMax', data, '_frequencyMax', rootData)) {
                                              if (vErrors === null) vErrors = refVal[4].errors;
                                              else vErrors = vErrors.concat(refVal[4].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            var data1 = data.period;
                                            if (data1 === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (typeof data1 !== "number") {
                                                validate.errors = [{
                                                  keyword: 'type',
                                                  dataPath: (dataPath || '') + '.period',
                                                  schemaPath: '#/allOf/1/properties/period/type',
                                                  params: {
                                                    type: 'number'
                                                  },
                                                  message: 'should be number'
                                                }];
                                                return false;
                                              }
                                              if (typeof data1 === "string") {
                                                if (!pattern1.test(data1)) {
                                                  validate.errors = [{
                                                    keyword: 'pattern',
                                                    dataPath: (dataPath || '') + '.period',
                                                    schemaPath: '#/allOf/1/properties/period/pattern',
                                                    params: {
                                                      pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                    },
                                                    message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                  }];
                                                  return false;
                                                }
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              if (data._period === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (!refVal[4](data._period, (dataPath || '') + '._period', data, '_period', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[4].errors;
                                                  else vErrors = vErrors.concat(refVal[4].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                var data1 = data.periodMax;
                                                if (data1 === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (typeof data1 !== "number") {
                                                    validate.errors = [{
                                                      keyword: 'type',
                                                      dataPath: (dataPath || '') + '.periodMax',
                                                      schemaPath: '#/allOf/1/properties/periodMax/type',
                                                      params: {
                                                        type: 'number'
                                                      },
                                                      message: 'should be number'
                                                    }];
                                                    return false;
                                                  }
                                                  if (typeof data1 === "string") {
                                                    if (!pattern1.test(data1)) {
                                                      validate.errors = [{
                                                        keyword: 'pattern',
                                                        dataPath: (dataPath || '') + '.periodMax',
                                                        schemaPath: '#/allOf/1/properties/periodMax/pattern',
                                                        params: {
                                                          pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                        },
                                                        message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                      }];
                                                      return false;
                                                    }
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  if (data._periodMax === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (!refVal[4](data._periodMax, (dataPath || '') + '._periodMax', data, '_periodMax', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[4].errors;
                                                      else vErrors = vErrors.concat(refVal[4].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    var data1 = data.periodUnit;
                                                    if (data1 === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (typeof data1 !== "string") {
                                                        validate.errors = [{
                                                          keyword: 'type',
                                                          dataPath: (dataPath || '') + '.periodUnit',
                                                          schemaPath: '#/allOf/1/properties/periodUnit/type',
                                                          params: {
                                                            type: 'string'
                                                          },
                                                          message: 'should be string'
                                                        }];
                                                        return false;
                                                      }
                                                      var schema2 = validate.schema.allOf[1].properties.periodUnit.enum;
                                                      var valid2;
                                                      valid2 = false;
                                                      for (var i2 = 0; i2 < schema2.length; i2++)
                                                        if (equal(data1, schema2[i2])) {
                                                          valid2 = true;
                                                          break;
                                                        } if (!valid2) {
                                                        validate.errors = [{
                                                          keyword: 'enum',
                                                          dataPath: (dataPath || '') + '.periodUnit',
                                                          schemaPath: '#/allOf/1/properties/periodUnit/enum',
                                                          params: {
                                                            allowedValues: schema2
                                                          },
                                                          message: 'should be equal to one of the allowed values'
                                                        }];
                                                        return false;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      if (data._periodUnit === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (!refVal[4](data._periodUnit, (dataPath || '') + '._periodUnit', data, '_periodUnit', rootData)) {
                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        var data1 = data.dayOfWeek;
                                                        if (data1 === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (Array.isArray(data1)) {
                                                            var errs__2 = errors;
                                                            var valid2;
                                                            for (var i2 = 0; i2 < data1.length; i2++) {
                                                              var data2 = data1[i2];
                                                              var errs_3 = errors;
                                                              if (typeof data2 === "string") {
                                                                if (!pattern5.test(data2)) {
                                                                  validate.errors = [{
                                                                    keyword: 'pattern',
                                                                    dataPath: (dataPath || '') + '.dayOfWeek[' + i2 + ']',
                                                                    schemaPath: '#/allOf/1/properties/dayOfWeek/items/pattern',
                                                                    params: {
                                                                      pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                                    },
                                                                    message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                                  }];
                                                                  return false;
                                                                }
                                                              } else {
                                                                validate.errors = [{
                                                                  keyword: 'type',
                                                                  dataPath: (dataPath || '') + '.dayOfWeek[' + i2 + ']',
                                                                  schemaPath: '#/allOf/1/properties/dayOfWeek/items/type',
                                                                  params: {
                                                                    type: 'string'
                                                                  },
                                                                  message: 'should be string'
                                                                }];
                                                                return false;
                                                              }
                                                              var valid3 = errors === errs_3;
                                                              if (!valid3) break;
                                                            }
                                                          } else {
                                                            validate.errors = [{
                                                              keyword: 'type',
                                                              dataPath: (dataPath || '') + '.dayOfWeek',
                                                              schemaPath: '#/allOf/1/properties/dayOfWeek/type',
                                                              params: {
                                                                type: 'array'
                                                              },
                                                              message: 'should be array'
                                                            }];
                                                            return false;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          var data1 = data._dayOfWeek;
                                                          if (data1 === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (Array.isArray(data1)) {
                                                              var errs__2 = errors;
                                                              var valid2;
                                                              for (var i2 = 0; i2 < data1.length; i2++) {
                                                                var errs_3 = errors;
                                                                if (!refVal[4](data1[i2], (dataPath || '') + '._dayOfWeek[' + i2 + ']', data1, i2, rootData)) {
                                                                  if (vErrors === null) vErrors = refVal[4].errors;
                                                                  else vErrors = vErrors.concat(refVal[4].errors);
                                                                  errors = vErrors.length;
                                                                }
                                                                var valid3 = errors === errs_3;
                                                                if (!valid3) break;
                                                              }
                                                            } else {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '._dayOfWeek',
                                                                schemaPath: '#/allOf/1/properties/_dayOfWeek/type',
                                                                params: {
                                                                  type: 'array'
                                                                },
                                                                message: 'should be array'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            var data1 = data.timeOfDay;
                                                            if (data1 === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (Array.isArray(data1)) {
                                                                var errs__2 = errors;
                                                                var valid2;
                                                                for (var i2 = 0; i2 < data1.length; i2++) {
                                                                  var data2 = data1[i2];
                                                                  var errs_3 = errors;
                                                                  if (typeof data2 === "string") {
                                                                    if (!pattern4.test(data2)) {
                                                                      validate.errors = [{
                                                                        keyword: 'pattern',
                                                                        dataPath: (dataPath || '') + '.timeOfDay[' + i2 + ']',
                                                                        schemaPath: '#/allOf/1/properties/timeOfDay/items/pattern',
                                                                        params: {
                                                                          pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                                        },
                                                                        message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                  } else {
                                                                    validate.errors = [{
                                                                      keyword: 'type',
                                                                      dataPath: (dataPath || '') + '.timeOfDay[' + i2 + ']',
                                                                      schemaPath: '#/allOf/1/properties/timeOfDay/items/type',
                                                                      params: {
                                                                        type: 'string'
                                                                      },
                                                                      message: 'should be string'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                  var valid3 = errors === errs_3;
                                                                  if (!valid3) break;
                                                                }
                                                              } else {
                                                                validate.errors = [{
                                                                  keyword: 'type',
                                                                  dataPath: (dataPath || '') + '.timeOfDay',
                                                                  schemaPath: '#/allOf/1/properties/timeOfDay/type',
                                                                  params: {
                                                                    type: 'array'
                                                                  },
                                                                  message: 'should be array'
                                                                }];
                                                                return false;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              var data1 = data._timeOfDay;
                                                              if (data1 === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (Array.isArray(data1)) {
                                                                  var errs__2 = errors;
                                                                  var valid2;
                                                                  for (var i2 = 0; i2 < data1.length; i2++) {
                                                                    var errs_3 = errors;
                                                                    if (!refVal[4](data1[i2], (dataPath || '') + '._timeOfDay[' + i2 + ']', data1, i2, rootData)) {
                                                                      if (vErrors === null) vErrors = refVal[4].errors;
                                                                      else vErrors = vErrors.concat(refVal[4].errors);
                                                                      errors = vErrors.length;
                                                                    }
                                                                    var valid3 = errors === errs_3;
                                                                    if (!valid3) break;
                                                                  }
                                                                } else {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '._timeOfDay',
                                                                    schemaPath: '#/allOf/1/properties/_timeOfDay/type',
                                                                    params: {
                                                                      type: 'array'
                                                                    },
                                                                    message: 'should be array'
                                                                  }];
                                                                  return false;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                var data1 = data.when;
                                                                if (data1 === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (Array.isArray(data1)) {
                                                                    var errs__2 = errors;
                                                                    var valid2;
                                                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                                                      var errs_3 = errors;
                                                                      if (typeof data1[i2] !== "string") {
                                                                        validate.errors = [{
                                                                          keyword: 'type',
                                                                          dataPath: (dataPath || '') + '.when[' + i2 + ']',
                                                                          schemaPath: '#/allOf/1/properties/when/items/type',
                                                                          params: {
                                                                            type: 'string'
                                                                          },
                                                                          message: 'should be string'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                      var valid3 = errors === errs_3;
                                                                      if (!valid3) break;
                                                                    }
                                                                  } else {
                                                                    validate.errors = [{
                                                                      keyword: 'type',
                                                                      dataPath: (dataPath || '') + '.when',
                                                                      schemaPath: '#/allOf/1/properties/when/type',
                                                                      params: {
                                                                        type: 'array'
                                                                      },
                                                                      message: 'should be array'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                  if (errors === errs_2) {
                                                                    var schema2 = validate.schema.allOf[1].properties.when.enum;
                                                                    var valid2;
                                                                    valid2 = false;
                                                                    for (var i2 = 0; i2 < schema2.length; i2++)
                                                                      if (equal(data1, schema2[i2])) {
                                                                        valid2 = true;
                                                                        break;
                                                                      } if (!valid2) {
                                                                      validate.errors = [{
                                                                        keyword: 'enum',
                                                                        dataPath: (dataPath || '') + '.when',
                                                                        schemaPath: '#/allOf/1/properties/when/enum',
                                                                        params: {
                                                                          allowedValues: schema2
                                                                        },
                                                                        message: 'should be equal to one of the allowed values'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  var data1 = data._when;
                                                                  if (data1 === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (Array.isArray(data1)) {
                                                                      var errs__2 = errors;
                                                                      var valid2;
                                                                      for (var i2 = 0; i2 < data1.length; i2++) {
                                                                        var errs_3 = errors;
                                                                        if (!refVal[4](data1[i2], (dataPath || '') + '._when[' + i2 + ']', data1, i2, rootData)) {
                                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                                          errors = vErrors.length;
                                                                        }
                                                                        var valid3 = errors === errs_3;
                                                                        if (!valid3) break;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '._when',
                                                                        schemaPath: '#/allOf/1/properties/_when/type',
                                                                        params: {
                                                                          type: 'array'
                                                                        },
                                                                        message: 'should be array'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    var data1 = data.offset;
                                                                    if (data1 === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (typeof data1 !== "number") {
                                                                        validate.errors = [{
                                                                          keyword: 'type',
                                                                          dataPath: (dataPath || '') + '.offset',
                                                                          schemaPath: '#/allOf/1/properties/offset/type',
                                                                          params: {
                                                                            type: 'number'
                                                                          },
                                                                          message: 'should be number'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                      if (typeof data1 === "string") {
                                                                        if (!pattern9.test(data1)) {
                                                                          validate.errors = [{
                                                                            keyword: 'pattern',
                                                                            dataPath: (dataPath || '') + '.offset',
                                                                            schemaPath: '#/allOf/1/properties/offset/pattern',
                                                                            params: {
                                                                              pattern: '[0]|([1-9][0-9]*)'
                                                                            },
                                                                            message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      if (data._offset === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (!refVal[4](data._offset, (dataPath || '') + '._offset', data, '_offset', rootData)) {
                                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                                          errors = vErrors.length;
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal28.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "properties": {
        "boundsDuration": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Duration"
        },
        "boundsRange": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Range"
        },
        "boundsPeriod": {
          "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "$ref": "#/definitions/Period"
        },
        "count": {
          "description": "A total count of the desired number of repetitions.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_count": {
          "description": "Extensions for count",
          "$ref": "#/definitions/Element"
        },
        "countMax": {
          "description": "A maximum value for the count of the desired repetitions (e.g. do something 6-8 times).",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_countMax": {
          "description": "Extensions for countMax",
          "$ref": "#/definitions/Element"
        },
        "duration": {
          "description": "How long this thing happens for when it happens.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_duration": {
          "description": "Extensions for duration",
          "$ref": "#/definitions/Element"
        },
        "durationMax": {
          "description": "The upper limit of how long this thing happens for when it happens.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_durationMax": {
          "description": "Extensions for durationMax",
          "$ref": "#/definitions/Element"
        },
        "durationUnit": {
          "description": "The units of time for the duration, in UCUM units.",
          "enum": ["s", "min", "h", "d", "wk", "mo", "a"],
          "type": "string"
        },
        "_durationUnit": {
          "description": "Extensions for durationUnit",
          "$ref": "#/definitions/Element"
        },
        "frequency": {
          "description": "The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_frequency": {
          "description": "Extensions for frequency",
          "$ref": "#/definitions/Element"
        },
        "frequencyMax": {
          "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_frequencyMax": {
          "description": "Extensions for frequencyMax",
          "$ref": "#/definitions/Element"
        },
        "period": {
          "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_period": {
          "description": "Extensions for period",
          "$ref": "#/definitions/Element"
        },
        "periodMax": {
          "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
        },
        "_periodMax": {
          "description": "Extensions for periodMax",
          "$ref": "#/definitions/Element"
        },
        "periodUnit": {
          "description": "The units of time for the period in UCUM units.",
          "enum": ["s", "min", "h", "d", "wk", "mo", "a"],
          "type": "string"
        },
        "_periodUnit": {
          "description": "Extensions for periodUnit",
          "$ref": "#/definitions/Element"
        },
        "dayOfWeek": {
          "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
          }
        },
        "_dayOfWeek": {
          "description": "Extensions for dayOfWeek",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "timeOfDay": {
          "description": "Specified time of day for action to take place.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"
          }
        },
        "_timeOfDay": {
          "description": "Extensions for timeOfDay",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "when": {
          "description": "Real world events that the occurrence of the event should be tied to.",
          "enum": ["MORN", "AFT", "EVE", "NIGHT", "PHS", "HS", "WAKE", "C", "CM", "CD", "CV", "AC", "ACM", "ACD", "ACV", "PC", "PCM", "PCD", "PCV"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_when": {
          "description": "Extensions for when",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "offset": {
          "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
          "type": "number",
          "pattern": "[0]|([1-9][0-9]*)"
        },
        "_offset": {
          "description": "Extensions for offset",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal28.errors = null;
  refVal[28] = refVal28;
  var refVal29 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.versionId;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern8.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.versionId',
                  schemaPath: '#/allOf/1/properties/versionId/pattern',
                  params: {
                    pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                  },
                  message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.versionId',
                schemaPath: '#/allOf/1/properties/versionId/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._versionId === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._versionId, (dataPath || '') + '._versionId', data, '_versionId', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.lastUpdated === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.lastUpdated !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.lastUpdated',
                    schemaPath: '#/allOf/1/properties/lastUpdated/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._lastUpdated === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._lastUpdated, (dataPath || '') + '._lastUpdated', data, '_lastUpdated', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.profile;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (typeof data1[i2] !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.profile[' + i2 + ']',
                            schemaPath: '#/allOf/1/properties/profile/items/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.profile',
                        schemaPath: '#/allOf/1/properties/profile/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    var data1 = data._profile;
                    if (data1 === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (Array.isArray(data1)) {
                        var errs__2 = errors;
                        var valid2;
                        for (var i2 = 0; i2 < data1.length; i2++) {
                          var errs_3 = errors;
                          if (!refVal[4](data1[i2], (dataPath || '') + '._profile[' + i2 + ']', data1, i2, rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid3 = errors === errs_3;
                          if (!valid3) break;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '._profile',
                          schemaPath: '#/allOf/1/properties/_profile/type',
                          params: {
                            type: 'array'
                          },
                          message: 'should be array'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.security;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (!refVal[11](data1[i2], (dataPath || '') + '.security[' + i2 + ']', data1, i2, rootData)) {
                              if (vErrors === null) vErrors = refVal[11].errors;
                              else vErrors = vErrors.concat(refVal[11].errors);
                              errors = vErrors.length;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.security',
                            schemaPath: '#/allOf/1/properties/security/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data.tag;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal[11](data1[i2], (dataPath || '') + '.tag[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal[11].errors;
                                else vErrors = vErrors.concat(refVal[11].errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.tag',
                              schemaPath: '#/allOf/1/properties/tag/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal29.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.",
      "properties": {
        "versionId": {
          "description": "The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.",
          "type": "string",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
        },
        "_versionId": {
          "description": "Extensions for versionId",
          "$ref": "#/definitions/Element"
        },
        "lastUpdated": {
          "description": "When the resource last changed - e.g. when the version changed.",
          "type": "string"
        },
        "_lastUpdated": {
          "description": "Extensions for lastUpdated",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_profile": {
          "description": "Extensions for profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "security": {
          "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "tag": {
          "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        }
      }
    }]
  };
  refVal29.errors = null;
  refVal[29] = refVal29;
  var refVal30 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.path === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.path !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.path',
                schemaPath: '#/allOf/1/properties/path/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._path === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.representation;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (Array.isArray(data1)) {
                  var errs__2 = errors;
                  var valid2;
                  for (var i2 = 0; i2 < data1.length; i2++) {
                    var errs_3 = errors;
                    if (typeof data1[i2] !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.representation[' + i2 + ']',
                        schemaPath: '#/allOf/1/properties/representation/items/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid3 = errors === errs_3;
                    if (!valid3) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.representation',
                    schemaPath: '#/allOf/1/properties/representation/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                if (errors === errs_2) {
                  var schema2 = validate.schema.allOf[1].properties.representation.enum;
                  var valid2;
                  valid2 = false;
                  for (var i2 = 0; i2 < schema2.length; i2++)
                    if (equal(data1, schema2[i2])) {
                      valid2 = true;
                      break;
                    } if (!valid2) {
                    validate.errors = [{
                      keyword: 'enum',
                      dataPath: (dataPath || '') + '.representation',
                      schemaPath: '#/allOf/1/properties/representation/enum',
                      params: {
                        allowedValues: schema2
                      },
                      message: 'should be equal to one of the allowed values'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                var data1 = data._representation;
                if (data1 === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (Array.isArray(data1)) {
                    var errs__2 = errors;
                    var valid2;
                    for (var i2 = 0; i2 < data1.length; i2++) {
                      var errs_3 = errors;
                      if (!refVal[4](data1[i2], (dataPath || '') + '._representation[' + i2 + ']', data1, i2, rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid3 = errors === errs_3;
                      if (!valid3) break;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '._representation',
                      schemaPath: '#/allOf/1/properties/_representation/type',
                      params: {
                        type: 'array'
                      },
                      message: 'should be array'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.sliceName === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.sliceName !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.sliceName',
                        schemaPath: '#/allOf/1/properties/sliceName/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._sliceName === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._sliceName, (dataPath || '') + '._sliceName', data, '_sliceName', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.label === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.label !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.label',
                            schemaPath: '#/allOf/1/properties/label/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._label === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._label, (dataPath || '') + '._label', data, '_label', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.code;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (Array.isArray(data1)) {
                              var errs__2 = errors;
                              var valid2;
                              for (var i2 = 0; i2 < data1.length; i2++) {
                                var errs_3 = errors;
                                if (!refVal[11](data1[i2], (dataPath || '') + '.code[' + i2 + ']', data1, i2, rootData)) {
                                  if (vErrors === null) vErrors = refVal[11].errors;
                                  else vErrors = vErrors.concat(refVal[11].errors);
                                  errors = vErrors.length;
                                }
                                var valid3 = errors === errs_3;
                                if (!valid3) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.code',
                                schemaPath: '#/allOf/1/properties/code/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data.slicing === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal31(data.slicing, (dataPath || '') + '.slicing', data, 'slicing', rootData)) {
                                if (vErrors === null) vErrors = refVal31.errors;
                                else vErrors = vErrors.concat(refVal31.errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.short === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.short !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.short',
                                    schemaPath: '#/allOf/1/properties/short/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._short === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._short, (dataPath || '') + '._short', data, '_short', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.definition === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.definition !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.definition',
                                        schemaPath: '#/allOf/1/properties/definition/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._definition === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._definition, (dataPath || '') + '._definition', data, '_definition', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.comment === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data.comment !== "string") {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.comment',
                                            schemaPath: '#/allOf/1/properties/comment/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._comment === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._comment, (dataPath || '') + '._comment', data, '_comment', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data.requirements === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data.requirements !== "string") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.requirements',
                                                schemaPath: '#/allOf/1/properties/requirements/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._requirements === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._requirements, (dataPath || '') + '._requirements', data, '_requirements', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              var data1 = data.alias;
                                              if (data1 === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (Array.isArray(data1)) {
                                                  var errs__2 = errors;
                                                  var valid2;
                                                  for (var i2 = 0; i2 < data1.length; i2++) {
                                                    var errs_3 = errors;
                                                    if (typeof data1[i2] !== "string") {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.alias[' + i2 + ']',
                                                        schemaPath: '#/allOf/1/properties/alias/items/type',
                                                        params: {
                                                          type: 'string'
                                                        },
                                                        message: 'should be string'
                                                      }];
                                                      return false;
                                                    }
                                                    var valid3 = errors === errs_3;
                                                    if (!valid3) break;
                                                  }
                                                } else {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.alias',
                                                    schemaPath: '#/allOf/1/properties/alias/type',
                                                    params: {
                                                      type: 'array'
                                                    },
                                                    message: 'should be array'
                                                  }];
                                                  return false;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                var data1 = data._alias;
                                                if (data1 === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (Array.isArray(data1)) {
                                                    var errs__2 = errors;
                                                    var valid2;
                                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                                      var errs_3 = errors;
                                                      if (!refVal[4](data1[i2], (dataPath || '') + '._alias[' + i2 + ']', data1, i2, rootData)) {
                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid3 = errors === errs_3;
                                                      if (!valid3) break;
                                                    }
                                                  } else {
                                                    validate.errors = [{
                                                      keyword: 'type',
                                                      dataPath: (dataPath || '') + '._alias',
                                                      schemaPath: '#/allOf/1/properties/_alias/type',
                                                      params: {
                                                        type: 'array'
                                                      },
                                                      message: 'should be array'
                                                    }];
                                                    return false;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  var data1 = data.min;
                                                  if (data1 === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (typeof data1 !== "number") {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.min',
                                                        schemaPath: '#/allOf/1/properties/min/type',
                                                        params: {
                                                          type: 'number'
                                                        },
                                                        message: 'should be number'
                                                      }];
                                                      return false;
                                                    }
                                                    if (typeof data1 === "string") {
                                                      if (!pattern9.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.min',
                                                          schemaPath: '#/allOf/1/properties/min/pattern',
                                                          params: {
                                                            pattern: '[0]|([1-9][0-9]*)'
                                                          },
                                                          message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                        }];
                                                        return false;
                                                      }
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data._min === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (!refVal[4](data._min, (dataPath || '') + '._min', data, '_min', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      if (data.max === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (typeof data.max !== "string") {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.max',
                                                            schemaPath: '#/allOf/1/properties/max/type',
                                                            params: {
                                                              type: 'string'
                                                            },
                                                            message: 'should be string'
                                                          }];
                                                          return false;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        if (data._max === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (!refVal[4](data._max, (dataPath || '') + '._max', data, '_max', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          if (data.base === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (!refVal33(data.base, (dataPath || '') + '.base', data, 'base', rootData)) {
                                                              if (vErrors === null) vErrors = refVal33.errors;
                                                              else vErrors = vErrors.concat(refVal33.errors);
                                                              errors = vErrors.length;
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            if (data.contentReference === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (typeof data.contentReference !== "string") {
                                                                validate.errors = [{
                                                                  keyword: 'type',
                                                                  dataPath: (dataPath || '') + '.contentReference',
                                                                  schemaPath: '#/allOf/1/properties/contentReference/type',
                                                                  params: {
                                                                    type: 'string'
                                                                  },
                                                                  message: 'should be string'
                                                                }];
                                                                return false;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              if (data._contentReference === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (!refVal[4](data._contentReference, (dataPath || '') + '._contentReference', data, '_contentReference', rootData)) {
                                                                  if (vErrors === null) vErrors = refVal[4].errors;
                                                                  else vErrors = vErrors.concat(refVal[4].errors);
                                                                  errors = vErrors.length;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                var data1 = data.type;
                                                                if (data1 === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (Array.isArray(data1)) {
                                                                    var errs__2 = errors;
                                                                    var valid2;
                                                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                                                      var errs_3 = errors;
                                                                      if (!refVal34(data1[i2], (dataPath || '') + '.type[' + i2 + ']', data1, i2, rootData)) {
                                                                        if (vErrors === null) vErrors = refVal34.errors;
                                                                        else vErrors = vErrors.concat(refVal34.errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid3 = errors === errs_3;
                                                                      if (!valid3) break;
                                                                    }
                                                                  } else {
                                                                    validate.errors = [{
                                                                      keyword: 'type',
                                                                      dataPath: (dataPath || '') + '.type',
                                                                      schemaPath: '#/allOf/1/properties/type/type',
                                                                      params: {
                                                                        type: 'array'
                                                                      },
                                                                      message: 'should be array'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  if (data.defaultValueBoolean === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (typeof data.defaultValueBoolean !== "boolean") {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.defaultValueBoolean',
                                                                        schemaPath: '#/allOf/1/properties/defaultValueBoolean/type',
                                                                        params: {
                                                                          type: 'boolean'
                                                                        },
                                                                        message: 'should be boolean'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    if (data._defaultValueBoolean === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (!refVal[4](data._defaultValueBoolean, (dataPath || '') + '._defaultValueBoolean', data, '_defaultValueBoolean', rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      var data1 = data.defaultValueInteger;
                                                                      if (data1 === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (typeof data1 !== "number") {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.defaultValueInteger',
                                                                            schemaPath: '#/allOf/1/properties/defaultValueInteger/type',
                                                                            params: {
                                                                              type: 'number'
                                                                            },
                                                                            message: 'should be number'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        if (typeof data1 === "string") {
                                                                          if (!pattern0.test(data1)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.defaultValueInteger',
                                                                              schemaPath: '#/allOf/1/properties/defaultValueInteger/pattern',
                                                                              params: {
                                                                                pattern: '-?([0]|([1-9][0-9]*))'
                                                                              },
                                                                              message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                      if (valid2) {
                                                                        if (data._defaultValueInteger === undefined) {
                                                                          valid2 = true;
                                                                        } else {
                                                                          var errs_2 = errors;
                                                                          if (!refVal[4](data._defaultValueInteger, (dataPath || '') + '._defaultValueInteger', data, '_defaultValueInteger', rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                        }
                                                                        if (valid2) {
                                                                          var data1 = data.defaultValueDecimal;
                                                                          if (data1 === undefined) {
                                                                            valid2 = true;
                                                                          } else {
                                                                            var errs_2 = errors;
                                                                            if (typeof data1 !== "number") {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.defaultValueDecimal',
                                                                                schemaPath: '#/allOf/1/properties/defaultValueDecimal/type',
                                                                                params: {
                                                                                  type: 'number'
                                                                                },
                                                                                message: 'should be number'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern1.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.defaultValueDecimal',
                                                                                  schemaPath: '#/allOf/1/properties/defaultValueDecimal/pattern',
                                                                                  params: {
                                                                                    pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                                                  },
                                                                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                          }
                                                                          if (valid2) {
                                                                            if (data._defaultValueDecimal === undefined) {
                                                                              valid2 = true;
                                                                            } else {
                                                                              var errs_2 = errors;
                                                                              if (!refVal[4](data._defaultValueDecimal, (dataPath || '') + '._defaultValueDecimal', data, '_defaultValueDecimal', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                            }
                                                                            if (valid2) {
                                                                              if (data.defaultValueBase64Binary === undefined) {
                                                                                valid2 = true;
                                                                              } else {
                                                                                var errs_2 = errors;
                                                                                if (typeof data.defaultValueBase64Binary !== "string") {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.defaultValueBase64Binary',
                                                                                    schemaPath: '#/allOf/1/properties/defaultValueBase64Binary/type',
                                                                                    params: {
                                                                                      type: 'string'
                                                                                    },
                                                                                    message: 'should be string'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                var valid2 = errors === errs_2;
                                                                              }
                                                                              if (valid2) {
                                                                                if (data._defaultValueBase64Binary === undefined) {
                                                                                  valid2 = true;
                                                                                } else {
                                                                                  var errs_2 = errors;
                                                                                  if (!refVal[4](data._defaultValueBase64Binary, (dataPath || '') + '._defaultValueBase64Binary', data, '_defaultValueBase64Binary', rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid2 = errors === errs_2;
                                                                                }
                                                                                if (valid2) {
                                                                                  if (data.defaultValueInstant === undefined) {
                                                                                    valid2 = true;
                                                                                  } else {
                                                                                    var errs_2 = errors;
                                                                                    if (typeof data.defaultValueInstant !== "string") {
                                                                                      validate.errors = [{
                                                                                        keyword: 'type',
                                                                                        dataPath: (dataPath || '') + '.defaultValueInstant',
                                                                                        schemaPath: '#/allOf/1/properties/defaultValueInstant/type',
                                                                                        params: {
                                                                                          type: 'string'
                                                                                        },
                                                                                        message: 'should be string'
                                                                                      }];
                                                                                      return false;
                                                                                    }
                                                                                    var valid2 = errors === errs_2;
                                                                                  }
                                                                                  if (valid2) {
                                                                                    if (data._defaultValueInstant === undefined) {
                                                                                      valid2 = true;
                                                                                    } else {
                                                                                      var errs_2 = errors;
                                                                                      if (!refVal[4](data._defaultValueInstant, (dataPath || '') + '._defaultValueInstant', data, '_defaultValueInstant', rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid2 = errors === errs_2;
                                                                                    }
                                                                                    if (valid2) {
                                                                                      if (data.defaultValueString === undefined) {
                                                                                        valid2 = true;
                                                                                      } else {
                                                                                        var errs_2 = errors;
                                                                                        if (typeof data.defaultValueString !== "string") {
                                                                                          validate.errors = [{
                                                                                            keyword: 'type',
                                                                                            dataPath: (dataPath || '') + '.defaultValueString',
                                                                                            schemaPath: '#/allOf/1/properties/defaultValueString/type',
                                                                                            params: {
                                                                                              type: 'string'
                                                                                            },
                                                                                            message: 'should be string'
                                                                                          }];
                                                                                          return false;
                                                                                        }
                                                                                        var valid2 = errors === errs_2;
                                                                                      }
                                                                                      if (valid2) {
                                                                                        if (data._defaultValueString === undefined) {
                                                                                          valid2 = true;
                                                                                        } else {
                                                                                          var errs_2 = errors;
                                                                                          if (!refVal[4](data._defaultValueString, (dataPath || '') + '._defaultValueString', data, '_defaultValueString', rootData)) {
                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid2 = errors === errs_2;
                                                                                        }
                                                                                        if (valid2) {
                                                                                          if (data.defaultValueUri === undefined) {
                                                                                            valid2 = true;
                                                                                          } else {
                                                                                            var errs_2 = errors;
                                                                                            if (typeof data.defaultValueUri !== "string") {
                                                                                              validate.errors = [{
                                                                                                keyword: 'type',
                                                                                                dataPath: (dataPath || '') + '.defaultValueUri',
                                                                                                schemaPath: '#/allOf/1/properties/defaultValueUri/type',
                                                                                                params: {
                                                                                                  type: 'string'
                                                                                                },
                                                                                                message: 'should be string'
                                                                                              }];
                                                                                              return false;
                                                                                            }
                                                                                            var valid2 = errors === errs_2;
                                                                                          }
                                                                                          if (valid2) {
                                                                                            if (data._defaultValueUri === undefined) {
                                                                                              valid2 = true;
                                                                                            } else {
                                                                                              var errs_2 = errors;
                                                                                              if (!refVal[4](data._defaultValueUri, (dataPath || '') + '._defaultValueUri', data, '_defaultValueUri', rootData)) {
                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid2 = errors === errs_2;
                                                                                            }
                                                                                            if (valid2) {
                                                                                              var data1 = data.defaultValueDate;
                                                                                              if (data1 === undefined) {
                                                                                                valid2 = true;
                                                                                              } else {
                                                                                                var errs_2 = errors;
                                                                                                if (typeof data1 === "string") {
                                                                                                  if (!pattern2.test(data1)) {
                                                                                                    validate.errors = [{
                                                                                                      keyword: 'pattern',
                                                                                                      dataPath: (dataPath || '') + '.defaultValueDate',
                                                                                                      schemaPath: '#/allOf/1/properties/defaultValueDate/pattern',
                                                                                                      params: {
                                                                                                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                                                      },
                                                                                                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                                                                    }];
                                                                                                    return false;
                                                                                                  }
                                                                                                } else {
                                                                                                  validate.errors = [{
                                                                                                    keyword: 'type',
                                                                                                    dataPath: (dataPath || '') + '.defaultValueDate',
                                                                                                    schemaPath: '#/allOf/1/properties/defaultValueDate/type',
                                                                                                    params: {
                                                                                                      type: 'string'
                                                                                                    },
                                                                                                    message: 'should be string'
                                                                                                  }];
                                                                                                  return false;
                                                                                                }
                                                                                                var valid2 = errors === errs_2;
                                                                                              }
                                                                                              if (valid2) {
                                                                                                if (data._defaultValueDate === undefined) {
                                                                                                  valid2 = true;
                                                                                                } else {
                                                                                                  var errs_2 = errors;
                                                                                                  if (!refVal[4](data._defaultValueDate, (dataPath || '') + '._defaultValueDate', data, '_defaultValueDate', rootData)) {
                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                    errors = vErrors.length;
                                                                                                  }
                                                                                                  var valid2 = errors === errs_2;
                                                                                                }
                                                                                                if (valid2) {
                                                                                                  var data1 = data.defaultValueDateTime;
                                                                                                  if (data1 === undefined) {
                                                                                                    valid2 = true;
                                                                                                  } else {
                                                                                                    var errs_2 = errors;
                                                                                                    if (typeof data1 === "string") {
                                                                                                      if (!pattern3.test(data1)) {
                                                                                                        validate.errors = [{
                                                                                                          keyword: 'pattern',
                                                                                                          dataPath: (dataPath || '') + '.defaultValueDateTime',
                                                                                                          schemaPath: '#/allOf/1/properties/defaultValueDateTime/pattern',
                                                                                                          params: {
                                                                                                            pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                                                                          },
                                                                                                          message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                                                                        }];
                                                                                                        return false;
                                                                                                      }
                                                                                                    } else {
                                                                                                      validate.errors = [{
                                                                                                        keyword: 'type',
                                                                                                        dataPath: (dataPath || '') + '.defaultValueDateTime',
                                                                                                        schemaPath: '#/allOf/1/properties/defaultValueDateTime/type',
                                                                                                        params: {
                                                                                                          type: 'string'
                                                                                                        },
                                                                                                        message: 'should be string'
                                                                                                      }];
                                                                                                      return false;
                                                                                                    }
                                                                                                    var valid2 = errors === errs_2;
                                                                                                  }
                                                                                                  if (valid2) {
                                                                                                    if (data._defaultValueDateTime === undefined) {
                                                                                                      valid2 = true;
                                                                                                    } else {
                                                                                                      var errs_2 = errors;
                                                                                                      if (!refVal[4](data._defaultValueDateTime, (dataPath || '') + '._defaultValueDateTime', data, '_defaultValueDateTime', rootData)) {
                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                        errors = vErrors.length;
                                                                                                      }
                                                                                                      var valid2 = errors === errs_2;
                                                                                                    }
                                                                                                    if (valid2) {
                                                                                                      var data1 = data.defaultValueTime;
                                                                                                      if (data1 === undefined) {
                                                                                                        valid2 = true;
                                                                                                      } else {
                                                                                                        var errs_2 = errors;
                                                                                                        if (typeof data1 === "string") {
                                                                                                          if (!pattern4.test(data1)) {
                                                                                                            validate.errors = [{
                                                                                                              keyword: 'pattern',
                                                                                                              dataPath: (dataPath || '') + '.defaultValueTime',
                                                                                                              schemaPath: '#/allOf/1/properties/defaultValueTime/pattern',
                                                                                                              params: {
                                                                                                                pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                                                                              },
                                                                                                              message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                                                                            }];
                                                                                                            return false;
                                                                                                          }
                                                                                                        } else {
                                                                                                          validate.errors = [{
                                                                                                            keyword: 'type',
                                                                                                            dataPath: (dataPath || '') + '.defaultValueTime',
                                                                                                            schemaPath: '#/allOf/1/properties/defaultValueTime/type',
                                                                                                            params: {
                                                                                                              type: 'string'
                                                                                                            },
                                                                                                            message: 'should be string'
                                                                                                          }];
                                                                                                          return false;
                                                                                                        }
                                                                                                        var valid2 = errors === errs_2;
                                                                                                      }
                                                                                                      if (valid2) {
                                                                                                        if (data._defaultValueTime === undefined) {
                                                                                                          valid2 = true;
                                                                                                        } else {
                                                                                                          var errs_2 = errors;
                                                                                                          if (!refVal[4](data._defaultValueTime, (dataPath || '') + '._defaultValueTime', data, '_defaultValueTime', rootData)) {
                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                            errors = vErrors.length;
                                                                                                          }
                                                                                                          var valid2 = errors === errs_2;
                                                                                                        }
                                                                                                        if (valid2) {
                                                                                                          var data1 = data.defaultValueCode;
                                                                                                          if (data1 === undefined) {
                                                                                                            valid2 = true;
                                                                                                          } else {
                                                                                                            var errs_2 = errors;
                                                                                                            if (typeof data1 === "string") {
                                                                                                              if (!pattern5.test(data1)) {
                                                                                                                validate.errors = [{
                                                                                                                  keyword: 'pattern',
                                                                                                                  dataPath: (dataPath || '') + '.defaultValueCode',
                                                                                                                  schemaPath: '#/allOf/1/properties/defaultValueCode/pattern',
                                                                                                                  params: {
                                                                                                                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                                                                                  },
                                                                                                                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                                                                                }];
                                                                                                                return false;
                                                                                                              }
                                                                                                            } else {
                                                                                                              validate.errors = [{
                                                                                                                keyword: 'type',
                                                                                                                dataPath: (dataPath || '') + '.defaultValueCode',
                                                                                                                schemaPath: '#/allOf/1/properties/defaultValueCode/type',
                                                                                                                params: {
                                                                                                                  type: 'string'
                                                                                                                },
                                                                                                                message: 'should be string'
                                                                                                              }];
                                                                                                              return false;
                                                                                                            }
                                                                                                            var valid2 = errors === errs_2;
                                                                                                          }
                                                                                                          if (valid2) {
                                                                                                            if (data._defaultValueCode === undefined) {
                                                                                                              valid2 = true;
                                                                                                            } else {
                                                                                                              var errs_2 = errors;
                                                                                                              if (!refVal[4](data._defaultValueCode, (dataPath || '') + '._defaultValueCode', data, '_defaultValueCode', rootData)) {
                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                errors = vErrors.length;
                                                                                                              }
                                                                                                              var valid2 = errors === errs_2;
                                                                                                            }
                                                                                                            if (valid2) {
                                                                                                              var data1 = data.defaultValueOid;
                                                                                                              if (data1 === undefined) {
                                                                                                                valid2 = true;
                                                                                                              } else {
                                                                                                                var errs_2 = errors;
                                                                                                                if (typeof data1 === "string") {
                                                                                                                  if (!pattern6.test(data1)) {
                                                                                                                    validate.errors = [{
                                                                                                                      keyword: 'pattern',
                                                                                                                      dataPath: (dataPath || '') + '.defaultValueOid',
                                                                                                                      schemaPath: '#/allOf/1/properties/defaultValueOid/pattern',
                                                                                                                      params: {
                                                                                                                        pattern: 'urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*'
                                                                                                                      },
                                                                                                                      message: 'should match pattern "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"'
                                                                                                                    }];
                                                                                                                    return false;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  validate.errors = [{
                                                                                                                    keyword: 'type',
                                                                                                                    dataPath: (dataPath || '') + '.defaultValueOid',
                                                                                                                    schemaPath: '#/allOf/1/properties/defaultValueOid/type',
                                                                                                                    params: {
                                                                                                                      type: 'string'
                                                                                                                    },
                                                                                                                    message: 'should be string'
                                                                                                                  }];
                                                                                                                  return false;
                                                                                                                }
                                                                                                                var valid2 = errors === errs_2;
                                                                                                              }
                                                                                                              if (valid2) {
                                                                                                                if (data._defaultValueOid === undefined) {
                                                                                                                  valid2 = true;
                                                                                                                } else {
                                                                                                                  var errs_2 = errors;
                                                                                                                  if (!refVal[4](data._defaultValueOid, (dataPath || '') + '._defaultValueOid', data, '_defaultValueOid', rootData)) {
                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                  }
                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                }
                                                                                                                if (valid2) {
                                                                                                                  var data1 = data.defaultValueUuid;
                                                                                                                  if (data1 === undefined) {
                                                                                                                    valid2 = true;
                                                                                                                  } else {
                                                                                                                    var errs_2 = errors;
                                                                                                                    if (typeof data1 === "string") {
                                                                                                                      if (!pattern7.test(data1)) {
                                                                                                                        validate.errors = [{
                                                                                                                          keyword: 'pattern',
                                                                                                                          dataPath: (dataPath || '') + '.defaultValueUuid',
                                                                                                                          schemaPath: '#/allOf/1/properties/defaultValueUuid/pattern',
                                                                                                                          params: {
                                                                                                                            pattern: 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                                                                                                                          },
                                                                                                                          message: 'should match pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"'
                                                                                                                        }];
                                                                                                                        return false;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      validate.errors = [{
                                                                                                                        keyword: 'type',
                                                                                                                        dataPath: (dataPath || '') + '.defaultValueUuid',
                                                                                                                        schemaPath: '#/allOf/1/properties/defaultValueUuid/type',
                                                                                                                        params: {
                                                                                                                          type: 'string'
                                                                                                                        },
                                                                                                                        message: 'should be string'
                                                                                                                      }];
                                                                                                                      return false;
                                                                                                                    }
                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                  }
                                                                                                                  if (valid2) {
                                                                                                                    if (data._defaultValueUuid === undefined) {
                                                                                                                      valid2 = true;
                                                                                                                    } else {
                                                                                                                      var errs_2 = errors;
                                                                                                                      if (!refVal[4](data._defaultValueUuid, (dataPath || '') + '._defaultValueUuid', data, '_defaultValueUuid', rootData)) {
                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                        errors = vErrors.length;
                                                                                                                      }
                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                    }
                                                                                                                    if (valid2) {
                                                                                                                      var data1 = data.defaultValueId;
                                                                                                                      if (data1 === undefined) {
                                                                                                                        valid2 = true;
                                                                                                                      } else {
                                                                                                                        var errs_2 = errors;
                                                                                                                        if (typeof data1 === "string") {
                                                                                                                          if (!pattern8.test(data1)) {
                                                                                                                            validate.errors = [{
                                                                                                                              keyword: 'pattern',
                                                                                                                              dataPath: (dataPath || '') + '.defaultValueId',
                                                                                                                              schemaPath: '#/allOf/1/properties/defaultValueId/pattern',
                                                                                                                              params: {
                                                                                                                                pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                                                                                                                              },
                                                                                                                              message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                                                                                                                            }];
                                                                                                                            return false;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          validate.errors = [{
                                                                                                                            keyword: 'type',
                                                                                                                            dataPath: (dataPath || '') + '.defaultValueId',
                                                                                                                            schemaPath: '#/allOf/1/properties/defaultValueId/type',
                                                                                                                            params: {
                                                                                                                              type: 'string'
                                                                                                                            },
                                                                                                                            message: 'should be string'
                                                                                                                          }];
                                                                                                                          return false;
                                                                                                                        }
                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                      }
                                                                                                                      if (valid2) {
                                                                                                                        if (data._defaultValueId === undefined) {
                                                                                                                          valid2 = true;
                                                                                                                        } else {
                                                                                                                          var errs_2 = errors;
                                                                                                                          if (!refVal[4](data._defaultValueId, (dataPath || '') + '._defaultValueId', data, '_defaultValueId', rootData)) {
                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                            errors = vErrors.length;
                                                                                                                          }
                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                        }
                                                                                                                        if (valid2) {
                                                                                                                          var data1 = data.defaultValueUnsignedInt;
                                                                                                                          if (data1 === undefined) {
                                                                                                                            valid2 = true;
                                                                                                                          } else {
                                                                                                                            var errs_2 = errors;
                                                                                                                            if (typeof data1 !== "number") {
                                                                                                                              validate.errors = [{
                                                                                                                                keyword: 'type',
                                                                                                                                dataPath: (dataPath || '') + '.defaultValueUnsignedInt',
                                                                                                                                schemaPath: '#/allOf/1/properties/defaultValueUnsignedInt/type',
                                                                                                                                params: {
                                                                                                                                  type: 'number'
                                                                                                                                },
                                                                                                                                message: 'should be number'
                                                                                                                              }];
                                                                                                                              return false;
                                                                                                                            }
                                                                                                                            if (typeof data1 === "string") {
                                                                                                                              if (!pattern9.test(data1)) {
                                                                                                                                validate.errors = [{
                                                                                                                                  keyword: 'pattern',
                                                                                                                                  dataPath: (dataPath || '') + '.defaultValueUnsignedInt',
                                                                                                                                  schemaPath: '#/allOf/1/properties/defaultValueUnsignedInt/pattern',
                                                                                                                                  params: {
                                                                                                                                    pattern: '[0]|([1-9][0-9]*)'
                                                                                                                                  },
                                                                                                                                  message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                                                                                }];
                                                                                                                                return false;
                                                                                                                              }
                                                                                                                            }
                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                          }
                                                                                                                          if (valid2) {
                                                                                                                            if (data._defaultValueUnsignedInt === undefined) {
                                                                                                                              valid2 = true;
                                                                                                                            } else {
                                                                                                                              var errs_2 = errors;
                                                                                                                              if (!refVal[4](data._defaultValueUnsignedInt, (dataPath || '') + '._defaultValueUnsignedInt', data, '_defaultValueUnsignedInt', rootData)) {
                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                errors = vErrors.length;
                                                                                                                              }
                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                            }
                                                                                                                            if (valid2) {
                                                                                                                              var data1 = data.defaultValuePositiveInt;
                                                                                                                              if (data1 === undefined) {
                                                                                                                                valid2 = true;
                                                                                                                              } else {
                                                                                                                                var errs_2 = errors;
                                                                                                                                if (typeof data1 !== "number") {
                                                                                                                                  validate.errors = [{
                                                                                                                                    keyword: 'type',
                                                                                                                                    dataPath: (dataPath || '') + '.defaultValuePositiveInt',
                                                                                                                                    schemaPath: '#/allOf/1/properties/defaultValuePositiveInt/type',
                                                                                                                                    params: {
                                                                                                                                      type: 'number'
                                                                                                                                    },
                                                                                                                                    message: 'should be number'
                                                                                                                                  }];
                                                                                                                                  return false;
                                                                                                                                }
                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                  if (!pattern10.test(data1)) {
                                                                                                                                    validate.errors = [{
                                                                                                                                      keyword: 'pattern',
                                                                                                                                      dataPath: (dataPath || '') + '.defaultValuePositiveInt',
                                                                                                                                      schemaPath: '#/allOf/1/properties/defaultValuePositiveInt/pattern',
                                                                                                                                      params: {
                                                                                                                                        pattern: '[1-9][0-9]*'
                                                                                                                                      },
                                                                                                                                      message: 'should match pattern "[1-9][0-9]*"'
                                                                                                                                    }];
                                                                                                                                    return false;
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                              }
                                                                                                                              if (valid2) {
                                                                                                                                if (data._defaultValuePositiveInt === undefined) {
                                                                                                                                  valid2 = true;
                                                                                                                                } else {
                                                                                                                                  var errs_2 = errors;
                                                                                                                                  if (!refVal[4](data._defaultValuePositiveInt, (dataPath || '') + '._defaultValuePositiveInt', data, '_defaultValuePositiveInt', rootData)) {
                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                  }
                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                }
                                                                                                                                if (valid2) {
                                                                                                                                  if (data.defaultValueMarkdown === undefined) {
                                                                                                                                    valid2 = true;
                                                                                                                                  } else {
                                                                                                                                    var errs_2 = errors;
                                                                                                                                    if (typeof data.defaultValueMarkdown !== "string") {
                                                                                                                                      validate.errors = [{
                                                                                                                                        keyword: 'type',
                                                                                                                                        dataPath: (dataPath || '') + '.defaultValueMarkdown',
                                                                                                                                        schemaPath: '#/allOf/1/properties/defaultValueMarkdown/type',
                                                                                                                                        params: {
                                                                                                                                          type: 'string'
                                                                                                                                        },
                                                                                                                                        message: 'should be string'
                                                                                                                                      }];
                                                                                                                                      return false;
                                                                                                                                    }
                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                  }
                                                                                                                                  if (valid2) {
                                                                                                                                    if (data._defaultValueMarkdown === undefined) {
                                                                                                                                      valid2 = true;
                                                                                                                                    } else {
                                                                                                                                      var errs_2 = errors;
                                                                                                                                      if (!refVal[4](data._defaultValueMarkdown, (dataPath || '') + '._defaultValueMarkdown', data, '_defaultValueMarkdown', rootData)) {
                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                      }
                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                    }
                                                                                                                                    if (valid2) {
                                                                                                                                      if (data.defaultValueElement === undefined) {
                                                                                                                                        valid2 = true;
                                                                                                                                      } else {
                                                                                                                                        var errs_2 = errors;
                                                                                                                                        if (!refVal[4](data.defaultValueElement, (dataPath || '') + '.defaultValueElement', data, 'defaultValueElement', rootData)) {
                                                                                                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                          errors = vErrors.length;
                                                                                                                                        }
                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                      }
                                                                                                                                      if (valid2) {
                                                                                                                                        if (data.defaultValueExtension === undefined) {
                                                                                                                                          valid2 = true;
                                                                                                                                        } else {
                                                                                                                                          var errs_2 = errors;
                                                                                                                                          if (!refVal[5](data.defaultValueExtension, (dataPath || '') + '.defaultValueExtension', data, 'defaultValueExtension', rootData)) {
                                                                                                                                            if (vErrors === null) vErrors = refVal[5].errors;
                                                                                                                                            else vErrors = vErrors.concat(refVal[5].errors);
                                                                                                                                            errors = vErrors.length;
                                                                                                                                          }
                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                        }
                                                                                                                                        if (valid2) {
                                                                                                                                          if (data.defaultValueBackboneElement === undefined) {
                                                                                                                                            valid2 = true;
                                                                                                                                          } else {
                                                                                                                                            var errs_2 = errors;
                                                                                                                                            if (!refVal[6](data.defaultValueBackboneElement, (dataPath || '') + '.defaultValueBackboneElement', data, 'defaultValueBackboneElement', rootData)) {
                                                                                                                                              if (vErrors === null) vErrors = refVal[6].errors;
                                                                                                                                              else vErrors = vErrors.concat(refVal[6].errors);
                                                                                                                                              errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                          }
                                                                                                                                          if (valid2) {
                                                                                                                                            if (data.defaultValueNarrative === undefined) {
                                                                                                                                              valid2 = true;
                                                                                                                                            } else {
                                                                                                                                              var errs_2 = errors;
                                                                                                                                              if (!refVal[3](data.defaultValueNarrative, (dataPath || '') + '.defaultValueNarrative', data, 'defaultValueNarrative', rootData)) {
                                                                                                                                                if (vErrors === null) vErrors = refVal[3].errors;
                                                                                                                                                else vErrors = vErrors.concat(refVal[3].errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                              }
                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                            }
                                                                                                                                            if (valid2) {
                                                                                                                                              if (data.defaultValueAnnotation === undefined) {
                                                                                                                                                valid2 = true;
                                                                                                                                              } else {
                                                                                                                                                var errs_2 = errors;
                                                                                                                                                if (!refVal[7](data.defaultValueAnnotation, (dataPath || '') + '.defaultValueAnnotation', data, 'defaultValueAnnotation', rootData)) {
                                                                                                                                                  if (vErrors === null) vErrors = refVal[7].errors;
                                                                                                                                                  else vErrors = vErrors.concat(refVal[7].errors);
                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                }
                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                              }
                                                                                                                                              if (valid2) {
                                                                                                                                                if (data.defaultValueAttachment === undefined) {
                                                                                                                                                  valid2 = true;
                                                                                                                                                } else {
                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                  if (!refVal[13](data.defaultValueAttachment, (dataPath || '') + '.defaultValueAttachment', data, 'defaultValueAttachment', rootData)) {
                                                                                                                                                    if (vErrors === null) vErrors = refVal[13].errors;
                                                                                                                                                    else vErrors = vErrors.concat(refVal[13].errors);
                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                  }
                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                }
                                                                                                                                                if (valid2) {
                                                                                                                                                  if (data.defaultValueIdentifier === undefined) {
                                                                                                                                                    valid2 = true;
                                                                                                                                                  } else {
                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                    if (!refVal[9](data.defaultValueIdentifier, (dataPath || '') + '.defaultValueIdentifier', data, 'defaultValueIdentifier', rootData)) {
                                                                                                                                                      if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                                                                      else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                    }
                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                  }
                                                                                                                                                  if (valid2) {
                                                                                                                                                    if (data.defaultValueCodeableConcept === undefined) {
                                                                                                                                                      valid2 = true;
                                                                                                                                                    } else {
                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                      if (!refVal[10](data.defaultValueCodeableConcept, (dataPath || '') + '.defaultValueCodeableConcept', data, 'defaultValueCodeableConcept', rootData)) {
                                                                                                                                                        if (vErrors === null) vErrors = refVal[10].errors;
                                                                                                                                                        else vErrors = vErrors.concat(refVal[10].errors);
                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                      }
                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                    }
                                                                                                                                                    if (valid2) {
                                                                                                                                                      if (data.defaultValueCoding === undefined) {
                                                                                                                                                        valid2 = true;
                                                                                                                                                      } else {
                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                        if (!refVal[11](data.defaultValueCoding, (dataPath || '') + '.defaultValueCoding', data, 'defaultValueCoding', rootData)) {
                                                                                                                                                          if (vErrors === null) vErrors = refVal[11].errors;
                                                                                                                                                          else vErrors = vErrors.concat(refVal[11].errors);
                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                        }
                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                      }
                                                                                                                                                      if (valid2) {
                                                                                                                                                        if (data.defaultValueQuantity === undefined) {
                                                                                                                                                          valid2 = true;
                                                                                                                                                        } else {
                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                          if (!refVal[14](data.defaultValueQuantity, (dataPath || '') + '.defaultValueQuantity', data, 'defaultValueQuantity', rootData)) {
                                                                                                                                                            if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                            else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                          }
                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                        }
                                                                                                                                                        if (valid2) {
                                                                                                                                                          if (data.defaultValueDuration === undefined) {
                                                                                                                                                            valid2 = true;
                                                                                                                                                          } else {
                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                            if (!refVal[15](data.defaultValueDuration, (dataPath || '') + '.defaultValueDuration', data, 'defaultValueDuration', rootData)) {
                                                                                                                                                              if (vErrors === null) vErrors = refVal[15].errors;
                                                                                                                                                              else vErrors = vErrors.concat(refVal[15].errors);
                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                            }
                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                          }
                                                                                                                                                          if (valid2) {
                                                                                                                                                            if (data.defaultValueSimpleQuantity === undefined) {
                                                                                                                                                              valid2 = true;
                                                                                                                                                            } else {
                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                              if (!refVal[14](data.defaultValueSimpleQuantity, (dataPath || '') + '.defaultValueSimpleQuantity', data, 'defaultValueSimpleQuantity', rootData)) {
                                                                                                                                                                if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                                else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                              }
                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                            }
                                                                                                                                                            if (valid2) {
                                                                                                                                                              if (data.defaultValueDistance === undefined) {
                                                                                                                                                                valid2 = true;
                                                                                                                                                              } else {
                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                if (!refVal[16](data.defaultValueDistance, (dataPath || '') + '.defaultValueDistance', data, 'defaultValueDistance', rootData)) {
                                                                                                                                                                  if (vErrors === null) vErrors = refVal[16].errors;
                                                                                                                                                                  else vErrors = vErrors.concat(refVal[16].errors);
                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                }
                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                              }
                                                                                                                                                              if (valid2) {
                                                                                                                                                                if (data.defaultValueCount === undefined) {
                                                                                                                                                                  valid2 = true;
                                                                                                                                                                } else {
                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                  if (!refVal[17](data.defaultValueCount, (dataPath || '') + '.defaultValueCount', data, 'defaultValueCount', rootData)) {
                                                                                                                                                                    if (vErrors === null) vErrors = refVal[17].errors;
                                                                                                                                                                    else vErrors = vErrors.concat(refVal[17].errors);
                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                  }
                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                }
                                                                                                                                                                if (valid2) {
                                                                                                                                                                  if (data.defaultValueMoney === undefined) {
                                                                                                                                                                    valid2 = true;
                                                                                                                                                                  } else {
                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                    if (!refVal[18](data.defaultValueMoney, (dataPath || '') + '.defaultValueMoney', data, 'defaultValueMoney', rootData)) {
                                                                                                                                                                      if (vErrors === null) vErrors = refVal[18].errors;
                                                                                                                                                                      else vErrors = vErrors.concat(refVal[18].errors);
                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                    }
                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                  }
                                                                                                                                                                  if (valid2) {
                                                                                                                                                                    if (data.defaultValueAge === undefined) {
                                                                                                                                                                      valid2 = true;
                                                                                                                                                                    } else {
                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                      if (!refVal[19](data.defaultValueAge, (dataPath || '') + '.defaultValueAge', data, 'defaultValueAge', rootData)) {
                                                                                                                                                                        if (vErrors === null) vErrors = refVal[19].errors;
                                                                                                                                                                        else vErrors = vErrors.concat(refVal[19].errors);
                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                      }
                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                    }
                                                                                                                                                                    if (valid2) {
                                                                                                                                                                      if (data.defaultValueRange === undefined) {
                                                                                                                                                                        valid2 = true;
                                                                                                                                                                      } else {
                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                        if (!refVal[20](data.defaultValueRange, (dataPath || '') + '.defaultValueRange', data, 'defaultValueRange', rootData)) {
                                                                                                                                                                          if (vErrors === null) vErrors = refVal[20].errors;
                                                                                                                                                                          else vErrors = vErrors.concat(refVal[20].errors);
                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                        }
                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                      }
                                                                                                                                                                      if (valid2) {
                                                                                                                                                                        if (data.defaultValuePeriod === undefined) {
                                                                                                                                                                          valid2 = true;
                                                                                                                                                                        } else {
                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                          if (!refVal[12](data.defaultValuePeriod, (dataPath || '') + '.defaultValuePeriod', data, 'defaultValuePeriod', rootData)) {
                                                                                                                                                                            if (vErrors === null) vErrors = refVal[12].errors;
                                                                                                                                                                            else vErrors = vErrors.concat(refVal[12].errors);
                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                          }
                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                        }
                                                                                                                                                                        if (valid2) {
                                                                                                                                                                          if (data.defaultValueRatio === undefined) {
                                                                                                                                                                            valid2 = true;
                                                                                                                                                                          } else {
                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                            if (!refVal[21](data.defaultValueRatio, (dataPath || '') + '.defaultValueRatio', data, 'defaultValueRatio', rootData)) {
                                                                                                                                                                              if (vErrors === null) vErrors = refVal[21].errors;
                                                                                                                                                                              else vErrors = vErrors.concat(refVal[21].errors);
                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                            }
                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                          }
                                                                                                                                                                          if (valid2) {
                                                                                                                                                                            if (data.defaultValueReference === undefined) {
                                                                                                                                                                              valid2 = true;
                                                                                                                                                                            } else {
                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                              if (!refVal[8](data.defaultValueReference, (dataPath || '') + '.defaultValueReference', data, 'defaultValueReference', rootData)) {
                                                                                                                                                                                if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                                                                                                else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                              }
                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                            }
                                                                                                                                                                            if (valid2) {
                                                                                                                                                                              if (data.defaultValueSampledData === undefined) {
                                                                                                                                                                                valid2 = true;
                                                                                                                                                                              } else {
                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                if (!refVal[22](data.defaultValueSampledData, (dataPath || '') + '.defaultValueSampledData', data, 'defaultValueSampledData', rootData)) {
                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[22].errors;
                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[22].errors);
                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                }
                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                              }
                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                if (data.defaultValueSignature === undefined) {
                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                } else {
                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                  if (!refVal[23](data.defaultValueSignature, (dataPath || '') + '.defaultValueSignature', data, 'defaultValueSignature', rootData)) {
                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[23].errors;
                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[23].errors);
                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                  }
                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                }
                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                  if (data.defaultValueHumanName === undefined) {
                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                    if (!refVal[24](data.defaultValueHumanName, (dataPath || '') + '.defaultValueHumanName', data, 'defaultValueHumanName', rootData)) {
                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[24].errors;
                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[24].errors);
                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                    }
                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                    if (data.defaultValueAddress === undefined) {
                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                      if (!refVal[25](data.defaultValueAddress, (dataPath || '') + '.defaultValueAddress', data, 'defaultValueAddress', rootData)) {
                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[25].errors;
                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[25].errors);
                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                      }
                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                      if (data.defaultValueContactPoint === undefined) {
                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                      } else {
                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                        if (!refVal[26](data.defaultValueContactPoint, (dataPath || '') + '.defaultValueContactPoint', data, 'defaultValueContactPoint', rootData)) {
                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[26].errors;
                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[26].errors);
                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                        }
                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                        if (data.defaultValueTiming === undefined) {
                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                        } else {
                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                          if (!refVal[27](data.defaultValueTiming, (dataPath || '') + '.defaultValueTiming', data, 'defaultValueTiming', rootData)) {
                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[27].errors;
                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[27].errors);
                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                          }
                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                          if (data.defaultValueMeta === undefined) {
                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                          } else {
                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                            if (!refVal[29](data.defaultValueMeta, (dataPath || '') + '.defaultValueMeta', data, 'defaultValueMeta', rootData)) {
                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[29].errors;
                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[29].errors);
                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                            }
                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                            if (data.defaultValueElementDefinition === undefined) {
                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                            } else {
                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                              if (!refVal[30](data.defaultValueElementDefinition, (dataPath || '') + '.defaultValueElementDefinition', data, 'defaultValueElementDefinition', rootData)) {
                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[30].errors;
                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[30].errors);
                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                              }
                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                              if (data.defaultValueContactDetail === undefined) {
                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                              } else {
                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                if (!refVal35(data.defaultValueContactDetail, (dataPath || '') + '.defaultValueContactDetail', data, 'defaultValueContactDetail', rootData)) {
                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal35.errors;
                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal35.errors);
                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                }
                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                if (data.defaultValueContributor === undefined) {
                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                  if (!refVal36(data.defaultValueContributor, (dataPath || '') + '.defaultValueContributor', data, 'defaultValueContributor', rootData)) {
                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal36.errors;
                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal36.errors);
                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                  if (data.defaultValueDosage === undefined) {
                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                    if (!refVal37(data.defaultValueDosage, (dataPath || '') + '.defaultValueDosage', data, 'defaultValueDosage', rootData)) {
                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal37.errors;
                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal37.errors);
                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                    if (data.defaultValueRelatedArtifact === undefined) {
                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                      if (!refVal38(data.defaultValueRelatedArtifact, (dataPath || '') + '.defaultValueRelatedArtifact', data, 'defaultValueRelatedArtifact', rootData)) {
                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal38.errors;
                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal38.errors);
                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                      if (data.defaultValueUsageContext === undefined) {
                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                        if (!refVal39(data.defaultValueUsageContext, (dataPath || '') + '.defaultValueUsageContext', data, 'defaultValueUsageContext', rootData)) {
                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal39.errors;
                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal39.errors);
                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                        if (data.defaultValueDataRequirement === undefined) {
                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                          if (!refVal40(data.defaultValueDataRequirement, (dataPath || '') + '.defaultValueDataRequirement', data, 'defaultValueDataRequirement', rootData)) {
                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal40.errors;
                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal40.errors);
                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                          if (data.defaultValueParameterDefinition === undefined) {
                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                            if (!refVal43(data.defaultValueParameterDefinition, (dataPath || '') + '.defaultValueParameterDefinition', data, 'defaultValueParameterDefinition', rootData)) {
                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal43.errors;
                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal43.errors);
                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                            if (data.defaultValueTriggerDefinition === undefined) {
                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                              if (!refVal44(data.defaultValueTriggerDefinition, (dataPath || '') + '.defaultValueTriggerDefinition', data, 'defaultValueTriggerDefinition', rootData)) {
                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal44.errors;
                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal44.errors);
                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                              if (data.meaningWhenMissing === undefined) {
                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                if (typeof data.meaningWhenMissing !== "string") {
                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.meaningWhenMissing',
                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/meaningWhenMissing/type',
                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                if (data._meaningWhenMissing === undefined) {
                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                  if (!refVal[4](data._meaningWhenMissing, (dataPath || '') + '._meaningWhenMissing', data, '_meaningWhenMissing', rootData)) {
                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                  if (data.orderMeaning === undefined) {
                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                    if (typeof data.orderMeaning !== "string") {
                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.orderMeaning',
                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/orderMeaning/type',
                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                    if (data._orderMeaning === undefined) {
                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                      if (!refVal[4](data._orderMeaning, (dataPath || '') + '._orderMeaning', data, '_orderMeaning', rootData)) {
                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                      if (data.fixedBoolean === undefined) {
                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                        if (typeof data.fixedBoolean !== "boolean") {
                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.fixedBoolean',
                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/fixedBoolean/type',
                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                              type: 'boolean'
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            message: 'should be boolean'
                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                        if (data._fixedBoolean === undefined) {
                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                          if (!refVal[4](data._fixedBoolean, (dataPath || '') + '._fixedBoolean', data, '_fixedBoolean', rootData)) {
                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                          var data1 = data.fixedInteger;
                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                            if (typeof data1 !== "number") {
                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.fixedInteger',
                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/fixedInteger/type',
                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                  type: 'number'
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                message: 'should be number'
                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                              if (!pattern0.test(data1)) {
                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.fixedInteger',
                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/fixedInteger/pattern',
                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                    pattern: '-?([0]|([1-9][0-9]*))'
                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                            if (data._fixedInteger === undefined) {
                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                              if (!refVal[4](data._fixedInteger, (dataPath || '') + '._fixedInteger', data, '_fixedInteger', rootData)) {
                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                              var data1 = data.fixedDecimal;
                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                if (typeof data1 !== "number") {
                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.fixedDecimal',
                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/fixedDecimal/type',
                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                      type: 'number'
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    message: 'should be number'
                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                  if (!pattern1.test(data1)) {
                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.fixedDecimal',
                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/fixedDecimal/pattern',
                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                        pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                      message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                if (data._fixedDecimal === undefined) {
                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                  if (!refVal[4](data._fixedDecimal, (dataPath || '') + '._fixedDecimal', data, '_fixedDecimal', rootData)) {
                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                  if (data.fixedBase64Binary === undefined) {
                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                    if (typeof data.fixedBase64Binary !== "string") {
                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.fixedBase64Binary',
                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/fixedBase64Binary/type',
                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                    if (data._fixedBase64Binary === undefined) {
                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                      if (!refVal[4](data._fixedBase64Binary, (dataPath || '') + '._fixedBase64Binary', data, '_fixedBase64Binary', rootData)) {
                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                      if (data.fixedInstant === undefined) {
                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                        if (typeof data.fixedInstant !== "string") {
                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.fixedInstant',
                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/fixedInstant/type',
                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                        if (data._fixedInstant === undefined) {
                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                          if (!refVal[4](data._fixedInstant, (dataPath || '') + '._fixedInstant', data, '_fixedInstant', rootData)) {
                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                          if (data.fixedString === undefined) {
                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                            if (typeof data.fixedString !== "string") {
                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.fixedString',
                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/fixedString/type',
                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                  type: 'string'
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                message: 'should be string'
                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                            if (data._fixedString === undefined) {
                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                              if (!refVal[4](data._fixedString, (dataPath || '') + '._fixedString', data, '_fixedString', rootData)) {
                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                              if (data.fixedUri === undefined) {
                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                if (typeof data.fixedUri !== "string") {
                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.fixedUri',
                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/fixedUri/type',
                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                if (data._fixedUri === undefined) {
                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                  if (!refVal[4](data._fixedUri, (dataPath || '') + '._fixedUri', data, '_fixedUri', rootData)) {
                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                  var data1 = data.fixedDate;
                                                                                                                                                                                                                                                  if (data1 === undefined) {
                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                    if (typeof data1 === "string") {
                                                                                                                                                                                                                                                      if (!pattern2.test(data1)) {
                                                                                                                                                                                                                                                        validate.errors = [{
                                                                                                                                                                                                                                                          keyword: 'pattern',
                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.fixedDate',
                                                                                                                                                                                                                                                          schemaPath: '#/allOf/1/properties/fixedDate/pattern',
                                                                                                                                                                                                                                                          params: {
                                                                                                                                                                                                                                                            pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                          message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                                                                                                                                                                                                                        }];
                                                                                                                                                                                                                                                        return false;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.fixedDate',
                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/fixedDate/type',
                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                    if (data._fixedDate === undefined) {
                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                      if (!refVal[4](data._fixedDate, (dataPath || '') + '._fixedDate', data, '_fixedDate', rootData)) {
                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                      var data1 = data.fixedDateTime;
                                                                                                                                                                                                                                                      if (data1 === undefined) {
                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                        if (typeof data1 === "string") {
                                                                                                                                                                                                                                                          if (!pattern3.test(data1)) {
                                                                                                                                                                                                                                                            validate.errors = [{
                                                                                                                                                                                                                                                              keyword: 'pattern',
                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.fixedDateTime',
                                                                                                                                                                                                                                                              schemaPath: '#/allOf/1/properties/fixedDateTime/pattern',
                                                                                                                                                                                                                                                              params: {
                                                                                                                                                                                                                                                                pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                              message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                                                                                                                                                                                                                            }];
                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.fixedDateTime',
                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/fixedDateTime/type',
                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                        if (data._fixedDateTime === undefined) {
                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                          if (!refVal[4](data._fixedDateTime, (dataPath || '') + '._fixedDateTime', data, '_fixedDateTime', rootData)) {
                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                          var data1 = data.fixedTime;
                                                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                                                              if (!pattern4.test(data1)) {
                                                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.fixedTime',
                                                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/fixedTime/pattern',
                                                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                                                    pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                                                  message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.fixedTime',
                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/fixedTime/type',
                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                  type: 'string'
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                message: 'should be string'
                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                            if (data._fixedTime === undefined) {
                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                              if (!refVal[4](data._fixedTime, (dataPath || '') + '._fixedTime', data, '_fixedTime', rootData)) {
                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                              var data1 = data.fixedCode;
                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                  if (!pattern5.test(data1)) {
                                                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.fixedCode',
                                                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/fixedCode/pattern',
                                                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                                                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                                                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.fixedCode',
                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/fixedCode/type',
                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                if (data._fixedCode === undefined) {
                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                  if (!refVal[4](data._fixedCode, (dataPath || '') + '._fixedCode', data, '_fixedCode', rootData)) {
                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                  var data1 = data.fixedOid;
                                                                                                                                                                                                                                                                  if (data1 === undefined) {
                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                    if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                      if (!pattern6.test(data1)) {
                                                                                                                                                                                                                                                                        validate.errors = [{
                                                                                                                                                                                                                                                                          keyword: 'pattern',
                                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.fixedOid',
                                                                                                                                                                                                                                                                          schemaPath: '#/allOf/1/properties/fixedOid/pattern',
                                                                                                                                                                                                                                                                          params: {
                                                                                                                                                                                                                                                                            pattern: 'urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*'
                                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                                          message: 'should match pattern "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"'
                                                                                                                                                                                                                                                                        }];
                                                                                                                                                                                                                                                                        return false;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.fixedOid',
                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/fixedOid/type',
                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                    if (data._fixedOid === undefined) {
                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                      if (!refVal[4](data._fixedOid, (dataPath || '') + '._fixedOid', data, '_fixedOid', rootData)) {
                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                      var data1 = data.fixedUuid;
                                                                                                                                                                                                                                                                      if (data1 === undefined) {
                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                        if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                          if (!pattern7.test(data1)) {
                                                                                                                                                                                                                                                                            validate.errors = [{
                                                                                                                                                                                                                                                                              keyword: 'pattern',
                                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.fixedUuid',
                                                                                                                                                                                                                                                                              schemaPath: '#/allOf/1/properties/fixedUuid/pattern',
                                                                                                                                                                                                                                                                              params: {
                                                                                                                                                                                                                                                                                pattern: 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                              message: 'should match pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"'
                                                                                                                                                                                                                                                                            }];
                                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.fixedUuid',
                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/fixedUuid/type',
                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                        if (data._fixedUuid === undefined) {
                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                          if (!refVal[4](data._fixedUuid, (dataPath || '') + '._fixedUuid', data, '_fixedUuid', rootData)) {
                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                          var data1 = data.fixedId;
                                                                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                              if (!pattern8.test(data1)) {
                                                                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.fixedId',
                                                                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/fixedId/pattern',
                                                                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                                                                    pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                                                                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                                                                  message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                                                                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.fixedId',
                                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/fixedId/type',
                                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                                  type: 'string'
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                message: 'should be string'
                                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                            if (data._fixedId === undefined) {
                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                              if (!refVal[4](data._fixedId, (dataPath || '') + '._fixedId', data, '_fixedId', rootData)) {
                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                              var data1 = data.fixedUnsignedInt;
                                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.fixedUnsignedInt',
                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/fixedUnsignedInt/type',
                                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                                      type: 'number'
                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                    message: 'should be number'
                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                  if (!pattern9.test(data1)) {
                                                                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.fixedUnsignedInt',
                                                                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/fixedUnsignedInt/pattern',
                                                                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                                                                        pattern: '[0]|([1-9][0-9]*)'
                                                                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                                                                      message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                if (data._fixedUnsignedInt === undefined) {
                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                  if (!refVal[4](data._fixedUnsignedInt, (dataPath || '') + '._fixedUnsignedInt', data, '_fixedUnsignedInt', rootData)) {
                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                  var data1 = data.fixedPositiveInt;
                                                                                                                                                                                                                                                                                  if (data1 === undefined) {
                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                    if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.fixedPositiveInt',
                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/fixedPositiveInt/type',
                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                          type: 'number'
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        message: 'should be number'
                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                      if (!pattern10.test(data1)) {
                                                                                                                                                                                                                                                                                        validate.errors = [{
                                                                                                                                                                                                                                                                                          keyword: 'pattern',
                                                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.fixedPositiveInt',
                                                                                                                                                                                                                                                                                          schemaPath: '#/allOf/1/properties/fixedPositiveInt/pattern',
                                                                                                                                                                                                                                                                                          params: {
                                                                                                                                                                                                                                                                                            pattern: '[1-9][0-9]*'
                                                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                                                          message: 'should match pattern "[1-9][0-9]*"'
                                                                                                                                                                                                                                                                                        }];
                                                                                                                                                                                                                                                                                        return false;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                    if (data._fixedPositiveInt === undefined) {
                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                      if (!refVal[4](data._fixedPositiveInt, (dataPath || '') + '._fixedPositiveInt', data, '_fixedPositiveInt', rootData)) {
                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                      if (data.fixedMarkdown === undefined) {
                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                        if (typeof data.fixedMarkdown !== "string") {
                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.fixedMarkdown',
                                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/fixedMarkdown/type',
                                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                        if (data._fixedMarkdown === undefined) {
                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                          if (!refVal[4](data._fixedMarkdown, (dataPath || '') + '._fixedMarkdown', data, '_fixedMarkdown', rootData)) {
                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                          if (data.fixedElement === undefined) {
                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                            if (!refVal[4](data.fixedElement, (dataPath || '') + '.fixedElement', data, 'fixedElement', rootData)) {
                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                            if (data.fixedExtension === undefined) {
                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                              if (!refVal[5](data.fixedExtension, (dataPath || '') + '.fixedExtension', data, 'fixedExtension', rootData)) {
                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[5].errors;
                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[5].errors);
                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                              if (data.fixedBackboneElement === undefined) {
                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                if (!refVal[6](data.fixedBackboneElement, (dataPath || '') + '.fixedBackboneElement', data, 'fixedBackboneElement', rootData)) {
                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[6].errors;
                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[6].errors);
                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                if (data.fixedNarrative === undefined) {
                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                  if (!refVal[3](data.fixedNarrative, (dataPath || '') + '.fixedNarrative', data, 'fixedNarrative', rootData)) {
                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[3].errors;
                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[3].errors);
                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                  if (data.fixedAnnotation === undefined) {
                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                    if (!refVal[7](data.fixedAnnotation, (dataPath || '') + '.fixedAnnotation', data, 'fixedAnnotation', rootData)) {
                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[7].errors;
                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[7].errors);
                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                    if (data.fixedAttachment === undefined) {
                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                      if (!refVal[13](data.fixedAttachment, (dataPath || '') + '.fixedAttachment', data, 'fixedAttachment', rootData)) {
                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[13].errors;
                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[13].errors);
                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                      if (data.fixedIdentifier === undefined) {
                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                        if (!refVal[9](data.fixedIdentifier, (dataPath || '') + '.fixedIdentifier', data, 'fixedIdentifier', rootData)) {
                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                        if (data.fixedCodeableConcept === undefined) {
                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                          if (!refVal[10](data.fixedCodeableConcept, (dataPath || '') + '.fixedCodeableConcept', data, 'fixedCodeableConcept', rootData)) {
                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[10].errors;
                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[10].errors);
                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                          if (data.fixedCoding === undefined) {
                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                            if (!refVal[11](data.fixedCoding, (dataPath || '') + '.fixedCoding', data, 'fixedCoding', rootData)) {
                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[11].errors;
                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[11].errors);
                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                            if (data.fixedQuantity === undefined) {
                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                              if (!refVal[14](data.fixedQuantity, (dataPath || '') + '.fixedQuantity', data, 'fixedQuantity', rootData)) {
                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                              if (data.fixedDuration === undefined) {
                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                if (!refVal[15](data.fixedDuration, (dataPath || '') + '.fixedDuration', data, 'fixedDuration', rootData)) {
                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[15].errors;
                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[15].errors);
                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                if (data.fixedSimpleQuantity === undefined) {
                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                  if (!refVal[14](data.fixedSimpleQuantity, (dataPath || '') + '.fixedSimpleQuantity', data, 'fixedSimpleQuantity', rootData)) {
                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                  if (data.fixedDistance === undefined) {
                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                    if (!refVal[16](data.fixedDistance, (dataPath || '') + '.fixedDistance', data, 'fixedDistance', rootData)) {
                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[16].errors;
                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[16].errors);
                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                    if (data.fixedCount === undefined) {
                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                      if (!refVal[17](data.fixedCount, (dataPath || '') + '.fixedCount', data, 'fixedCount', rootData)) {
                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[17].errors;
                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[17].errors);
                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                      if (data.fixedMoney === undefined) {
                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                        if (!refVal[18](data.fixedMoney, (dataPath || '') + '.fixedMoney', data, 'fixedMoney', rootData)) {
                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[18].errors;
                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[18].errors);
                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                        if (data.fixedAge === undefined) {
                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                          if (!refVal[19](data.fixedAge, (dataPath || '') + '.fixedAge', data, 'fixedAge', rootData)) {
                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[19].errors;
                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[19].errors);
                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                          if (data.fixedRange === undefined) {
                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                            if (!refVal[20](data.fixedRange, (dataPath || '') + '.fixedRange', data, 'fixedRange', rootData)) {
                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[20].errors;
                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[20].errors);
                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                            if (data.fixedPeriod === undefined) {
                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                              if (!refVal[12](data.fixedPeriod, (dataPath || '') + '.fixedPeriod', data, 'fixedPeriod', rootData)) {
                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[12].errors;
                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[12].errors);
                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                              if (data.fixedRatio === undefined) {
                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                if (!refVal[21](data.fixedRatio, (dataPath || '') + '.fixedRatio', data, 'fixedRatio', rootData)) {
                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[21].errors;
                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[21].errors);
                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                if (data.fixedReference === undefined) {
                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                  if (!refVal[8](data.fixedReference, (dataPath || '') + '.fixedReference', data, 'fixedReference', rootData)) {
                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                  if (data.fixedSampledData === undefined) {
                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                    if (!refVal[22](data.fixedSampledData, (dataPath || '') + '.fixedSampledData', data, 'fixedSampledData', rootData)) {
                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[22].errors;
                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[22].errors);
                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                    if (data.fixedSignature === undefined) {
                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                      if (!refVal[23](data.fixedSignature, (dataPath || '') + '.fixedSignature', data, 'fixedSignature', rootData)) {
                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[23].errors;
                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[23].errors);
                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                      if (data.fixedHumanName === undefined) {
                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                        if (!refVal[24](data.fixedHumanName, (dataPath || '') + '.fixedHumanName', data, 'fixedHumanName', rootData)) {
                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[24].errors;
                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[24].errors);
                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                        if (data.fixedAddress === undefined) {
                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                          if (!refVal[25](data.fixedAddress, (dataPath || '') + '.fixedAddress', data, 'fixedAddress', rootData)) {
                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[25].errors;
                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[25].errors);
                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                          if (data.fixedContactPoint === undefined) {
                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                            if (!refVal[26](data.fixedContactPoint, (dataPath || '') + '.fixedContactPoint', data, 'fixedContactPoint', rootData)) {
                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[26].errors;
                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[26].errors);
                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                            if (data.fixedTiming === undefined) {
                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                              if (!refVal[27](data.fixedTiming, (dataPath || '') + '.fixedTiming', data, 'fixedTiming', rootData)) {
                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[27].errors;
                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[27].errors);
                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                              if (data.fixedMeta === undefined) {
                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                if (!refVal[29](data.fixedMeta, (dataPath || '') + '.fixedMeta', data, 'fixedMeta', rootData)) {
                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[29].errors;
                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[29].errors);
                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                if (data.fixedElementDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                  if (!refVal[30](data.fixedElementDefinition, (dataPath || '') + '.fixedElementDefinition', data, 'fixedElementDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[30].errors;
                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[30].errors);
                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                  if (data.fixedContactDetail === undefined) {
                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                    if (!refVal[35](data.fixedContactDetail, (dataPath || '') + '.fixedContactDetail', data, 'fixedContactDetail', rootData)) {
                                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[35].errors;
                                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[35].errors);
                                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                    if (data.fixedContributor === undefined) {
                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                      if (!refVal[36](data.fixedContributor, (dataPath || '') + '.fixedContributor', data, 'fixedContributor', rootData)) {
                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[36].errors;
                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[36].errors);
                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                      if (data.fixedDosage === undefined) {
                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                        if (!refVal[37](data.fixedDosage, (dataPath || '') + '.fixedDosage', data, 'fixedDosage', rootData)) {
                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[37].errors;
                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[37].errors);
                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                        if (data.fixedRelatedArtifact === undefined) {
                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                          if (!refVal[38](data.fixedRelatedArtifact, (dataPath || '') + '.fixedRelatedArtifact', data, 'fixedRelatedArtifact', rootData)) {
                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[38].errors;
                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[38].errors);
                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                          if (data.fixedUsageContext === undefined) {
                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                            if (!refVal[39](data.fixedUsageContext, (dataPath || '') + '.fixedUsageContext', data, 'fixedUsageContext', rootData)) {
                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[39].errors;
                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[39].errors);
                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                            if (data.fixedDataRequirement === undefined) {
                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                              if (!refVal[40](data.fixedDataRequirement, (dataPath || '') + '.fixedDataRequirement', data, 'fixedDataRequirement', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[40].errors;
                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[40].errors);
                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                              if (data.fixedParameterDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                if (!refVal[43](data.fixedParameterDefinition, (dataPath || '') + '.fixedParameterDefinition', data, 'fixedParameterDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[43].errors;
                                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[43].errors);
                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                if (data.fixedTriggerDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[44](data.fixedTriggerDefinition, (dataPath || '') + '.fixedTriggerDefinition', data, 'fixedTriggerDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[44].errors;
                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[44].errors);
                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                  if (data.patternBoolean === undefined) {
                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                    if (typeof data.patternBoolean !== "boolean") {
                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.patternBoolean',
                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/patternBoolean/type',
                                                                                                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                                                                                                          type: 'boolean'
                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                        message: 'should be boolean'
                                                                                                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                    if (data._patternBoolean === undefined) {
                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[4](data._patternBoolean, (dataPath || '') + '._patternBoolean', data, '_patternBoolean', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                      var data1 = data.patternInteger;
                                                                                                                                                                                                                                                                                                                                                                      if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                        if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.patternInteger',
                                                                                                                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/patternInteger/type',
                                                                                                                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                                                                                                                              type: 'number'
                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                            message: 'should be number'
                                                                                                                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                          if (!pattern0.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                            validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                              keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.patternInteger',
                                                                                                                                                                                                                                                                                                                                                                              schemaPath: '#/allOf/1/properties/patternInteger/pattern',
                                                                                                                                                                                                                                                                                                                                                                              params: {
                                                                                                                                                                                                                                                                                                                                                                                pattern: '-?([0]|([1-9][0-9]*))'
                                                                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                                                                              message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                                                                                                                                                                                                                                                                                                                                                            }];
                                                                                                                                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                        if (data._patternInteger === undefined) {
                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[4](data._patternInteger, (dataPath || '') + '._patternInteger', data, '_patternInteger', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                          var data1 = data.patternDecimal;
                                                                                                                                                                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                            if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.patternDecimal',
                                                                                                                                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/patternDecimal/type',
                                                                                                                                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                                                                                                                                  type: 'number'
                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                message: 'should be number'
                                                                                                                                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                              if (!pattern1.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.patternDecimal',
                                                                                                                                                                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/patternDecimal/pattern',
                                                                                                                                                                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                                                                                                                                                                    pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                                                                                                                                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                                                                                                                                                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                                                                                                                                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                            if (data._patternDecimal === undefined) {
                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[4](data._patternDecimal, (dataPath || '') + '._patternDecimal', data, '_patternDecimal', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                              if (data.patternBase64Binary === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                if (typeof data.patternBase64Binary !== "string") {
                                                                                                                                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.patternBase64Binary',
                                                                                                                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/patternBase64Binary/type',
                                                                                                                                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                if (data._patternBase64Binary === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[4](data._patternBase64Binary, (dataPath || '') + '._patternBase64Binary', data, '_patternBase64Binary', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternInstant === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                    if (typeof data.patternInstant !== "string") {
                                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.patternInstant',
                                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/patternInstant/type',
                                                                                                                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                    if (data._patternInstant === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[4](data._patternInstant, (dataPath || '') + '._patternInstant', data, '_patternInstant', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternString === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                        if (typeof data.patternString !== "string") {
                                                                                                                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.patternString',
                                                                                                                                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/patternString/type',
                                                                                                                                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                        if (data._patternString === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[4](data._patternString, (dataPath || '') + '._patternString', data, '_patternString', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternUri === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                            if (typeof data.patternUri !== "string") {
                                                                                                                                                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.patternUri',
                                                                                                                                                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/patternUri/type',
                                                                                                                                                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                                                                                                                                                  type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                            if (data._patternUri === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[4](data._patternUri, (dataPath || '') + '._patternUri', data, '_patternUri', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                              var data1 = data.patternDate;
                                                                                                                                                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                  if (!pattern2.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.patternDate',
                                                                                                                                                                                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/patternDate/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                                                                                                                                                                                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                                                                                                                                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                                                                                                                                                                                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                                                                                                                                                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.patternDate',
                                                                                                                                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/patternDate/type',
                                                                                                                                                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                if (data._patternDate === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[4](data._patternDate, (dataPath || '') + '._patternDate', data, '_patternDate', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                  var data1 = data.patternDateTime;
                                                                                                                                                                                                                                                                                                                                                                                                  if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                    if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                      if (!pattern3.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                        validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                          keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.patternDateTime',
                                                                                                                                                                                                                                                                                                                                                                                                          schemaPath: '#/allOf/1/properties/patternDateTime/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                          params: {
                                                                                                                                                                                                                                                                                                                                                                                                            pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                                                                                                                                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                                                                                                                                                                          message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                                                                                                                                                                                                                                                                                                                                                                        }];
                                                                                                                                                                                                                                                                                                                                                                                                        return false;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.patternDateTime',
                                                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/patternDateTime/type',
                                                                                                                                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                    if (data._patternDateTime === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[4](data._patternDateTime, (dataPath || '') + '._patternDateTime', data, '_patternDateTime', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                      var data1 = data.patternTime;
                                                                                                                                                                                                                                                                                                                                                                                                      if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                        if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                          if (!pattern4.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                            validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                              keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.patternTime',
                                                                                                                                                                                                                                                                                                                                                                                                              schemaPath: '#/allOf/1/properties/patternTime/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                              params: {
                                                                                                                                                                                                                                                                                                                                                                                                                pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                                                                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                                                                                                              message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                                                                                                                                                                                                                                                                                                                                                                            }];
                                                                                                                                                                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.patternTime',
                                                                                                                                                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/patternTime/type',
                                                                                                                                                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                        if (data._patternTime === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[4](data._patternTime, (dataPath || '') + '._patternTime', data, '_patternTime', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                          var data1 = data.patternCode;
                                                                                                                                                                                                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                              if (!pattern5.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.patternCode',
                                                                                                                                                                                                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/patternCode/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                                                                                                                                                                                                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                                                                                                                                                                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                                                                                                                                                                                                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                                                                                                                                                                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.patternCode',
                                                                                                                                                                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/patternCode/type',
                                                                                                                                                                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                                                                                                                                                                  type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                            if (data._patternCode === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[4](data._patternCode, (dataPath || '') + '._patternCode', data, '_patternCode', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                              var data1 = data.patternOid;
                                                                                                                                                                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                  if (!pattern6.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.patternOid',
                                                                                                                                                                                                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/patternOid/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                                                                                                                                                                                                        pattern: 'urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*'
                                                                                                                                                                                                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                                                                                                                                                                                                      message: 'should match pattern "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"'
                                                                                                                                                                                                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.patternOid',
                                                                                                                                                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/patternOid/type',
                                                                                                                                                                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                                                                                                                                                                      type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                    message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                if (data._patternOid === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[4](data._patternOid, (dataPath || '') + '._patternOid', data, '_patternOid', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                  var data1 = data.patternUuid;
                                                                                                                                                                                                                                                                                                                                                                                                                  if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                    if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                      if (!pattern7.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                        validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                          keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.patternUuid',
                                                                                                                                                                                                                                                                                                                                                                                                                          schemaPath: '#/allOf/1/properties/patternUuid/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                          params: {
                                                                                                                                                                                                                                                                                                                                                                                                                            pattern: 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                                                                                                                                                                                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                                                                                                                                                                                          message: 'should match pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"'
                                                                                                                                                                                                                                                                                                                                                                                                                        }];
                                                                                                                                                                                                                                                                                                                                                                                                                        return false;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.patternUuid',
                                                                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/patternUuid/type',
                                                                                                                                                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                    if (data._patternUuid === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[4](data._patternUuid, (dataPath || '') + '._patternUuid', data, '_patternUuid', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                      var data1 = data.patternId;
                                                                                                                                                                                                                                                                                                                                                                                                                      if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                        if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                          if (!pattern8.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                            validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                              keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.patternId',
                                                                                                                                                                                                                                                                                                                                                                                                                              schemaPath: '#/allOf/1/properties/patternId/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                              params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                                                                                                                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                                                                                                                              message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                                                                                                                                                                                                                                                                                                                                                                                                                            }];
                                                                                                                                                                                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.patternId',
                                                                                                                                                                                                                                                                                                                                                                                                                            schemaPath: '#/allOf/1/properties/patternId/type',
                                                                                                                                                                                                                                                                                                                                                                                                                            params: {
                                                                                                                                                                                                                                                                                                                                                                                                                              type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                            message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                                          }];
                                                                                                                                                                                                                                                                                                                                                                                                                          return false;
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                        if (data._patternId === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[4](data._patternId, (dataPath || '') + '._patternId', data, '_patternId', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                          var data1 = data.patternUnsignedInt;
                                                                                                                                                                                                                                                                                                                                                                                                                          if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                            if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                                                                              validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.patternUnsignedInt',
                                                                                                                                                                                                                                                                                                                                                                                                                                schemaPath: '#/allOf/1/properties/patternUnsignedInt/type',
                                                                                                                                                                                                                                                                                                                                                                                                                                params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                  type: 'number'
                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                message: 'should be number'
                                                                                                                                                                                                                                                                                                                                                                                                                              }];
                                                                                                                                                                                                                                                                                                                                                                                                                              return false;
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                              if (!pattern9.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.patternUnsignedInt',
                                                                                                                                                                                                                                                                                                                                                                                                                                  schemaPath: '#/allOf/1/properties/patternUnsignedInt/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                  params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                    pattern: '[0]|([1-9][0-9]*)'
                                                                                                                                                                                                                                                                                                                                                                                                                                  },
                                                                                                                                                                                                                                                                                                                                                                                                                                  message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                                                                                                                                                                                                                                                                                                                                                                                }];
                                                                                                                                                                                                                                                                                                                                                                                                                                return false;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                            if (data._patternUnsignedInt === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[4](data._patternUnsignedInt, (dataPath || '') + '._patternUnsignedInt', data, '_patternUnsignedInt', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                              var data1 = data.patternPositiveInt;
                                                                                                                                                                                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                                                                                  validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                    keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.patternPositiveInt',
                                                                                                                                                                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/patternPositiveInt/type',
                                                                                                                                                                                                                                                                                                                                                                                                                                    params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                      type: 'number'
                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                    message: 'should be number'
                                                                                                                                                                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!pattern10.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                      keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.patternPositiveInt',
                                                                                                                                                                                                                                                                                                                                                                                                                                      schemaPath: '#/allOf/1/properties/patternPositiveInt/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                      params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                        pattern: '[1-9][0-9]*'
                                                                                                                                                                                                                                                                                                                                                                                                                                      },
                                                                                                                                                                                                                                                                                                                                                                                                                                      message: 'should match pattern "[1-9][0-9]*"'
                                                                                                                                                                                                                                                                                                                                                                                                                                    }];
                                                                                                                                                                                                                                                                                                                                                                                                                                    return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                if (data._patternPositiveInt === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[4](data._patternPositiveInt, (dataPath || '') + '._patternPositiveInt', data, '_patternPositiveInt', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternMarkdown === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (typeof data.patternMarkdown !== "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                        keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.patternMarkdown',
                                                                                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/patternMarkdown/type',
                                                                                                                                                                                                                                                                                                                                                                                                                                        params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                          type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                        message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                                                      }];
                                                                                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (data._patternMarkdown === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[4](data._patternMarkdown, (dataPath || '') + '._patternMarkdown', data, '_patternMarkdown', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternElement === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!refVal[4](data.patternElement, (dataPath || '') + '.patternElement', data, 'patternElement', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data.patternExtension === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[5](data.patternExtension, (dataPath || '') + '.patternExtension', data, 'patternExtension', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[5].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[5].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternBackboneElement === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!refVal[6](data.patternBackboneElement, (dataPath || '') + '.patternBackboneElement', data, 'patternBackboneElement', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[6].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[6].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data.patternNarrative === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[3](data.patternNarrative, (dataPath || '') + '.patternNarrative', data, 'patternNarrative', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[3].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[3].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (data.patternAnnotation === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!refVal[7](data.patternAnnotation, (dataPath || '') + '.patternAnnotation', data, 'patternAnnotation', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[7].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[7].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (data.patternAttachment === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[13](data.patternAttachment, (dataPath || '') + '.patternAttachment', data, 'patternAttachment', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[13].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[13].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternIdentifier === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (!refVal[9](data.patternIdentifier, (dataPath || '') + '.patternIdentifier', data, 'patternIdentifier', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (data.patternCodeableConcept === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[10](data.patternCodeableConcept, (dataPath || '') + '.patternCodeableConcept', data, 'patternCodeableConcept', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[10].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[10].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternCoding === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!refVal[11](data.patternCoding, (dataPath || '') + '.patternCoding', data, 'patternCoding', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[11].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[11].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data.patternQuantity === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[14](data.patternQuantity, (dataPath || '') + '.patternQuantity', data, 'patternQuantity', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternDuration === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!refVal[15](data.patternDuration, (dataPath || '') + '.patternDuration', data, 'patternDuration', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[15].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[15].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data.patternSimpleQuantity === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[14](data.patternSimpleQuantity, (dataPath || '') + '.patternSimpleQuantity', data, 'patternSimpleQuantity', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (data.patternDistance === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!refVal[16](data.patternDistance, (dataPath || '') + '.patternDistance', data, 'patternDistance', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[16].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[16].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (data.patternCount === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[17](data.patternCount, (dataPath || '') + '.patternCount', data, 'patternCount', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[17].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[17].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternMoney === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (!refVal[18](data.patternMoney, (dataPath || '') + '.patternMoney', data, 'patternMoney', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[18].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[18].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (data.patternAge === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[19](data.patternAge, (dataPath || '') + '.patternAge', data, 'patternAge', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[19].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[19].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternRange === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!refVal[20](data.patternRange, (dataPath || '') + '.patternRange', data, 'patternRange', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[20].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[20].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data.patternPeriod === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[12](data.patternPeriod, (dataPath || '') + '.patternPeriod', data, 'patternPeriod', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[12].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[12].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternRatio === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!refVal[21](data.patternRatio, (dataPath || '') + '.patternRatio', data, 'patternRatio', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[21].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[21].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data.patternReference === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[8](data.patternReference, (dataPath || '') + '.patternReference', data, 'patternReference', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (data.patternSampledData === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!refVal[22](data.patternSampledData, (dataPath || '') + '.patternSampledData', data, 'patternSampledData', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[22].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[22].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (data.patternSignature === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[23](data.patternSignature, (dataPath || '') + '.patternSignature', data, 'patternSignature', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[23].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[23].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternHumanName === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (!refVal[24](data.patternHumanName, (dataPath || '') + '.patternHumanName', data, 'patternHumanName', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[24].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[24].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (data.patternAddress === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[25](data.patternAddress, (dataPath || '') + '.patternAddress', data, 'patternAddress', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[25].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[25].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternContactPoint === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!refVal[26](data.patternContactPoint, (dataPath || '') + '.patternContactPoint', data, 'patternContactPoint', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[26].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[26].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data.patternTiming === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[27](data.patternTiming, (dataPath || '') + '.patternTiming', data, 'patternTiming', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[27].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[27].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternMeta === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!refVal[29](data.patternMeta, (dataPath || '') + '.patternMeta', data, 'patternMeta', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[29].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[29].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data.patternElementDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[30](data.patternElementDefinition, (dataPath || '') + '.patternElementDefinition', data, 'patternElementDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[30].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[30].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (data.patternContactDetail === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!refVal[35](data.patternContactDetail, (dataPath || '') + '.patternContactDetail', data, 'patternContactDetail', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (vErrors === null) vErrors = refVal[35].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else vErrors = vErrors.concat(refVal[35].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (data.patternContributor === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[36](data.patternContributor, (dataPath || '') + '.patternContributor', data, 'patternContributor', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (vErrors === null) vErrors = refVal[36].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else vErrors = vErrors.concat(refVal[36].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data.patternDosage === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (!refVal[37](data.patternDosage, (dataPath || '') + '.patternDosage', data, 'patternDosage', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (vErrors === null) vErrors = refVal[37].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else vErrors = vErrors.concat(refVal[37].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (data.patternRelatedArtifact === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!refVal[38](data.patternRelatedArtifact, (dataPath || '') + '.patternRelatedArtifact', data, 'patternRelatedArtifact', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[38].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else vErrors = vErrors.concat(refVal[38].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.patternUsageContext === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!refVal[39](data.patternUsageContext, (dataPath || '') + '.patternUsageContext', data, 'patternUsageContext', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (vErrors === null) vErrors = refVal[39].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[39].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data.patternDataRequirement === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[40](data.patternDataRequirement, (dataPath || '') + '.patternDataRequirement', data, 'patternDataRequirement', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (vErrors === null) vErrors = refVal[40].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[40].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data.patternParameterDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!refVal[43](data.patternParameterDefinition, (dataPath || '') + '.patternParameterDefinition', data, 'patternParameterDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[43].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else vErrors = vErrors.concat(refVal[43].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data.patternTriggerDefinition === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!refVal[44](data.patternTriggerDefinition, (dataPath || '') + '.patternTriggerDefinition', data, 'patternTriggerDefinition', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (vErrors === null) vErrors = refVal[44].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else vErrors = vErrors.concat(refVal[44].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              var data1 = data.example;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (Array.isArray(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs__2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  for (var i2 = 0; i2 < data1.length; i2++) {
var errs_3 = errors;
if (!refVal45(data1[i2], (dataPath || '') + '.example[' + i2 + ']', data1, i2, rootData)) {
if (vErrors === null) vErrors = refVal45.errors;
else vErrors = vErrors.concat(refVal45.errors);
errors = vErrors.length;
}
var valid3 = errors === errs_3;
if (!valid3) break;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.example',
schemaPath: '#/allOf/1/properties/example/type',
params: {
type: 'array'
},
message: 'should be array'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var data1 = data.minValueDate;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (typeof data1 === "string") {
if (!pattern2.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.minValueDate',
schemaPath: '#/allOf/1/properties/minValueDate/pattern',
params: {
pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
},
message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
}];
return false;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueDate',
schemaPath: '#/allOf/1/properties/minValueDate/type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      params: {
type: 'string'
},
message: 'should be string'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (data._minValueDate === undefined) {
valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
var errs_2 = errors;
if (!refVal[4](data._minValueDate, (dataPath || '') + '._minValueDate', data, '_minValueDate', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (valid2) {
var data1 = data.minValueDateTime;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 === "string") {
if (!pattern3.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'pattern',
dataPath: (dataPath || '') + '.minValueDateTime',
schemaPath: '#/allOf/1/properties/minValueDateTime/pattern',
params: {
pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
},
message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
}];
return false;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueDateTime',
schemaPath: '#/allOf/1/properties/minValueDateTime/type',
params: {
type: 'string'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          },
message: 'should be string'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValueDateTime === undefined) {
valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
var errs_2 = errors;
if (!refVal[4](data._minValueDateTime, (dataPath || '') + '._minValueDateTime', data, '_minValueDateTime', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
var valid2 = errors === errs_2;
}
if (valid2) {
if (data.minValueInstant === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data.minValueInstant !== "string") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueInstant',
schemaPath: '#/allOf/1/properties/minValueInstant/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValueInstant === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._minValueInstant, (dataPath || '') + '._minValueInstant', data, '_minValueInstant', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.minValueTime;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 === "string") {
if (!pattern4.test(data1)) {
validate.errors = [{
keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    dataPath: (dataPath || '') + '.minValueTime',
schemaPath: '#/allOf/1/properties/minValueTime/pattern',
params: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
},
message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
}];
return false;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueTime',
schemaPath: '#/allOf/1/properties/minValueTime/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValueTime === undefined) {
valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              } else {
var errs_2 = errors;
if (!refVal[4](data._minValueTime, (dataPath || '') + '._minValueTime', data, '_minValueTime', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.minValueDecimal;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueDecimal',
schemaPath: '#/allOf/1/properties/minValueDecimal/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern1.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.minValueDecimal',
schemaPath: '#/allOf/1/properties/minValueDecimal/pattern',
params: {
pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
},
message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
}];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValueDecimal === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._minValueDecimal, (dataPath || '') + '._minValueDecimal', data, '_minValueDecimal', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.minValueInteger;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueInteger',
schemaPath: '#/allOf/1/properties/minValueInteger/type',
params: {
type: 'number'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          },
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern0.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.minValueInteger',
schemaPath: '#/allOf/1/properties/minValueInteger/pattern',
params: {
pattern: '-?([0]|([1-9][0-9]*))'
},
message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
}];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          return false;
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
if (valid2) {
if (data._minValueInteger === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._minValueInteger, (dataPath || '') + '._minValueInteger', data, '_minValueInteger', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.minValuePositiveInt;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              dataPath: (dataPath || '') + '.minValuePositiveInt',
schemaPath: '#/allOf/1/properties/minValuePositiveInt/type',
params: {
type: 'number'
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              message: 'should be number'
}];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
if (typeof data1 === "string") {
if (!pattern10.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.minValuePositiveInt',
schemaPath: '#/allOf/1/properties/minValuePositiveInt/pattern',
params: {
pattern: '[1-9][0-9]*'
},
message: 'should match pattern "[1-9][0-9]*"'
}];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValuePositiveInt === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._minValuePositiveInt, (dataPath || '') + '._minValuePositiveInt', data, '_minValuePositiveInt', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.minValueUnsignedInt;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.minValueUnsignedInt',
schemaPath: '#/allOf/1/properties/minValueUnsignedInt/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern9.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.minValueUnsignedInt',
schemaPath: '#/allOf/1/properties/minValueUnsignedInt/pattern',
params: {
pattern: '[0]|([1-9][0-9]*)'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._minValueUnsignedInt === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._minValueUnsignedInt, (dataPath || '') + '._minValueUnsignedInt', data, '_minValueUnsignedInt', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  errors = vErrors.length;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                var valid2 = errors === errs_2;
}
if (valid2) {
if (data.minValueQuantity === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[14](data.minValueQuantity, (dataPath || '') + '.minValueQuantity', data, 'minValueQuantity', rootData)) {
if (vErrors === null) vErrors = refVal[14].errors;
else vErrors = vErrors.concat(refVal[14].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
if (valid2) {
var data1 = data.maxValueDate;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (!pattern2.test(data1)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.maxValueDate',
schemaPath: '#/allOf/1/properties/maxValueDate/pattern',
params: {
pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
},
message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueDate',
schemaPath: '#/allOf/1/properties/maxValueDate/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueDate === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxValueDate, (dataPath || '') + '._maxValueDate', data, '_maxValueDate', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var data1 = data.maxValueDateTime;
if (data1 === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 === "string") {
if (!pattern3.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.maxValueDateTime',
schemaPath: '#/allOf/1/properties/maxValueDateTime/pattern',
params: {
pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
},
message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
}];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return false;
}
} else {
validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            dataPath: (dataPath || '') + '.maxValueDateTime',
schemaPath: '#/allOf/1/properties/maxValueDateTime/type',
params: {
type: 'string'
},
message: 'should be string'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }];
return false;
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (valid2) {
if (data._maxValueDateTime === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxValueDateTime, (dataPath || '') + '._maxValueDateTime', data, '_maxValueDateTime', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
if (data.maxValueInstant === undefined) {
valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            var errs_2 = errors;
if (typeof data.maxValueInstant !== "string") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueInstant',
schemaPath: '#/allOf/1/properties/maxValueInstant/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueInstant === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxValueInstant, (dataPath || '') + '._maxValueInstant', data, '_maxValueInstant', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.maxValueTime;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (typeof data1 === "string") {
if (!pattern4.test(data1)) {
validate.errors = [{
keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      dataPath: (dataPath || '') + '.maxValueTime',
schemaPath: '#/allOf/1/properties/maxValueTime/pattern',
params: {
pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
},
message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
}];
return false;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueTime',
schemaPath: '#/allOf/1/properties/maxValueTime/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueTime === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
if (!refVal[4](data._maxValueTime, (dataPath || '') + '._maxValueTime', data, '_maxValueTime', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.maxValueDecimal;
if (data1 === undefined) {
valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var errs_2 = errors;
if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueDecimal',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        schemaPath: '#/allOf/1/properties/maxValueDecimal/type',
params: {
type: 'number'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern1.test(data1)) {
validate.errors = [{
keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          dataPath: (dataPath || '') + '.maxValueDecimal',
schemaPath: '#/allOf/1/properties/maxValueDecimal/pattern',
params: {
pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
},
message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueDecimal === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxValueDecimal, (dataPath || '') + '._maxValueDecimal', data, '_maxValueDecimal', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.maxValueInteger;
if (data1 === undefined) {
valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueInteger',
schemaPath: '#/allOf/1/properties/maxValueInteger/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern0.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.maxValueInteger',
schemaPath: '#/allOf/1/properties/maxValueInteger/pattern',
params: {
pattern: '-?([0]|([1-9][0-9]*))'
},
message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
}];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueInteger === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (!refVal[4](data._maxValueInteger, (dataPath || '') + '._maxValueInteger', data, '_maxValueInteger', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          var data1 = data.maxValuePositiveInt;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              validate.errors = [{
keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '.maxValuePositiveInt',
schemaPath: '#/allOf/1/properties/maxValuePositiveInt/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
if (typeof data1 === "string") {
if (!pattern10.test(data1)) {
validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  keyword: 'pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  dataPath: (dataPath || '') + '.maxValuePositiveInt',
schemaPath: '#/allOf/1/properties/maxValuePositiveInt/pattern',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  params: {
pattern: '[1-9][0-9]*'
},
message: 'should match pattern "[1-9][0-9]*"'
}];
return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValuePositiveInt === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxValuePositiveInt, (dataPath || '') + '._maxValuePositiveInt', data, '_maxValuePositiveInt', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.maxValueUnsignedInt;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxValueUnsignedInt',
schemaPath: '#/allOf/1/properties/maxValueUnsignedInt/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!pattern9.test(data1)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.maxValueUnsignedInt',
schemaPath: '#/allOf/1/properties/maxValueUnsignedInt/pattern',
params: {
pattern: '[0]|([1-9][0-9]*)'
},
message: 'should match pattern "[0]|([1-9][0-9]*)"'
}];
return false;
}
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._maxValueUnsignedInt === undefined) {
valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (!refVal[4](data._maxValueUnsignedInt, (dataPath || '') + '._maxValueUnsignedInt', data, '_maxValueUnsignedInt', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
if (valid2) {
if (data.maxValueQuantity === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[14](data.maxValueQuantity, (dataPath || '') + '.maxValueQuantity', data, 'maxValueQuantity', rootData)) {
if (vErrors === null) vErrors = refVal[14].errors;
else vErrors = vErrors.concat(refVal[14].errors);
errors = vErrors.length;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.maxLength;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data1 !== "number") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.maxLength',
schemaPath: '#/allOf/1/properties/maxLength/type',
params: {
type: 'number'
},
message: 'should be number'
}];
return false;
}
if (typeof data1 === "string") {
if (!pattern0.test(data1)) {
validate.errors = [{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            keyword: 'pattern',
dataPath: (dataPath || '') + '.maxLength',
schemaPath: '#/allOf/1/properties/maxLength/pattern',
params: {
pattern: '-?([0]|([1-9][0-9]*))'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
}];
return false;
}
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
if (valid2) {
if (data._maxLength === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._maxLength, (dataPath || '') + '._maxLength', data, '_maxLength', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.condition;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (Array.isArray(data1)) {
var errs__2 = errors;
var valid2;
for (var i2 = 0; i2 < data1.length; i2++) {
var data2 = data1[i2];
var errs_3 = errors;
if (typeof data2 === "string") {
if (!pattern8.test(data2)) {
validate.errors = [{
keyword: 'pattern',
dataPath: (dataPath || '') + '.condition[' + i2 + ']',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    schemaPath: '#/allOf/1/properties/condition/items/pattern',
params: {
pattern: '[A-Za-z0-9\\-\\.]{1,64}'
},
message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
}];
return false;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.condition[' + i2 + ']',
schemaPath: '#/allOf/1/properties/condition/items/type',
params: {
type: 'string'
},
message: 'should be string'
}];
return false;
}
var valid3 = errors === errs_3;
if (!valid3) break;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.condition',
schemaPath: '#/allOf/1/properties/condition/type',
params: {
type: 'array'
},
message: 'should be array'
}];
return false;
}
var valid2 = errors === errs_2;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (valid2) {
var data1 = data._condition;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (Array.isArray(data1)) {
var errs__2 = errors;
var valid2;
for (var i2 = 0; i2 < data1.length; i2++) {
var errs_3 = errors;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!refVal[4](data1[i2], (dataPath || '') + '._condition[' + i2 + ']', data1, i2, rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid3 = errors === errs_3;
if (!valid3) break;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
} else {
validate.errors = [{
keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                dataPath: (dataPath || '') + '._condition',
schemaPath: '#/allOf/1/properties/_condition/type',
params: {
type: 'array'
},
message: 'should be array'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
var data1 = data.constraint;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (Array.isArray(data1)) {
var errs__2 = errors;
var valid2;
for (var i2 = 0; i2 < data1.length; i2++) {
var errs_3 = errors;
if (!refVal46(data1[i2], (dataPath || '') + '.constraint[' + i2 + ']', data1, i2, rootData)) {
if (vErrors === null) vErrors = refVal46.errors;
else vErrors = vErrors.concat(refVal46.errors);
errors = vErrors.length;
}
var valid3 = errors === errs_3;
if (!valid3) break;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.constraint',
schemaPath: '#/allOf/1/properties/constraint/type',
params: {
type: 'array'
},
message: 'should be array'
}];
return false;
}
var valid2 = errors === errs_2;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (valid2) {
if (data.mustSupport === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data.mustSupport !== "boolean") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.mustSupport',
schemaPath: '#/allOf/1/properties/mustSupport/type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    params: {
type: 'boolean'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    message: 'should be boolean'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._mustSupport === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._mustSupport, (dataPath || '') + '._mustSupport', data, '_mustSupport', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (valid2) {
if (data.isModifier === undefined) {
valid2 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
var errs_2 = errors;
if (typeof data.isModifier !== "boolean") {
validate.errors = [{
keyword: 'type',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        dataPath: (dataPath || '') + '.isModifier',
schemaPath: '#/allOf/1/properties/isModifier/type',
params: {
type: 'boolean'
},
message: 'should be boolean'
}];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      return false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._isModifier === undefined) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      valid2 = true;
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      var errs_2 = errors;
if (!refVal[4](data._isModifier, (dataPath || '') + '._isModifier', data, '_isModifier', rootData)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (data.isSummary === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (typeof data.isSummary !== "boolean") {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.isSummary',
schemaPath: '#/allOf/1/properties/isSummary/type',
params: {
type: 'boolean'
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            message: 'should be boolean'
}];
return false;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data._isSummary === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal[4](data._isSummary, (dataPath || '') + '._isSummary', data, '_isSummary', rootData)) {
if (vErrors === null) vErrors = refVal[4].errors;
else vErrors = vErrors.concat(refVal[4].errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
}
if (valid2) {
if (data.binding === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (!refVal47(data.binding, (dataPath || '') + '.binding', data, 'binding', rootData)) {
if (vErrors === null) vErrors = refVal47.errors;
else vErrors = vErrors.concat(refVal47.errors);
errors = vErrors.length;
}
var valid2 = errors === errs_2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
if (valid2) {
var data1 = data.mapping;
if (data1 === undefined) {
valid2 = true;
} else {
var errs_2 = errors;
if (Array.isArray(data1)) {
var errs__2 = errors;
var valid2;
for (var i2 = 0; i2 < data1.length; i2++) {
var errs_3 = errors;
if (!refVal48(data1[i2], (dataPath || '') + '.mapping[' + i2 + ']', data1, i2, rootData)) {
if (vErrors === null) vErrors = refVal48.errors;
else vErrors = vErrors.concat(refVal48.errors);
errors = vErrors.length;
}
var valid3 = errors === errs_3;
if (!valid3) break;
}
} else {
validate.errors = [{
keyword: 'type',
dataPath: (dataPath || '') + '.mapping',
schemaPath: '#/allOf/1/properties/mapping/type',
params: {
type: 'array'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  },
message: 'should be array'
}];
return false;
}
var valid2 = errors === errs_2;
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal30.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "path": {
          "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
          "type": "string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "representation": {
          "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
          "enum": ["xmlAttr", "xmlText", "typeAttr", "cdaText", "xhtml"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_representation": {
          "description": "Extensions for representation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "sliceName": {
          "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
          "type": "string"
        },
        "_sliceName": {
          "description": "Extensions for sliceName",
          "$ref": "#/definitions/Element"
        },
        "label": {
          "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
          "type": "string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A code that has the same meaning as the element in a particular terminology.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "slicing": {
          "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
          "$ref": "#/definitions/ElementDefinition_Slicing"
        },
        "short": {
          "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
          "type": "string"
        },
        "_short": {
          "description": "Extensions for short",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.",
          "type": "string"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.",
          "type": "string"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
          "type": "string"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "alias": {
          "description": "Identifies additional names by which this element might also be known.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_alias": {
          "description": "Extensions for alias",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "min": {
          "description": "The minimum number of times this element SHALL appear in the instance.",
          "type": "number",
          "pattern": "[0]|([1-9][0-9]*)"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the instance.",
          "type": "string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "base": {
          "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.",
          "$ref": "#/definitions/ElementDefinition_Base"
        },
        "contentReference": {
          "description": "Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.",
          "type": "string"
        },
        "_contentReference": {
          "description": "Extensions for contentReference",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The data type or resource that the value of this element is permitted to be.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Type"
          }
        },
        "defaultValueBoolean": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "boolean"
        },
        "_defaultValueBoolean": {
          "description": "Extensions for defaultValueBoolean",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInteger": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_defaultValueInteger": {
          "description": "Extensions for defaultValueInteger",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDecimal": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_defaultValueDecimal": {
          "description": "Extensions for defaultValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "defaultValueBase64Binary": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "string"
        },
        "_defaultValueBase64Binary": {
          "description": "Extensions for defaultValueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "defaultValueInstant": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "string"
        },
        "_defaultValueInstant": {
          "description": "Extensions for defaultValueInstant",
          "$ref": "#/definitions/Element"
        },
        "defaultValueString": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "string"
        },
        "_defaultValueString": {
          "description": "Extensions for defaultValueString",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUri": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "string"
        },
        "_defaultValueUri": {
          "description": "Extensions for defaultValueUri",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDate": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_defaultValueDate": {
          "description": "Extensions for defaultValueDate",
          "$ref": "#/definitions/Element"
        },
        "defaultValueDateTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_defaultValueDateTime": {
          "description": "Extensions for defaultValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueTime": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_defaultValueTime": {
          "description": "Extensions for defaultValueTime",
          "$ref": "#/definitions/Element"
        },
        "defaultValueCode": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
          "type": "string"
        },
        "_defaultValueCode": {
          "description": "Extensions for defaultValueCode",
          "$ref": "#/definitions/Element"
        },
        "defaultValueOid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
          "type": "string"
        },
        "_defaultValueOid": {
          "description": "Extensions for defaultValueOid",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUuid": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
          "type": "string"
        },
        "_defaultValueUuid": {
          "description": "Extensions for defaultValueUuid",
          "$ref": "#/definitions/Element"
        },
        "defaultValueId": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
          "type": "string"
        },
        "_defaultValueId": {
          "description": "Extensions for defaultValueId",
          "$ref": "#/definitions/Element"
        },
        "defaultValueUnsignedInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_defaultValueUnsignedInt": {
          "description": "Extensions for defaultValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValuePositiveInt": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_defaultValuePositiveInt": {
          "description": "Extensions for defaultValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "defaultValueMarkdown": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "type": "string"
        },
        "_defaultValueMarkdown": {
          "description": "Extensions for defaultValueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "defaultValueElement": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Element"
        },
        "defaultValueExtension": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Extension"
        },
        "defaultValueBackboneElement": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/BackboneElement"
        },
        "defaultValueNarrative": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Narrative"
        },
        "defaultValueAnnotation": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Annotation"
        },
        "defaultValueAttachment": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Attachment"
        },
        "defaultValueIdentifier": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Identifier"
        },
        "defaultValueCodeableConcept": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/CodeableConcept"
        },
        "defaultValueCoding": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Coding"
        },
        "defaultValueQuantity": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Quantity"
        },
        "defaultValueDuration": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Duration"
        },
        "defaultValueSimpleQuantity": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Quantity"
        },
        "defaultValueDistance": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Distance"
        },
        "defaultValueCount": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Count"
        },
        "defaultValueMoney": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Money"
        },
        "defaultValueAge": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Age"
        },
        "defaultValueRange": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Range"
        },
        "defaultValuePeriod": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Period"
        },
        "defaultValueRatio": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Ratio"
        },
        "defaultValueReference": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Reference"
        },
        "defaultValueSampledData": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/SampledData"
        },
        "defaultValueSignature": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Signature"
        },
        "defaultValueHumanName": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/HumanName"
        },
        "defaultValueAddress": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Address"
        },
        "defaultValueContactPoint": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ContactPoint"
        },
        "defaultValueTiming": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Timing"
        },
        "defaultValueMeta": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Meta"
        },
        "defaultValueElementDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ElementDefinition"
        },
        "defaultValueContactDetail": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ContactDetail"
        },
        "defaultValueContributor": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Contributor"
        },
        "defaultValueDosage": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/Dosage"
        },
        "defaultValueRelatedArtifact": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "defaultValueUsageContext": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/UsageContext"
        },
        "defaultValueDataRequirement": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/DataRequirement"
        },
        "defaultValueParameterDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "defaultValueTriggerDefinition": {
          "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "meaningWhenMissing": {
          "description": "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.",
          "type": "string"
        },
        "_meaningWhenMissing": {
          "description": "Extensions for meaningWhenMissing",
          "$ref": "#/definitions/Element"
        },
        "orderMeaning": {
          "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
          "type": "string"
        },
        "_orderMeaning": {
          "description": "Extensions for orderMeaning",
          "$ref": "#/definitions/Element"
        },
        "fixedBoolean": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "boolean"
        },
        "_fixedBoolean": {
          "description": "Extensions for fixedBoolean",
          "$ref": "#/definitions/Element"
        },
        "fixedInteger": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_fixedInteger": {
          "description": "Extensions for fixedInteger",
          "$ref": "#/definitions/Element"
        },
        "fixedDecimal": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_fixedDecimal": {
          "description": "Extensions for fixedDecimal",
          "$ref": "#/definitions/Element"
        },
        "fixedBase64Binary": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "string"
        },
        "_fixedBase64Binary": {
          "description": "Extensions for fixedBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "fixedInstant": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "string"
        },
        "_fixedInstant": {
          "description": "Extensions for fixedInstant",
          "$ref": "#/definitions/Element"
        },
        "fixedString": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "string"
        },
        "_fixedString": {
          "description": "Extensions for fixedString",
          "$ref": "#/definitions/Element"
        },
        "fixedUri": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "string"
        },
        "_fixedUri": {
          "description": "Extensions for fixedUri",
          "$ref": "#/definitions/Element"
        },
        "fixedDate": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_fixedDate": {
          "description": "Extensions for fixedDate",
          "$ref": "#/definitions/Element"
        },
        "fixedDateTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_fixedDateTime": {
          "description": "Extensions for fixedDateTime",
          "$ref": "#/definitions/Element"
        },
        "fixedTime": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_fixedTime": {
          "description": "Extensions for fixedTime",
          "$ref": "#/definitions/Element"
        },
        "fixedCode": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
          "type": "string"
        },
        "_fixedCode": {
          "description": "Extensions for fixedCode",
          "$ref": "#/definitions/Element"
        },
        "fixedOid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
          "type": "string"
        },
        "_fixedOid": {
          "description": "Extensions for fixedOid",
          "$ref": "#/definitions/Element"
        },
        "fixedUuid": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
          "type": "string"
        },
        "_fixedUuid": {
          "description": "Extensions for fixedUuid",
          "$ref": "#/definitions/Element"
        },
        "fixedId": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
          "type": "string"
        },
        "_fixedId": {
          "description": "Extensions for fixedId",
          "$ref": "#/definitions/Element"
        },
        "fixedUnsignedInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_fixedUnsignedInt": {
          "description": "Extensions for fixedUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "fixedPositiveInt": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_fixedPositiveInt": {
          "description": "Extensions for fixedPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "fixedMarkdown": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "type": "string"
        },
        "_fixedMarkdown": {
          "description": "Extensions for fixedMarkdown",
          "$ref": "#/definitions/Element"
        },
        "fixedElement": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Element"
        },
        "fixedExtension": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Extension"
        },
        "fixedBackboneElement": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/BackboneElement"
        },
        "fixedNarrative": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Narrative"
        },
        "fixedAnnotation": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Annotation"
        },
        "fixedAttachment": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Attachment"
        },
        "fixedIdentifier": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Identifier"
        },
        "fixedCodeableConcept": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "fixedCoding": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Coding"
        },
        "fixedQuantity": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Quantity"
        },
        "fixedDuration": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Duration"
        },
        "fixedSimpleQuantity": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Quantity"
        },
        "fixedDistance": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Distance"
        },
        "fixedCount": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Count"
        },
        "fixedMoney": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Money"
        },
        "fixedAge": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Age"
        },
        "fixedRange": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Range"
        },
        "fixedPeriod": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Period"
        },
        "fixedRatio": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Ratio"
        },
        "fixedReference": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Reference"
        },
        "fixedSampledData": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/SampledData"
        },
        "fixedSignature": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Signature"
        },
        "fixedHumanName": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/HumanName"
        },
        "fixedAddress": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Address"
        },
        "fixedContactPoint": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactPoint"
        },
        "fixedTiming": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Timing"
        },
        "fixedMeta": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Meta"
        },
        "fixedElementDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ElementDefinition"
        },
        "fixedContactDetail": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ContactDetail"
        },
        "fixedContributor": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Contributor"
        },
        "fixedDosage": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/Dosage"
        },
        "fixedRelatedArtifact": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "fixedUsageContext": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/UsageContext"
        },
        "fixedDataRequirement": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/DataRequirement"
        },
        "fixedParameterDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "fixedTriggerDefinition": {
          "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "patternBoolean": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "boolean"
        },
        "_patternBoolean": {
          "description": "Extensions for patternBoolean",
          "$ref": "#/definitions/Element"
        },
        "patternInteger": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_patternInteger": {
          "description": "Extensions for patternInteger",
          "$ref": "#/definitions/Element"
        },
        "patternDecimal": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_patternDecimal": {
          "description": "Extensions for patternDecimal",
          "$ref": "#/definitions/Element"
        },
        "patternBase64Binary": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "string"
        },
        "_patternBase64Binary": {
          "description": "Extensions for patternBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "patternInstant": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "string"
        },
        "_patternInstant": {
          "description": "Extensions for patternInstant",
          "$ref": "#/definitions/Element"
        },
        "patternString": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "string"
        },
        "_patternString": {
          "description": "Extensions for patternString",
          "$ref": "#/definitions/Element"
        },
        "patternUri": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "string"
        },
        "_patternUri": {
          "description": "Extensions for patternUri",
          "$ref": "#/definitions/Element"
        },
        "patternDate": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_patternDate": {
          "description": "Extensions for patternDate",
          "$ref": "#/definitions/Element"
        },
        "patternDateTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_patternDateTime": {
          "description": "Extensions for patternDateTime",
          "$ref": "#/definitions/Element"
        },
        "patternTime": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_patternTime": {
          "description": "Extensions for patternTime",
          "$ref": "#/definitions/Element"
        },
        "patternCode": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
          "type": "string"
        },
        "_patternCode": {
          "description": "Extensions for patternCode",
          "$ref": "#/definitions/Element"
        },
        "patternOid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
          "type": "string"
        },
        "_patternOid": {
          "description": "Extensions for patternOid",
          "$ref": "#/definitions/Element"
        },
        "patternUuid": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
          "type": "string"
        },
        "_patternUuid": {
          "description": "Extensions for patternUuid",
          "$ref": "#/definitions/Element"
        },
        "patternId": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
          "type": "string"
        },
        "_patternId": {
          "description": "Extensions for patternId",
          "$ref": "#/definitions/Element"
        },
        "patternUnsignedInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_patternUnsignedInt": {
          "description": "Extensions for patternUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "patternPositiveInt": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_patternPositiveInt": {
          "description": "Extensions for patternPositiveInt",
          "$ref": "#/definitions/Element"
        },
        "patternMarkdown": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "type": "string"
        },
        "_patternMarkdown": {
          "description": "Extensions for patternMarkdown",
          "$ref": "#/definitions/Element"
        },
        "patternElement": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Element"
        },
        "patternExtension": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Extension"
        },
        "patternBackboneElement": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/BackboneElement"
        },
        "patternNarrative": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Narrative"
        },
        "patternAnnotation": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Annotation"
        },
        "patternAttachment": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Attachment"
        },
        "patternIdentifier": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Identifier"
        },
        "patternCodeableConcept": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "patternCoding": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Coding"
        },
        "patternQuantity": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Quantity"
        },
        "patternDuration": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Duration"
        },
        "patternSimpleQuantity": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Quantity"
        },
        "patternDistance": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Distance"
        },
        "patternCount": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Count"
        },
        "patternMoney": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Money"
        },
        "patternAge": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Age"
        },
        "patternRange": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Range"
        },
        "patternPeriod": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Period"
        },
        "patternRatio": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Ratio"
        },
        "patternReference": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Reference"
        },
        "patternSampledData": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/SampledData"
        },
        "patternSignature": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Signature"
        },
        "patternHumanName": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/HumanName"
        },
        "patternAddress": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Address"
        },
        "patternContactPoint": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/ContactPoint"
        },
        "patternTiming": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Timing"
        },
        "patternMeta": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Meta"
        },
        "patternElementDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/ElementDefinition"
        },
        "patternContactDetail": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/ContactDetail"
        },
        "patternContributor": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Contributor"
        },
        "patternDosage": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/Dosage"
        },
        "patternRelatedArtifact": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "patternUsageContext": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/UsageContext"
        },
        "patternDataRequirement": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/DataRequirement"
        },
        "patternParameterDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "patternTriggerDefinition": {
          "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
          "$ref": "#/definitions/TriggerDefinition"
        },
        "example": {
          "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Example"
          }
        },
        "minValueDate": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_minValueDate": {
          "description": "Extensions for minValueDate",
          "$ref": "#/definitions/Element"
        },
        "minValueDateTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_minValueDateTime": {
          "description": "Extensions for minValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "minValueInstant": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "type": "string"
        },
        "_minValueInstant": {
          "description": "Extensions for minValueInstant",
          "$ref": "#/definitions/Element"
        },
        "minValueTime": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_minValueTime": {
          "description": "Extensions for minValueTime",
          "$ref": "#/definitions/Element"
        },
        "minValueDecimal": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_minValueDecimal": {
          "description": "Extensions for minValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "minValueInteger": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_minValueInteger": {
          "description": "Extensions for minValueInteger",
          "$ref": "#/definitions/Element"
        },
        "minValuePositiveInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_minValuePositiveInt": {
          "description": "Extensions for minValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "minValueUnsignedInt": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_minValueUnsignedInt": {
          "description": "Extensions for minValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "minValueQuantity": {
          "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxValueDate": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_maxValueDate": {
          "description": "Extensions for maxValueDate",
          "$ref": "#/definitions/Element"
        },
        "maxValueDateTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_maxValueDateTime": {
          "description": "Extensions for maxValueDateTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueInstant": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "type": "string"
        },
        "_maxValueInstant": {
          "description": "Extensions for maxValueInstant",
          "$ref": "#/definitions/Element"
        },
        "maxValueTime": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_maxValueTime": {
          "description": "Extensions for maxValueTime",
          "$ref": "#/definitions/Element"
        },
        "maxValueDecimal": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_maxValueDecimal": {
          "description": "Extensions for maxValueDecimal",
          "$ref": "#/definitions/Element"
        },
        "maxValueInteger": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_maxValueInteger": {
          "description": "Extensions for maxValueInteger",
          "$ref": "#/definitions/Element"
        },
        "maxValuePositiveInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_maxValuePositiveInt": {
          "description": "Extensions for maxValuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueUnsignedInt": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_maxValueUnsignedInt": {
          "description": "Extensions for maxValueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "maxValueQuantity": {
          "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "$ref": "#/definitions/Quantity"
        },
        "maxLength": {
          "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_maxLength": {
          "description": "Extensions for maxLength",
          "$ref": "#/definitions/Element"
        },
        "condition": {
          "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
          }
        },
        "_condition": {
          "description": "Extensions for condition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "constraint": {
          "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Constraint"
          }
        },
        "mustSupport": {
          "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported.",
          "type": "boolean"
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "$ref": "#/definitions/Element"
        },
        "isModifier": {
          "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
          "type": "boolean"
        },
        "_isModifier": {
          "description": "Extensions for isModifier",
          "$ref": "#/definitions/Element"
        },
        "isSummary": {
          "description": "Whether the element should be included if a client requests a search with the parameter _summary=true.",
          "type": "boolean"
        },
        "_isSummary": {
          "description": "Extensions for isSummary",
          "$ref": "#/definitions/Element"
        },
        "binding": {
          "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
          "$ref": "#/definitions/ElementDefinition_Binding"
        },
        "mapping": {
          "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Mapping"
          }
        }
      }
    }]
  };
  refVal30.errors = null;
  refVal[30] = refVal30;
  var refVal31 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.discriminator;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (Array.isArray(data1)) {
              var errs__2 = errors;
              var valid2;
              for (var i2 = 0; i2 < data1.length; i2++) {
                var errs_3 = errors;
                if (!refVal32(data1[i2], (dataPath || '') + '.discriminator[' + i2 + ']', data1, i2, rootData)) {
                  if (vErrors === null) vErrors = refVal32.errors;
                  else vErrors = vErrors.concat(refVal32.errors);
                  errors = vErrors.length;
                }
                var valid3 = errors === errs_3;
                if (!valid3) break;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.discriminator',
                schemaPath: '#/allOf/1/properties/discriminator/type',
                params: {
                  type: 'array'
                },
                message: 'should be array'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data.description === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (typeof data.description !== "string") {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: (dataPath || '') + '.description',
                  schemaPath: '#/allOf/1/properties/description/type',
                  params: {
                    type: 'string'
                  },
                  message: 'should be string'
                }];
                return false;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data._description === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[4](data._description, (dataPath || '') + '._description', data, '_description', rootData)) {
                  if (vErrors === null) vErrors = refVal[4].errors;
                  else vErrors = vErrors.concat(refVal[4].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.ordered === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data.ordered !== "boolean") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '.ordered',
                      schemaPath: '#/allOf/1/properties/ordered/type',
                      params: {
                        type: 'boolean'
                      },
                      message: 'should be boolean'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data._ordered === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[4](data._ordered, (dataPath || '') + '._ordered', data, '_ordered', rootData)) {
                      if (vErrors === null) vErrors = refVal[4].errors;
                      else vErrors = vErrors.concat(refVal[4].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    var data1 = data.rules;
                    if (data1 === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data1 !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.rules',
                          schemaPath: '#/allOf/1/properties/rules/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var schema2 = validate.schema.allOf[1].properties.rules.enum;
                      var valid2;
                      valid2 = false;
                      for (var i2 = 0; i2 < schema2.length; i2++)
                        if (equal(data1, schema2[i2])) {
                          valid2 = true;
                          break;
                        } if (!valid2) {
                        validate.errors = [{
                          keyword: 'enum',
                          dataPath: (dataPath || '') + '.rules',
                          schemaPath: '#/allOf/1/properties/rules/enum',
                          params: {
                            allowedValues: schema2
                          },
                          message: 'should be equal to one of the allowed values'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._rules === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._rules, (dataPath || '') + '._rules', data, '_rules', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal31.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "discriminator": {
          "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementDefinition_Discriminator"
          }
        },
        "description": {
          "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
          "type": "string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "ordered": {
          "description": "If the matching elements have to occur in the same order as defined in the profile.",
          "type": "boolean"
        },
        "_ordered": {
          "description": "Extensions for ordered",
          "$ref": "#/definitions/Element"
        },
        "rules": {
          "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
          "enum": ["closed", "open", "openAtEnd"],
          "type": "string"
        },
        "_rules": {
          "description": "Extensions for rules",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal31.errors = null;
  refVal[31] = refVal31;
  var refVal32 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.type;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.type.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._type === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.path === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.path !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.path',
                    schemaPath: '#/allOf/1/properties/path/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._path === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal32.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "type": {
          "description": "How the element value is interpreted when discrimination is evaluated.",
          "enum": ["value", "exists", "pattern", "type", "profile"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "path": {
          "description": "A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based.",
          "type": "string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal32.errors = null;
  refVal[32] = refVal32;
  var refVal33 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.path === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.path !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.path',
                schemaPath: '#/allOf/1/properties/path/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._path === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.min;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 !== "number") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.min',
                    schemaPath: '#/allOf/1/properties/min/type',
                    params: {
                      type: 'number'
                    },
                    message: 'should be number'
                  }];
                  return false;
                }
                if (typeof data1 === "string") {
                  if (!pattern9.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.min',
                      schemaPath: '#/allOf/1/properties/min/pattern',
                      params: {
                        pattern: '[0]|([1-9][0-9]*)'
                      },
                      message: 'should match pattern "[0]|([1-9][0-9]*)"'
                    }];
                    return false;
                  }
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._min === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._min, (dataPath || '') + '._min', data, '_min', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.max === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.max !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.max',
                        schemaPath: '#/allOf/1/properties/max/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._max === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._max, (dataPath || '') + '._max', data, '_max', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal33.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "path": {
          "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
          "type": "string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "Minimum cardinality of the base element identified by the path.",
          "type": "number",
          "pattern": "[0]|([1-9][0-9]*)"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "Maximum cardinality of the base element identified by the path.",
          "type": "string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal33.errors = null;
  refVal[33] = refVal33;
  var refVal34 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.code === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.code !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.code',
                schemaPath: '#/allOf/1/properties/code/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._code === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._code, (dataPath || '') + '._code', data, '_code', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.profile === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.profile !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.profile',
                    schemaPath: '#/allOf/1/properties/profile/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._profile === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._profile, (dataPath || '') + '._profile', data, '_profile', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.targetProfile === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.targetProfile !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.targetProfile',
                        schemaPath: '#/allOf/1/properties/targetProfile/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._targetProfile === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._targetProfile, (dataPath || '') + '._targetProfile', data, '_targetProfile', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.aggregation;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (typeof data1[i2] !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.aggregation[' + i2 + ']',
                                schemaPath: '#/allOf/1/properties/aggregation/items/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.aggregation',
                            schemaPath: '#/allOf/1/properties/aggregation/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        if (errors === errs_2) {
                          var schema2 = validate.schema.allOf[1].properties.aggregation.enum;
                          var valid2;
                          valid2 = false;
                          for (var i2 = 0; i2 < schema2.length; i2++)
                            if (equal(data1, schema2[i2])) {
                              valid2 = true;
                              break;
                            } if (!valid2) {
                            validate.errors = [{
                              keyword: 'enum',
                              dataPath: (dataPath || '') + '.aggregation',
                              schemaPath: '#/allOf/1/properties/aggregation/enum',
                              params: {
                                allowedValues: schema2
                              },
                              message: 'should be equal to one of the allowed values'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data._aggregation;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal[4](data1[i2], (dataPath || '') + '._aggregation[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '._aggregation',
                              schemaPath: '#/allOf/1/properties/_aggregation/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.versioning;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.versioning',
                                schemaPath: '#/allOf/1/properties/versioning/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var schema2 = validate.schema.allOf[1].properties.versioning.enum;
                            var valid2;
                            valid2 = false;
                            for (var i2 = 0; i2 < schema2.length; i2++)
                              if (equal(data1, schema2[i2])) {
                                valid2 = true;
                                break;
                              } if (!valid2) {
                              validate.errors = [{
                                keyword: 'enum',
                                dataPath: (dataPath || '') + '.versioning',
                                schemaPath: '#/allOf/1/properties/versioning/enum',
                                params: {
                                  allowedValues: schema2
                                },
                                message: 'should be equal to one of the allowed values'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._versioning === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._versioning, (dataPath || '') + '._versioning', data, '_versioning', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal34.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "code": {
          "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "type": "string"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
          "type": "string"
        },
        "_profile": {
          "description": "Extensions for profile",
          "$ref": "#/definitions/Element"
        },
        "targetProfile": {
          "description": "Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
          "type": "string"
        },
        "_targetProfile": {
          "description": "Extensions for targetProfile",
          "$ref": "#/definitions/Element"
        },
        "aggregation": {
          "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
          "enum": ["contained", "referenced", "bundled"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_aggregation": {
          "description": "Extensions for aggregation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "versioning": {
          "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
          "enum": ["either", "independent", "specific"],
          "type": "string"
        },
        "_versioning": {
          "description": "Extensions for versioning",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal34.errors = null;
  refVal[34] = refVal34;
  var refVal35 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.name === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.name !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.name',
                schemaPath: '#/allOf/1/properties/name/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._name === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.telecom;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (Array.isArray(data1)) {
                  var errs__2 = errors;
                  var valid2;
                  for (var i2 = 0; i2 < data1.length; i2++) {
                    var errs_3 = errors;
                    if (!refVal[26](data1[i2], (dataPath || '') + '.telecom[' + i2 + ']', data1, i2, rootData)) {
                      if (vErrors === null) vErrors = refVal[26].errors;
                      else vErrors = vErrors.concat(refVal[26].errors);
                      errors = vErrors.length;
                    }
                    var valid3 = errors === errs_3;
                    if (!valid3) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.telecom',
                    schemaPath: '#/allOf/1/properties/telecom/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal35.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Specifies contact information for a person or organization.",
      "properties": {
        "name": {
          "description": "The name of an individual to contact.",
          "type": "string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "telecom": {
          "description": "The contact details for the individual (if a name was provided) or the organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactPoint"
          }
        }
      }
    }]
  };
  refVal35.errors = null;
  refVal[35] = refVal35;
  var refVal36 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.type;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.type.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._type === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.name === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.name !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.name',
                    schemaPath: '#/allOf/1/properties/name/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._name === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.contact;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (!refVal[35](data1[i2], (dataPath || '') + '.contact[' + i2 + ']', data1, i2, rootData)) {
                          if (vErrors === null) vErrors = refVal[35].errors;
                          else vErrors = vErrors.concat(refVal[35].errors);
                          errors = vErrors.length;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.contact',
                        schemaPath: '#/allOf/1/properties/contact/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal36.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
      "properties": {
        "type": {
          "description": "The type of contributor.",
          "enum": ["author", "editor", "reviewer", "endorser"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "name": {
          "description": "The name of the individual or organization responsible for the contribution.",
          "type": "string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the contributor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDetail"
          }
        }
      }
    }]
  };
  refVal36.errors = null;
  refVal[36] = refVal36;
  var refVal37 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.sequence;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "number") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.sequence',
                schemaPath: '#/allOf/1/properties/sequence/type',
                params: {
                  type: 'number'
                },
                message: 'should be number'
              }];
              return false;
            }
            if (typeof data1 === "string") {
              if (!pattern0.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.sequence',
                  schemaPath: '#/allOf/1/properties/sequence/pattern',
                  params: {
                    pattern: '-?([0]|([1-9][0-9]*))'
                  },
                  message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                }];
                return false;
              }
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._sequence === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._sequence, (dataPath || '') + '._sequence', data, '_sequence', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.text === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.text !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.text',
                    schemaPath: '#/allOf/1/properties/text/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._text === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.additionalInstruction;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (!refVal[10](data1[i2], (dataPath || '') + '.additionalInstruction[' + i2 + ']', data1, i2, rootData)) {
                          if (vErrors === null) vErrors = refVal[10].errors;
                          else vErrors = vErrors.concat(refVal[10].errors);
                          errors = vErrors.length;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.additionalInstruction',
                        schemaPath: '#/allOf/1/properties/additionalInstruction/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.patientInstruction === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data.patientInstruction !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.patientInstruction',
                          schemaPath: '#/allOf/1/properties/patientInstruction/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._patientInstruction === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._patientInstruction, (dataPath || '') + '._patientInstruction', data, '_patientInstruction', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data.timing === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[27](data.timing, (dataPath || '') + '.timing', data, 'timing', rootData)) {
                            if (vErrors === null) vErrors = refVal[27].errors;
                            else vErrors = vErrors.concat(refVal[27].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.asNeededBoolean === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.asNeededBoolean !== "boolean") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.asNeededBoolean',
                                schemaPath: '#/allOf/1/properties/asNeededBoolean/type',
                                params: {
                                  type: 'boolean'
                                },
                                message: 'should be boolean'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._asNeededBoolean === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._asNeededBoolean, (dataPath || '') + '._asNeededBoolean', data, '_asNeededBoolean', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.asNeededCodeableConcept === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (!refVal[10](data.asNeededCodeableConcept, (dataPath || '') + '.asNeededCodeableConcept', data, 'asNeededCodeableConcept', rootData)) {
                                  if (vErrors === null) vErrors = refVal[10].errors;
                                  else vErrors = vErrors.concat(refVal[10].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data.site === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[10](data.site, (dataPath || '') + '.site', data, 'site', rootData)) {
                                    if (vErrors === null) vErrors = refVal[10].errors;
                                    else vErrors = vErrors.concat(refVal[10].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.route === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal[10](data.route, (dataPath || '') + '.route', data, 'route', rootData)) {
                                      if (vErrors === null) vErrors = refVal[10].errors;
                                      else vErrors = vErrors.concat(refVal[10].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data.method === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[10](data.method, (dataPath || '') + '.method', data, 'method', rootData)) {
                                        if (vErrors === null) vErrors = refVal[10].errors;
                                        else vErrors = vErrors.concat(refVal[10].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.doseRange === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (!refVal[20](data.doseRange, (dataPath || '') + '.doseRange', data, 'doseRange', rootData)) {
                                          if (vErrors === null) vErrors = refVal[20].errors;
                                          else vErrors = vErrors.concat(refVal[20].errors);
                                          errors = vErrors.length;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data.doseSimpleQuantity === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[14](data.doseSimpleQuantity, (dataPath || '') + '.doseSimpleQuantity', data, 'doseSimpleQuantity', rootData)) {
                                            if (vErrors === null) vErrors = refVal[14].errors;
                                            else vErrors = vErrors.concat(refVal[14].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data.maxDosePerPeriod === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (!refVal[21](data.maxDosePerPeriod, (dataPath || '') + '.maxDosePerPeriod', data, 'maxDosePerPeriod', rootData)) {
                                              if (vErrors === null) vErrors = refVal[21].errors;
                                              else vErrors = vErrors.concat(refVal[21].errors);
                                              errors = vErrors.length;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data.maxDosePerAdministration === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[14](data.maxDosePerAdministration, (dataPath || '') + '.maxDosePerAdministration', data, 'maxDosePerAdministration', rootData)) {
                                                if (vErrors === null) vErrors = refVal[14].errors;
                                                else vErrors = vErrors.concat(refVal[14].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              if (data.maxDosePerLifetime === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (!refVal[14](data.maxDosePerLifetime, (dataPath || '') + '.maxDosePerLifetime', data, 'maxDosePerLifetime', rootData)) {
                                                  if (vErrors === null) vErrors = refVal[14].errors;
                                                  else vErrors = vErrors.concat(refVal[14].errors);
                                                  errors = vErrors.length;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data.rateRatio === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (!refVal[21](data.rateRatio, (dataPath || '') + '.rateRatio', data, 'rateRatio', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[21].errors;
                                                    else vErrors = vErrors.concat(refVal[21].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  if (data.rateRange === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (!refVal[20](data.rateRange, (dataPath || '') + '.rateRange', data, 'rateRange', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[20].errors;
                                                      else vErrors = vErrors.concat(refVal[20].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data.rateSimpleQuantity === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (!refVal[14](data.rateSimpleQuantity, (dataPath || '') + '.rateSimpleQuantity', data, 'rateSimpleQuantity', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[14].errors;
                                                        else vErrors = vErrors.concat(refVal[14].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal37.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
      "properties": {
        "sequence": {
          "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_sequence": {
          "description": "Extensions for sequence",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "Free text dosage instructions e.g. SIG.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "additionalInstruction": {
          "description": "Supplemental instruction - e.g. \"with meals\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          }
        },
        "patientInstruction": {
          "description": "Instructions in terms that are understood by the patient or consumer.",
          "type": "string"
        },
        "_patientInstruction": {
          "description": "Extensions for patientInstruction",
          "$ref": "#/definitions/Element"
        },
        "timing": {
          "description": "When medication should be administered.",
          "$ref": "#/definitions/Timing"
        },
        "asNeededBoolean": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "type": "boolean"
        },
        "_asNeededBoolean": {
          "description": "Extensions for asNeededBoolean",
          "$ref": "#/definitions/Element"
        },
        "asNeededCodeableConcept": {
          "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
          "$ref": "#/definitions/CodeableConcept"
        },
        "site": {
          "description": "Body site to administer to.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "route": {
          "description": "How drug should enter body.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "method": {
          "description": "Technique for administering medication.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "doseRange": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Range"
        },
        "doseSimpleQuantity": {
          "description": "Amount of medication per dose.",
          "$ref": "#/definitions/Quantity"
        },
        "maxDosePerPeriod": {
          "description": "Upper limit on medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "maxDosePerAdministration": {
          "description": "Upper limit on medication per administration.",
          "$ref": "#/definitions/Quantity"
        },
        "maxDosePerLifetime": {
          "description": "Upper limit on medication per lifetime of the patient.",
          "$ref": "#/definitions/Quantity"
        },
        "rateRatio": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Ratio"
        },
        "rateRange": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Range"
        },
        "rateSimpleQuantity": {
          "description": "Amount of medication per unit of time.",
          "$ref": "#/definitions/Quantity"
        }
      }
    }]
  };
  refVal37.errors = null;
  refVal[37] = refVal37;
  var refVal38 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.type;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.type.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._type === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.display === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.display !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.display',
                    schemaPath: '#/allOf/1/properties/display/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._display === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._display, (dataPath || '') + '._display', data, '_display', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.citation === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.citation !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.citation',
                        schemaPath: '#/allOf/1/properties/citation/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._citation === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._citation, (dataPath || '') + '._citation', data, '_citation', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.url === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.url !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.url',
                            schemaPath: '#/allOf/1/properties/url/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._url === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._url, (dataPath || '') + '._url', data, '_url', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.document === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[13](data.document, (dataPath || '') + '.document', data, 'document', rootData)) {
                              if (vErrors === null) vErrors = refVal[13].errors;
                              else vErrors = vErrors.concat(refVal[13].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data.resource === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[8](data.resource, (dataPath || '') + '.resource', data, 'resource', rootData)) {
                                if (vErrors === null) vErrors = refVal[8].errors;
                                else vErrors = vErrors.concat(refVal[8].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal38.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
      "properties": {
        "type": {
          "description": "The type of relationship to the related artifact.",
          "enum": ["documentation", "justification", "citation", "predecessor", "successor", "derived-from", "depends-on", "composed-of"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "display": {
          "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.",
          "type": "string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "#/definitions/Element"
        },
        "citation": {
          "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
          "type": "string"
        },
        "_citation": {
          "description": "Extensions for citation",
          "$ref": "#/definitions/Element"
        },
        "url": {
          "description": "A url for the artifact that can be followed to access the actual content.",
          "type": "string"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "#/definitions/Element"
        },
        "document": {
          "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
          "$ref": "#/definitions/Attachment"
        },
        "resource": {
          "description": "The related resource, such as a library, value set, profile, or other knowledge resource.",
          "$ref": "#/definitions/Reference"
        }
      }
    }]
  };
  refVal38.errors = null;
  refVal[38] = refVal38;
  var refVal39 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          if (true) {
            var errs__1 = errors;
            var valid2 = true;
            if (data.code === undefined) {
              valid2 = false;
              validate.errors = [{
                keyword: 'required',
                dataPath: (dataPath || '') + "",
                schemaPath: '#/allOf/1/required',
                params: {
                  missingProperty: 'code'
                },
                message: 'should have required property \'code\''
              }];
              return false;
            } else {
              var errs_2 = errors;
              if (!refVal[11](data.code, (dataPath || '') + '.code', data, 'code', rootData)) {
                if (vErrors === null) vErrors = refVal[11].errors;
                else vErrors = vErrors.concat(refVal[11].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.valueCodeableConcept === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (!refVal[10](data.valueCodeableConcept, (dataPath || '') + '.valueCodeableConcept', data, 'valueCodeableConcept', rootData)) {
                  if (vErrors === null) vErrors = refVal[10].errors;
                  else vErrors = vErrors.concat(refVal[10].errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data.valueQuantity === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[14](data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                    if (vErrors === null) vErrors = refVal[14].errors;
                    else vErrors = vErrors.concat(refVal[14].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.valueRange === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[20](data.valueRange, (dataPath || '') + '.valueRange', data, 'valueRange', rootData)) {
                      if (vErrors === null) vErrors = refVal[20].errors;
                      else vErrors = vErrors.concat(refVal[20].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal39.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Specifies clinical/business/etc metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
      "properties": {
        "code": {
          "description": "A code that identifies the type of context being specified by this usage context.",
          "$ref": "#/definitions/Coding"
        },
        "valueCodeableConcept": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueQuantity": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Quantity"
        },
        "valueRange": {
          "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "$ref": "#/definitions/Range"
        }
      },
      "required": ["code"]
    }]
  };
  refVal39.errors = null;
  refVal[39] = refVal39;
  var refVal40 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.type;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern5.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.type',
                  schemaPath: '#/allOf/1/properties/type/pattern',
                  params: {
                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                  },
                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._type === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.profile;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (Array.isArray(data1)) {
                  var errs__2 = errors;
                  var valid2;
                  for (var i2 = 0; i2 < data1.length; i2++) {
                    var errs_3 = errors;
                    if (typeof data1[i2] !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.profile[' + i2 + ']',
                        schemaPath: '#/allOf/1/properties/profile/items/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid3 = errors === errs_3;
                    if (!valid3) break;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.profile',
                    schemaPath: '#/allOf/1/properties/profile/type',
                    params: {
                      type: 'array'
                    },
                    message: 'should be array'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                var data1 = data._profile;
                if (data1 === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (Array.isArray(data1)) {
                    var errs__2 = errors;
                    var valid2;
                    for (var i2 = 0; i2 < data1.length; i2++) {
                      var errs_3 = errors;
                      if (!refVal[4](data1[i2], (dataPath || '') + '._profile[' + i2 + ']', data1, i2, rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid3 = errors === errs_3;
                      if (!valid3) break;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '._profile',
                      schemaPath: '#/allOf/1/properties/_profile/type',
                      params: {
                        type: 'array'
                      },
                      message: 'should be array'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.mustSupport;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (typeof data1[i2] !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.mustSupport[' + i2 + ']',
                            schemaPath: '#/allOf/1/properties/mustSupport/items/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.mustSupport',
                        schemaPath: '#/allOf/1/properties/mustSupport/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    var data1 = data._mustSupport;
                    if (data1 === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (Array.isArray(data1)) {
                        var errs__2 = errors;
                        var valid2;
                        for (var i2 = 0; i2 < data1.length; i2++) {
                          var errs_3 = errors;
                          if (!refVal[4](data1[i2], (dataPath || '') + '._mustSupport[' + i2 + ']', data1, i2, rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid3 = errors === errs_3;
                          if (!valid3) break;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '._mustSupport',
                          schemaPath: '#/allOf/1/properties/_mustSupport/type',
                          params: {
                            type: 'array'
                          },
                          message: 'should be array'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.codeFilter;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (!refVal41(data1[i2], (dataPath || '') + '.codeFilter[' + i2 + ']', data1, i2, rootData)) {
                              if (vErrors === null) vErrors = refVal41.errors;
                              else vErrors = vErrors.concat(refVal41.errors);
                              errors = vErrors.length;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.codeFilter',
                            schemaPath: '#/allOf/1/properties/codeFilter/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data.dateFilter;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal42(data1[i2], (dataPath || '') + '.dateFilter[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal42.errors;
                                else vErrors = vErrors.concat(refVal42.errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.dateFilter',
                              schemaPath: '#/allOf/1/properties/dateFilter/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal40.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "type": {
          "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "The profile of the required data, specified as the uri of the profile definition.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_profile": {
          "description": "Extensions for profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "mustSupport": {
          "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_mustSupport": {
          "description": "Extensions for mustSupport",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "codeFilter": {
          "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataRequirement_CodeFilter"
          }
        },
        "dateFilter": {
          "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataRequirement_DateFilter"
          }
        }
      }
    }]
  };
  refVal40.errors = null;
  refVal[40] = refVal40;
  var refVal41 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.path === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.path !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.path',
                schemaPath: '#/allOf/1/properties/path/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._path === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.valueSetString === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.valueSetString !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.valueSetString',
                    schemaPath: '#/allOf/1/properties/valueSetString/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._valueSetString === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._valueSetString, (dataPath || '') + '._valueSetString', data, '_valueSetString', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.valueSetReference === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[8](data.valueSetReference, (dataPath || '') + '.valueSetReference', data, 'valueSetReference', rootData)) {
                      if (vErrors === null) vErrors = refVal[8].errors;
                      else vErrors = vErrors.concat(refVal[8].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    var data1 = data.valueCode;
                    if (data1 === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (Array.isArray(data1)) {
                        var errs__2 = errors;
                        var valid2;
                        for (var i2 = 0; i2 < data1.length; i2++) {
                          var data2 = data1[i2];
                          var errs_3 = errors;
                          if (typeof data2 === "string") {
                            if (!pattern5.test(data2)) {
                              validate.errors = [{
                                keyword: 'pattern',
                                dataPath: (dataPath || '') + '.valueCode[' + i2 + ']',
                                schemaPath: '#/allOf/1/properties/valueCode/items/pattern',
                                params: {
                                  pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                },
                                message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                              }];
                              return false;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.valueCode[' + i2 + ']',
                              schemaPath: '#/allOf/1/properties/valueCode/items/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid3 = errors === errs_3;
                          if (!valid3) break;
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.valueCode',
                          schemaPath: '#/allOf/1/properties/valueCode/type',
                          params: {
                            type: 'array'
                          },
                          message: 'should be array'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data._valueCode;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (Array.isArray(data1)) {
                          var errs__2 = errors;
                          var valid2;
                          for (var i2 = 0; i2 < data1.length; i2++) {
                            var errs_3 = errors;
                            if (!refVal[4](data1[i2], (dataPath || '') + '._valueCode[' + i2 + ']', data1, i2, rootData)) {
                              if (vErrors === null) vErrors = refVal[4].errors;
                              else vErrors = vErrors.concat(refVal[4].errors);
                              errors = vErrors.length;
                            }
                            var valid3 = errors === errs_3;
                            if (!valid3) break;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '._valueCode',
                            schemaPath: '#/allOf/1/properties/_valueCode/type',
                            params: {
                              type: 'array'
                            },
                            message: 'should be array'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        var data1 = data.valueCoding;
                        if (data1 === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (Array.isArray(data1)) {
                            var errs__2 = errors;
                            var valid2;
                            for (var i2 = 0; i2 < data1.length; i2++) {
                              var errs_3 = errors;
                              if (!refVal[11](data1[i2], (dataPath || '') + '.valueCoding[' + i2 + ']', data1, i2, rootData)) {
                                if (vErrors === null) vErrors = refVal[11].errors;
                                else vErrors = vErrors.concat(refVal[11].errors);
                                errors = vErrors.length;
                              }
                              var valid3 = errors === errs_3;
                              if (!valid3) break;
                            }
                          } else {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.valueCoding',
                              schemaPath: '#/allOf/1/properties/valueCoding/type',
                              params: {
                                type: 'array'
                              },
                              message: 'should be array'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.valueCodeableConcept;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (Array.isArray(data1)) {
                              var errs__2 = errors;
                              var valid2;
                              for (var i2 = 0; i2 < data1.length; i2++) {
                                var errs_3 = errors;
                                if (!refVal[10](data1[i2], (dataPath || '') + '.valueCodeableConcept[' + i2 + ']', data1, i2, rootData)) {
                                  if (vErrors === null) vErrors = refVal[10].errors;
                                  else vErrors = vErrors.concat(refVal[10].errors);
                                  errors = vErrors.length;
                                }
                                var valid3 = errors === errs_3;
                                if (!valid3) break;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.valueCodeableConcept',
                                schemaPath: '#/allOf/1/properties/valueCodeableConcept/type',
                                params: {
                                  type: 'array'
                                },
                                message: 'should be array'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal41.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "path": {
          "description": "The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
          "type": "string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "valueSetString": {
          "description": "The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
          "type": "string"
        },
        "_valueSetString": {
          "description": "Extensions for valueSetString",
          "$ref": "#/definitions/Element"
        },
        "valueSetReference": {
          "description": "The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
          "$ref": "#/definitions/Reference"
        },
        "valueCode": {
          "description": "The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
          }
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Element"
          }
        },
        "valueCoding": {
          "description": "The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "valueCodeableConcept": {
          "description": "The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeableConcept"
          }
        }
      }
    }]
  };
  refVal41.errors = null;
  refVal[41] = refVal41;
  var refVal42 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.path === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.path !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.path',
                schemaPath: '#/allOf/1/properties/path/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._path === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._path, (dataPath || '') + '._path', data, '_path', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.valueDateTime;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern3.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.valueDateTime',
                      schemaPath: '#/allOf/1/properties/valueDateTime/pattern',
                      params: {
                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                      },
                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.valueDateTime',
                    schemaPath: '#/allOf/1/properties/valueDateTime/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._valueDateTime === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.valuePeriod === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[12](data.valuePeriod, (dataPath || '') + '.valuePeriod', data, 'valuePeriod', rootData)) {
                      if (vErrors === null) vErrors = refVal[12].errors;
                      else vErrors = vErrors.concat(refVal[12].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.valueDuration === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[15](data.valueDuration, (dataPath || '') + '.valueDuration', data, 'valueDuration', rootData)) {
                        if (vErrors === null) vErrors = refVal[15].errors;
                        else vErrors = vErrors.concat(refVal[15].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal42.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "properties": {
        "path": {
          "description": "The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.",
          "type": "string"
        },
        "_path": {
          "description": "Extensions for path",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valuePeriod": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.",
          "$ref": "#/definitions/Period"
        },
        "valueDuration": {
          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.",
          "$ref": "#/definitions/Duration"
        }
      }
    }]
  };
  refVal42.errors = null;
  refVal[42] = refVal42;
  var refVal43 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.name;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern5.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.name',
                  schemaPath: '#/allOf/1/properties/name/pattern',
                  params: {
                    pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                  },
                  message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.name',
                schemaPath: '#/allOf/1/properties/name/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._name === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._name, (dataPath || '') + '._name', data, '_name', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.use;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.use',
                      schemaPath: '#/allOf/1/properties/use/pattern',
                      params: {
                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                      },
                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.use',
                    schemaPath: '#/allOf/1/properties/use/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._use === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._use, (dataPath || '') + '._use', data, '_use', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.min;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "number") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.min',
                        schemaPath: '#/allOf/1/properties/min/type',
                        params: {
                          type: 'number'
                        },
                        message: 'should be number'
                      }];
                      return false;
                    }
                    if (typeof data1 === "string") {
                      if (!pattern0.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.min',
                          schemaPath: '#/allOf/1/properties/min/pattern',
                          params: {
                            pattern: '-?([0]|([1-9][0-9]*))'
                          },
                          message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                        }];
                        return false;
                      }
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._min === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._min, (dataPath || '') + '._min', data, '_min', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.max === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.max !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.max',
                            schemaPath: '#/allOf/1/properties/max/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._max === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._max, (dataPath || '') + '._max', data, '_max', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.documentation === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.documentation !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.documentation',
                                schemaPath: '#/allOf/1/properties/documentation/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._documentation === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._documentation, (dataPath || '') + '._documentation', data, '_documentation', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data1 = data.type;
                              if (data1 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern5.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.type',
                                      schemaPath: '#/allOf/1/properties/type/pattern',
                                      params: {
                                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                      },
                                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.type',
                                    schemaPath: '#/allOf/1/properties/type/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._type === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.profile === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal[8](data.profile, (dataPath || '') + '.profile', data, 'profile', rootData)) {
                                      if (vErrors === null) vErrors = refVal[8].errors;
                                      else vErrors = vErrors.concat(refVal[8].errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal43.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
      "properties": {
        "name": {
          "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "#/definitions/Element"
        },
        "use": {
          "description": "Whether the parameter is input or output for the module.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_use": {
          "description": "Extensions for use",
          "$ref": "#/definitions/Element"
        },
        "min": {
          "description": "The minimum number of times this parameter SHALL appear in the request or response.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_min": {
          "description": "Extensions for min",
          "$ref": "#/definitions/Element"
        },
        "max": {
          "description": "The maximum number of times this element is permitted to appear in the request or response.",
          "type": "string"
        },
        "_max": {
          "description": "Extensions for max",
          "$ref": "#/definitions/Element"
        },
        "documentation": {
          "description": "A brief discussion of what the parameter is for and how it is used by the module.",
          "type": "string"
        },
        "_documentation": {
          "description": "Extensions for documentation",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The type of the parameter.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "profile": {
          "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
          "$ref": "#/definitions/Reference"
        }
      }
    }]
  };
  refVal43.errors = null;
  refVal[43] = refVal43;
  var refVal44 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[4](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[4].errors;
        else vErrors = vErrors.concat(refVal[4].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.type;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.type.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.type',
                schemaPath: '#/allOf/1/properties/type/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._type === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.eventName === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.eventName !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.eventName',
                    schemaPath: '#/allOf/1/properties/eventName/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._eventName === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._eventName, (dataPath || '') + '._eventName', data, '_eventName', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.eventTimingTiming === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[27](data.eventTimingTiming, (dataPath || '') + '.eventTimingTiming', data, 'eventTimingTiming', rootData)) {
                      if (vErrors === null) vErrors = refVal[27].errors;
                      else vErrors = vErrors.concat(refVal[27].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.eventTimingReference === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[8](data.eventTimingReference, (dataPath || '') + '.eventTimingReference', data, 'eventTimingReference', rootData)) {
                        if (vErrors === null) vErrors = refVal[8].errors;
                        else vErrors = vErrors.concat(refVal[8].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.eventTimingDate;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 === "string") {
                          if (!pattern2.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.eventTimingDate',
                              schemaPath: '#/allOf/1/properties/eventTimingDate/pattern',
                              params: {
                                pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                              },
                              message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                            }];
                            return false;
                          }
                        } else {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.eventTimingDate',
                            schemaPath: '#/allOf/1/properties/eventTimingDate/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._eventTimingDate === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._eventTimingDate, (dataPath || '') + '._eventTimingDate', data, '_eventTimingDate', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.eventTimingDateTime;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 === "string") {
                              if (!pattern3.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.eventTimingDateTime',
                                  schemaPath: '#/allOf/1/properties/eventTimingDateTime/pattern',
                                  params: {
                                    pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                  },
                                  message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.eventTimingDateTime',
                                schemaPath: '#/allOf/1/properties/eventTimingDateTime/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._eventTimingDateTime === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._eventTimingDateTime, (dataPath || '') + '._eventTimingDateTime', data, '_eventTimingDateTime', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.eventData === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (!refVal[40](data.eventData, (dataPath || '') + '.eventData', data, 'eventData', rootData)) {
                                  if (vErrors === null) vErrors = refVal[40].errors;
                                  else vErrors = vErrors.concat(refVal[40].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal44.schema = {
    "allOf": [{
      "$ref": "#/definitions/Element"
    }, {
      "description": "A description of a triggering event.",
      "properties": {
        "type": {
          "description": "The type of triggering event.",
          "enum": ["named-event", "periodic", "data-added", "data-modified", "data-removed", "data-accessed", "data-access-ended"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "eventName": {
          "description": "The name of the event (if this is a named-event trigger).",
          "type": "string"
        },
        "_eventName": {
          "description": "Extensions for eventName",
          "$ref": "#/definitions/Element"
        },
        "eventTimingTiming": {
          "description": "The timing of the event (if this is a period trigger).",
          "$ref": "#/definitions/Timing"
        },
        "eventTimingReference": {
          "description": "The timing of the event (if this is a period trigger).",
          "$ref": "#/definitions/Reference"
        },
        "eventTimingDate": {
          "description": "The timing of the event (if this is a period trigger).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_eventTimingDate": {
          "description": "Extensions for eventTimingDate",
          "$ref": "#/definitions/Element"
        },
        "eventTimingDateTime": {
          "description": "The timing of the event (if this is a period trigger).",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_eventTimingDateTime": {
          "description": "Extensions for eventTimingDateTime",
          "$ref": "#/definitions/Element"
        },
        "eventData": {
          "description": "The triggering data of the event (if this is a data trigger).",
          "$ref": "#/definitions/DataRequirement"
        }
      }
    }]
  };
  refVal44.errors = null;
  refVal[44] = refVal44;
  var refVal45 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.label === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.label !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.label',
                schemaPath: '#/allOf/1/properties/label/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._label === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._label, (dataPath || '') + '._label', data, '_label', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.valueBoolean === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.valueBoolean !== "boolean") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.valueBoolean',
                    schemaPath: '#/allOf/1/properties/valueBoolean/type',
                    params: {
                      type: 'boolean'
                    },
                    message: 'should be boolean'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._valueBoolean === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._valueBoolean, (dataPath || '') + '._valueBoolean', data, '_valueBoolean', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.valueInteger;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "number") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.valueInteger',
                        schemaPath: '#/allOf/1/properties/valueInteger/type',
                        params: {
                          type: 'number'
                        },
                        message: 'should be number'
                      }];
                      return false;
                    }
                    if (typeof data1 === "string") {
                      if (!pattern0.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.valueInteger',
                          schemaPath: '#/allOf/1/properties/valueInteger/pattern',
                          params: {
                            pattern: '-?([0]|([1-9][0-9]*))'
                          },
                          message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                        }];
                        return false;
                      }
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._valueInteger === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._valueInteger, (dataPath || '') + '._valueInteger', data, '_valueInteger', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.valueDecimal;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.valueDecimal',
                            schemaPath: '#/allOf/1/properties/valueDecimal/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.valueDecimal',
                              schemaPath: '#/allOf/1/properties/valueDecimal/pattern',
                              params: {
                                pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                              },
                              message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._valueDecimal === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._valueDecimal, (dataPath || '') + '._valueDecimal', data, '_valueDecimal', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.valueBase64Binary === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.valueBase64Binary !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.valueBase64Binary',
                                schemaPath: '#/allOf/1/properties/valueBase64Binary/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._valueBase64Binary === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._valueBase64Binary, (dataPath || '') + '._valueBase64Binary', data, '_valueBase64Binary', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.valueInstant === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.valueInstant !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.valueInstant',
                                    schemaPath: '#/allOf/1/properties/valueInstant/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._valueInstant === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._valueInstant, (dataPath || '') + '._valueInstant', data, '_valueInstant', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.valueString === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.valueString !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.valueString',
                                        schemaPath: '#/allOf/1/properties/valueString/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._valueString === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._valueString, (dataPath || '') + '._valueString', data, '_valueString', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.valueUri === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data.valueUri !== "string") {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.valueUri',
                                            schemaPath: '#/allOf/1/properties/valueUri/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._valueUri === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._valueUri, (dataPath || '') + '._valueUri', data, '_valueUri', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          var data1 = data.valueDate;
                                          if (data1 === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data1 === "string") {
                                              if (!pattern2.test(data1)) {
                                                validate.errors = [{
                                                  keyword: 'pattern',
                                                  dataPath: (dataPath || '') + '.valueDate',
                                                  schemaPath: '#/allOf/1/properties/valueDate/pattern',
                                                  params: {
                                                    pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                  },
                                                  message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                }];
                                                return false;
                                              }
                                            } else {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.valueDate',
                                                schemaPath: '#/allOf/1/properties/valueDate/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._valueDate === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._valueDate, (dataPath || '') + '._valueDate', data, '_valueDate', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              var data1 = data.valueDateTime;
                                              if (data1 === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (typeof data1 === "string") {
                                                  if (!pattern3.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.valueDateTime',
                                                      schemaPath: '#/allOf/1/properties/valueDateTime/pattern',
                                                      params: {
                                                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                      },
                                                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                    }];
                                                    return false;
                                                  }
                                                } else {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.valueDateTime',
                                                    schemaPath: '#/allOf/1/properties/valueDateTime/type',
                                                    params: {
                                                      type: 'string'
                                                    },
                                                    message: 'should be string'
                                                  }];
                                                  return false;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data._valueDateTime === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (!refVal[4](data._valueDateTime, (dataPath || '') + '._valueDateTime', data, '_valueDateTime', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  var data1 = data.valueTime;
                                                  if (data1 === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (typeof data1 === "string") {
                                                      if (!pattern4.test(data1)) {
                                                        validate.errors = [{
                                                          keyword: 'pattern',
                                                          dataPath: (dataPath || '') + '.valueTime',
                                                          schemaPath: '#/allOf/1/properties/valueTime/pattern',
                                                          params: {
                                                            pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                          },
                                                          message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                        }];
                                                        return false;
                                                      }
                                                    } else {
                                                      validate.errors = [{
                                                        keyword: 'type',
                                                        dataPath: (dataPath || '') + '.valueTime',
                                                        schemaPath: '#/allOf/1/properties/valueTime/type',
                                                        params: {
                                                          type: 'string'
                                                        },
                                                        message: 'should be string'
                                                      }];
                                                      return false;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data._valueTime === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (!refVal[4](data._valueTime, (dataPath || '') + '._valueTime', data, '_valueTime', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      var data1 = data.valueCode;
                                                      if (data1 === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (typeof data1 === "string") {
                                                          if (!pattern5.test(data1)) {
                                                            validate.errors = [{
                                                              keyword: 'pattern',
                                                              dataPath: (dataPath || '') + '.valueCode',
                                                              schemaPath: '#/allOf/1/properties/valueCode/pattern',
                                                              params: {
                                                                pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                                                              },
                                                              message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                                                            }];
                                                            return false;
                                                          }
                                                        } else {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.valueCode',
                                                            schemaPath: '#/allOf/1/properties/valueCode/type',
                                                            params: {
                                                              type: 'string'
                                                            },
                                                            message: 'should be string'
                                                          }];
                                                          return false;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        if (data._valueCode === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (!refVal[4](data._valueCode, (dataPath || '') + '._valueCode', data, '_valueCode', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          var data1 = data.valueOid;
                                                          if (data1 === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (typeof data1 === "string") {
                                                              if (!pattern6.test(data1)) {
                                                                validate.errors = [{
                                                                  keyword: 'pattern',
                                                                  dataPath: (dataPath || '') + '.valueOid',
                                                                  schemaPath: '#/allOf/1/properties/valueOid/pattern',
                                                                  params: {
                                                                    pattern: 'urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*'
                                                                  },
                                                                  message: 'should match pattern "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"'
                                                                }];
                                                                return false;
                                                              }
                                                            } else {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '.valueOid',
                                                                schemaPath: '#/allOf/1/properties/valueOid/type',
                                                                params: {
                                                                  type: 'string'
                                                                },
                                                                message: 'should be string'
                                                              }];
                                                              return false;
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            if (data._valueOid === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (!refVal[4](data._valueOid, (dataPath || '') + '._valueOid', data, '_valueOid', rootData)) {
                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              var data1 = data.valueUuid;
                                                              if (data1 === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (typeof data1 === "string") {
                                                                  if (!pattern7.test(data1)) {
                                                                    validate.errors = [{
                                                                      keyword: 'pattern',
                                                                      dataPath: (dataPath || '') + '.valueUuid',
                                                                      schemaPath: '#/allOf/1/properties/valueUuid/pattern',
                                                                      params: {
                                                                        pattern: 'urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                                                                      },
                                                                      message: 'should match pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                } else {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '.valueUuid',
                                                                    schemaPath: '#/allOf/1/properties/valueUuid/type',
                                                                    params: {
                                                                      type: 'string'
                                                                    },
                                                                    message: 'should be string'
                                                                  }];
                                                                  return false;
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                if (data._valueUuid === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (!refVal[4](data._valueUuid, (dataPath || '') + '._valueUuid', data, '_valueUuid', rootData)) {
                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                    errors = vErrors.length;
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  var data1 = data.valueId;
                                                                  if (data1 === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (typeof data1 === "string") {
                                                                      if (!pattern8.test(data1)) {
                                                                        validate.errors = [{
                                                                          keyword: 'pattern',
                                                                          dataPath: (dataPath || '') + '.valueId',
                                                                          schemaPath: '#/allOf/1/properties/valueId/pattern',
                                                                          params: {
                                                                            pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                                                                          },
                                                                          message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.valueId',
                                                                        schemaPath: '#/allOf/1/properties/valueId/type',
                                                                        params: {
                                                                          type: 'string'
                                                                        },
                                                                        message: 'should be string'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    if (data._valueId === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (!refVal[4](data._valueId, (dataPath || '') + '._valueId', data, '_valueId', rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      var data1 = data.valueUnsignedInt;
                                                                      if (data1 === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (typeof data1 !== "number") {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                            schemaPath: '#/allOf/1/properties/valueUnsignedInt/type',
                                                                            params: {
                                                                              type: 'number'
                                                                            },
                                                                            message: 'should be number'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        if (typeof data1 === "string") {
                                                                          if (!pattern9.test(data1)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.valueUnsignedInt',
                                                                              schemaPath: '#/allOf/1/properties/valueUnsignedInt/pattern',
                                                                              params: {
                                                                                pattern: '[0]|([1-9][0-9]*)'
                                                                              },
                                                                              message: 'should match pattern "[0]|([1-9][0-9]*)"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                      if (valid2) {
                                                                        if (data._valueUnsignedInt === undefined) {
                                                                          valid2 = true;
                                                                        } else {
                                                                          var errs_2 = errors;
                                                                          if (!refVal[4](data._valueUnsignedInt, (dataPath || '') + '._valueUnsignedInt', data, '_valueUnsignedInt', rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                        }
                                                                        if (valid2) {
                                                                          var data1 = data.valuePositiveInt;
                                                                          if (data1 === undefined) {
                                                                            valid2 = true;
                                                                          } else {
                                                                            var errs_2 = errors;
                                                                            if (typeof data1 !== "number") {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                                schemaPath: '#/allOf/1/properties/valuePositiveInt/type',
                                                                                params: {
                                                                                  type: 'number'
                                                                                },
                                                                                message: 'should be number'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern10.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.valuePositiveInt',
                                                                                  schemaPath: '#/allOf/1/properties/valuePositiveInt/pattern',
                                                                                  params: {
                                                                                    pattern: '[1-9][0-9]*'
                                                                                  },
                                                                                  message: 'should match pattern "[1-9][0-9]*"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                          }
                                                                          if (valid2) {
                                                                            if (data._valuePositiveInt === undefined) {
                                                                              valid2 = true;
                                                                            } else {
                                                                              var errs_2 = errors;
                                                                              if (!refVal[4](data._valuePositiveInt, (dataPath || '') + '._valuePositiveInt', data, '_valuePositiveInt', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                            }
                                                                            if (valid2) {
                                                                              if (data.valueMarkdown === undefined) {
                                                                                valid2 = true;
                                                                              } else {
                                                                                var errs_2 = errors;
                                                                                if (typeof data.valueMarkdown !== "string") {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.valueMarkdown',
                                                                                    schemaPath: '#/allOf/1/properties/valueMarkdown/type',
                                                                                    params: {
                                                                                      type: 'string'
                                                                                    },
                                                                                    message: 'should be string'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                var valid2 = errors === errs_2;
                                                                              }
                                                                              if (valid2) {
                                                                                if (data._valueMarkdown === undefined) {
                                                                                  valid2 = true;
                                                                                } else {
                                                                                  var errs_2 = errors;
                                                                                  if (!refVal[4](data._valueMarkdown, (dataPath || '') + '._valueMarkdown', data, '_valueMarkdown', rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid2 = errors === errs_2;
                                                                                }
                                                                                if (valid2) {
                                                                                  if (data.valueElement === undefined) {
                                                                                    valid2 = true;
                                                                                  } else {
                                                                                    var errs_2 = errors;
                                                                                    if (!refVal[4](data.valueElement, (dataPath || '') + '.valueElement', data, 'valueElement', rootData)) {
                                                                                      if (vErrors === null) vErrors = refVal[4].errors;
                                                                                      else vErrors = vErrors.concat(refVal[4].errors);
                                                                                      errors = vErrors.length;
                                                                                    }
                                                                                    var valid2 = errors === errs_2;
                                                                                  }
                                                                                  if (valid2) {
                                                                                    if (data.valueExtension === undefined) {
                                                                                      valid2 = true;
                                                                                    } else {
                                                                                      var errs_2 = errors;
                                                                                      if (!refVal[5](data.valueExtension, (dataPath || '') + '.valueExtension', data, 'valueExtension', rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[5].errors;
                                                                                        else vErrors = vErrors.concat(refVal[5].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid2 = errors === errs_2;
                                                                                    }
                                                                                    if (valid2) {
                                                                                      if (data.valueBackboneElement === undefined) {
                                                                                        valid2 = true;
                                                                                      } else {
                                                                                        var errs_2 = errors;
                                                                                        if (!refVal[6](data.valueBackboneElement, (dataPath || '') + '.valueBackboneElement', data, 'valueBackboneElement', rootData)) {
                                                                                          if (vErrors === null) vErrors = refVal[6].errors;
                                                                                          else vErrors = vErrors.concat(refVal[6].errors);
                                                                                          errors = vErrors.length;
                                                                                        }
                                                                                        var valid2 = errors === errs_2;
                                                                                      }
                                                                                      if (valid2) {
                                                                                        if (data.valueNarrative === undefined) {
                                                                                          valid2 = true;
                                                                                        } else {
                                                                                          var errs_2 = errors;
                                                                                          if (!refVal[3](data.valueNarrative, (dataPath || '') + '.valueNarrative', data, 'valueNarrative', rootData)) {
                                                                                            if (vErrors === null) vErrors = refVal[3].errors;
                                                                                            else vErrors = vErrors.concat(refVal[3].errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid2 = errors === errs_2;
                                                                                        }
                                                                                        if (valid2) {
                                                                                          if (data.valueAnnotation === undefined) {
                                                                                            valid2 = true;
                                                                                          } else {
                                                                                            var errs_2 = errors;
                                                                                            if (!refVal[7](data.valueAnnotation, (dataPath || '') + '.valueAnnotation', data, 'valueAnnotation', rootData)) {
                                                                                              if (vErrors === null) vErrors = refVal[7].errors;
                                                                                              else vErrors = vErrors.concat(refVal[7].errors);
                                                                                              errors = vErrors.length;
                                                                                            }
                                                                                            var valid2 = errors === errs_2;
                                                                                          }
                                                                                          if (valid2) {
                                                                                            if (data.valueAttachment === undefined) {
                                                                                              valid2 = true;
                                                                                            } else {
                                                                                              var errs_2 = errors;
                                                                                              if (!refVal[13](data.valueAttachment, (dataPath || '') + '.valueAttachment', data, 'valueAttachment', rootData)) {
                                                                                                if (vErrors === null) vErrors = refVal[13].errors;
                                                                                                else vErrors = vErrors.concat(refVal[13].errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid2 = errors === errs_2;
                                                                                            }
                                                                                            if (valid2) {
                                                                                              if (data.valueIdentifier === undefined) {
                                                                                                valid2 = true;
                                                                                              } else {
                                                                                                var errs_2 = errors;
                                                                                                if (!refVal[9](data.valueIdentifier, (dataPath || '') + '.valueIdentifier', data, 'valueIdentifier', rootData)) {
                                                                                                  if (vErrors === null) vErrors = refVal[9].errors;
                                                                                                  else vErrors = vErrors.concat(refVal[9].errors);
                                                                                                  errors = vErrors.length;
                                                                                                }
                                                                                                var valid2 = errors === errs_2;
                                                                                              }
                                                                                              if (valid2) {
                                                                                                if (data.valueCodeableConcept === undefined) {
                                                                                                  valid2 = true;
                                                                                                } else {
                                                                                                  var errs_2 = errors;
                                                                                                  if (!refVal[10](data.valueCodeableConcept, (dataPath || '') + '.valueCodeableConcept', data, 'valueCodeableConcept', rootData)) {
                                                                                                    if (vErrors === null) vErrors = refVal[10].errors;
                                                                                                    else vErrors = vErrors.concat(refVal[10].errors);
                                                                                                    errors = vErrors.length;
                                                                                                  }
                                                                                                  var valid2 = errors === errs_2;
                                                                                                }
                                                                                                if (valid2) {
                                                                                                  if (data.valueCoding === undefined) {
                                                                                                    valid2 = true;
                                                                                                  } else {
                                                                                                    var errs_2 = errors;
                                                                                                    if (!refVal[11](data.valueCoding, (dataPath || '') + '.valueCoding', data, 'valueCoding', rootData)) {
                                                                                                      if (vErrors === null) vErrors = refVal[11].errors;
                                                                                                      else vErrors = vErrors.concat(refVal[11].errors);
                                                                                                      errors = vErrors.length;
                                                                                                    }
                                                                                                    var valid2 = errors === errs_2;
                                                                                                  }
                                                                                                  if (valid2) {
                                                                                                    if (data.valueQuantity === undefined) {
                                                                                                      valid2 = true;
                                                                                                    } else {
                                                                                                      var errs_2 = errors;
                                                                                                      if (!refVal[14](data.valueQuantity, (dataPath || '') + '.valueQuantity', data, 'valueQuantity', rootData)) {
                                                                                                        if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                        else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                        errors = vErrors.length;
                                                                                                      }
                                                                                                      var valid2 = errors === errs_2;
                                                                                                    }
                                                                                                    if (valid2) {
                                                                                                      if (data.valueDuration === undefined) {
                                                                                                        valid2 = true;
                                                                                                      } else {
                                                                                                        var errs_2 = errors;
                                                                                                        if (!refVal[15](data.valueDuration, (dataPath || '') + '.valueDuration', data, 'valueDuration', rootData)) {
                                                                                                          if (vErrors === null) vErrors = refVal[15].errors;
                                                                                                          else vErrors = vErrors.concat(refVal[15].errors);
                                                                                                          errors = vErrors.length;
                                                                                                        }
                                                                                                        var valid2 = errors === errs_2;
                                                                                                      }
                                                                                                      if (valid2) {
                                                                                                        if (data.valueSimpleQuantity === undefined) {
                                                                                                          valid2 = true;
                                                                                                        } else {
                                                                                                          var errs_2 = errors;
                                                                                                          if (!refVal[14](data.valueSimpleQuantity, (dataPath || '') + '.valueSimpleQuantity', data, 'valueSimpleQuantity', rootData)) {
                                                                                                            if (vErrors === null) vErrors = refVal[14].errors;
                                                                                                            else vErrors = vErrors.concat(refVal[14].errors);
                                                                                                            errors = vErrors.length;
                                                                                                          }
                                                                                                          var valid2 = errors === errs_2;
                                                                                                        }
                                                                                                        if (valid2) {
                                                                                                          if (data.valueDistance === undefined) {
                                                                                                            valid2 = true;
                                                                                                          } else {
                                                                                                            var errs_2 = errors;
                                                                                                            if (!refVal[16](data.valueDistance, (dataPath || '') + '.valueDistance', data, 'valueDistance', rootData)) {
                                                                                                              if (vErrors === null) vErrors = refVal[16].errors;
                                                                                                              else vErrors = vErrors.concat(refVal[16].errors);
                                                                                                              errors = vErrors.length;
                                                                                                            }
                                                                                                            var valid2 = errors === errs_2;
                                                                                                          }
                                                                                                          if (valid2) {
                                                                                                            if (data.valueCount === undefined) {
                                                                                                              valid2 = true;
                                                                                                            } else {
                                                                                                              var errs_2 = errors;
                                                                                                              if (!refVal[17](data.valueCount, (dataPath || '') + '.valueCount', data, 'valueCount', rootData)) {
                                                                                                                if (vErrors === null) vErrors = refVal[17].errors;
                                                                                                                else vErrors = vErrors.concat(refVal[17].errors);
                                                                                                                errors = vErrors.length;
                                                                                                              }
                                                                                                              var valid2 = errors === errs_2;
                                                                                                            }
                                                                                                            if (valid2) {
                                                                                                              if (data.valueMoney === undefined) {
                                                                                                                valid2 = true;
                                                                                                              } else {
                                                                                                                var errs_2 = errors;
                                                                                                                if (!refVal[18](data.valueMoney, (dataPath || '') + '.valueMoney', data, 'valueMoney', rootData)) {
                                                                                                                  if (vErrors === null) vErrors = refVal[18].errors;
                                                                                                                  else vErrors = vErrors.concat(refVal[18].errors);
                                                                                                                  errors = vErrors.length;
                                                                                                                }
                                                                                                                var valid2 = errors === errs_2;
                                                                                                              }
                                                                                                              if (valid2) {
                                                                                                                if (data.valueAge === undefined) {
                                                                                                                  valid2 = true;
                                                                                                                } else {
                                                                                                                  var errs_2 = errors;
                                                                                                                  if (!refVal[19](data.valueAge, (dataPath || '') + '.valueAge', data, 'valueAge', rootData)) {
                                                                                                                    if (vErrors === null) vErrors = refVal[19].errors;
                                                                                                                    else vErrors = vErrors.concat(refVal[19].errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                  }
                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                }
                                                                                                                if (valid2) {
                                                                                                                  if (data.valueRange === undefined) {
                                                                                                                    valid2 = true;
                                                                                                                  } else {
                                                                                                                    var errs_2 = errors;
                                                                                                                    if (!refVal[20](data.valueRange, (dataPath || '') + '.valueRange', data, 'valueRange', rootData)) {
                                                                                                                      if (vErrors === null) vErrors = refVal[20].errors;
                                                                                                                      else vErrors = vErrors.concat(refVal[20].errors);
                                                                                                                      errors = vErrors.length;
                                                                                                                    }
                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                  }
                                                                                                                  if (valid2) {
                                                                                                                    if (data.valuePeriod === undefined) {
                                                                                                                      valid2 = true;
                                                                                                                    } else {
                                                                                                                      var errs_2 = errors;
                                                                                                                      if (!refVal[12](data.valuePeriod, (dataPath || '') + '.valuePeriod', data, 'valuePeriod', rootData)) {
                                                                                                                        if (vErrors === null) vErrors = refVal[12].errors;
                                                                                                                        else vErrors = vErrors.concat(refVal[12].errors);
                                                                                                                        errors = vErrors.length;
                                                                                                                      }
                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                    }
                                                                                                                    if (valid2) {
                                                                                                                      if (data.valueRatio === undefined) {
                                                                                                                        valid2 = true;
                                                                                                                      } else {
                                                                                                                        var errs_2 = errors;
                                                                                                                        if (!refVal[21](data.valueRatio, (dataPath || '') + '.valueRatio', data, 'valueRatio', rootData)) {
                                                                                                                          if (vErrors === null) vErrors = refVal[21].errors;
                                                                                                                          else vErrors = vErrors.concat(refVal[21].errors);
                                                                                                                          errors = vErrors.length;
                                                                                                                        }
                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                      }
                                                                                                                      if (valid2) {
                                                                                                                        if (data.valueReference === undefined) {
                                                                                                                          valid2 = true;
                                                                                                                        } else {
                                                                                                                          var errs_2 = errors;
                                                                                                                          if (!refVal[8](data.valueReference, (dataPath || '') + '.valueReference', data, 'valueReference', rootData)) {
                                                                                                                            if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                                            else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                                            errors = vErrors.length;
                                                                                                                          }
                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                        }
                                                                                                                        if (valid2) {
                                                                                                                          if (data.valueSampledData === undefined) {
                                                                                                                            valid2 = true;
                                                                                                                          } else {
                                                                                                                            var errs_2 = errors;
                                                                                                                            if (!refVal[22](data.valueSampledData, (dataPath || '') + '.valueSampledData', data, 'valueSampledData', rootData)) {
                                                                                                                              if (vErrors === null) vErrors = refVal[22].errors;
                                                                                                                              else vErrors = vErrors.concat(refVal[22].errors);
                                                                                                                              errors = vErrors.length;
                                                                                                                            }
                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                          }
                                                                                                                          if (valid2) {
                                                                                                                            if (data.valueSignature === undefined) {
                                                                                                                              valid2 = true;
                                                                                                                            } else {
                                                                                                                              var errs_2 = errors;
                                                                                                                              if (!refVal[23](data.valueSignature, (dataPath || '') + '.valueSignature', data, 'valueSignature', rootData)) {
                                                                                                                                if (vErrors === null) vErrors = refVal[23].errors;
                                                                                                                                else vErrors = vErrors.concat(refVal[23].errors);
                                                                                                                                errors = vErrors.length;
                                                                                                                              }
                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                            }
                                                                                                                            if (valid2) {
                                                                                                                              if (data.valueHumanName === undefined) {
                                                                                                                                valid2 = true;
                                                                                                                              } else {
                                                                                                                                var errs_2 = errors;
                                                                                                                                if (!refVal[24](data.valueHumanName, (dataPath || '') + '.valueHumanName', data, 'valueHumanName', rootData)) {
                                                                                                                                  if (vErrors === null) vErrors = refVal[24].errors;
                                                                                                                                  else vErrors = vErrors.concat(refVal[24].errors);
                                                                                                                                  errors = vErrors.length;
                                                                                                                                }
                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                              }
                                                                                                                              if (valid2) {
                                                                                                                                if (data.valueAddress === undefined) {
                                                                                                                                  valid2 = true;
                                                                                                                                } else {
                                                                                                                                  var errs_2 = errors;
                                                                                                                                  if (!refVal[25](data.valueAddress, (dataPath || '') + '.valueAddress', data, 'valueAddress', rootData)) {
                                                                                                                                    if (vErrors === null) vErrors = refVal[25].errors;
                                                                                                                                    else vErrors = vErrors.concat(refVal[25].errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                  }
                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                }
                                                                                                                                if (valid2) {
                                                                                                                                  if (data.valueContactPoint === undefined) {
                                                                                                                                    valid2 = true;
                                                                                                                                  } else {
                                                                                                                                    var errs_2 = errors;
                                                                                                                                    if (!refVal[26](data.valueContactPoint, (dataPath || '') + '.valueContactPoint', data, 'valueContactPoint', rootData)) {
                                                                                                                                      if (vErrors === null) vErrors = refVal[26].errors;
                                                                                                                                      else vErrors = vErrors.concat(refVal[26].errors);
                                                                                                                                      errors = vErrors.length;
                                                                                                                                    }
                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                  }
                                                                                                                                  if (valid2) {
                                                                                                                                    if (data.valueTiming === undefined) {
                                                                                                                                      valid2 = true;
                                                                                                                                    } else {
                                                                                                                                      var errs_2 = errors;
                                                                                                                                      if (!refVal[27](data.valueTiming, (dataPath || '') + '.valueTiming', data, 'valueTiming', rootData)) {
                                                                                                                                        if (vErrors === null) vErrors = refVal[27].errors;
                                                                                                                                        else vErrors = vErrors.concat(refVal[27].errors);
                                                                                                                                        errors = vErrors.length;
                                                                                                                                      }
                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                    }
                                                                                                                                    if (valid2) {
                                                                                                                                      if (data.valueMeta === undefined) {
                                                                                                                                        valid2 = true;
                                                                                                                                      } else {
                                                                                                                                        var errs_2 = errors;
                                                                                                                                        if (!refVal[29](data.valueMeta, (dataPath || '') + '.valueMeta', data, 'valueMeta', rootData)) {
                                                                                                                                          if (vErrors === null) vErrors = refVal[29].errors;
                                                                                                                                          else vErrors = vErrors.concat(refVal[29].errors);
                                                                                                                                          errors = vErrors.length;
                                                                                                                                        }
                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                      }
                                                                                                                                      if (valid2) {
                                                                                                                                        if (data.valueElementDefinition === undefined) {
                                                                                                                                          valid2 = true;
                                                                                                                                        } else {
                                                                                                                                          var errs_2 = errors;
                                                                                                                                          if (!refVal[30](data.valueElementDefinition, (dataPath || '') + '.valueElementDefinition', data, 'valueElementDefinition', rootData)) {
                                                                                                                                            if (vErrors === null) vErrors = refVal[30].errors;
                                                                                                                                            else vErrors = vErrors.concat(refVal[30].errors);
                                                                                                                                            errors = vErrors.length;
                                                                                                                                          }
                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                        }
                                                                                                                                        if (valid2) {
                                                                                                                                          if (data.valueContactDetail === undefined) {
                                                                                                                                            valid2 = true;
                                                                                                                                          } else {
                                                                                                                                            var errs_2 = errors;
                                                                                                                                            if (!refVal[35](data.valueContactDetail, (dataPath || '') + '.valueContactDetail', data, 'valueContactDetail', rootData)) {
                                                                                                                                              if (vErrors === null) vErrors = refVal[35].errors;
                                                                                                                                              else vErrors = vErrors.concat(refVal[35].errors);
                                                                                                                                              errors = vErrors.length;
                                                                                                                                            }
                                                                                                                                            var valid2 = errors === errs_2;
                                                                                                                                          }
                                                                                                                                          if (valid2) {
                                                                                                                                            if (data.valueContributor === undefined) {
                                                                                                                                              valid2 = true;
                                                                                                                                            } else {
                                                                                                                                              var errs_2 = errors;
                                                                                                                                              if (!refVal[36](data.valueContributor, (dataPath || '') + '.valueContributor', data, 'valueContributor', rootData)) {
                                                                                                                                                if (vErrors === null) vErrors = refVal[36].errors;
                                                                                                                                                else vErrors = vErrors.concat(refVal[36].errors);
                                                                                                                                                errors = vErrors.length;
                                                                                                                                              }
                                                                                                                                              var valid2 = errors === errs_2;
                                                                                                                                            }
                                                                                                                                            if (valid2) {
                                                                                                                                              if (data.valueDosage === undefined) {
                                                                                                                                                valid2 = true;
                                                                                                                                              } else {
                                                                                                                                                var errs_2 = errors;
                                                                                                                                                if (!refVal[37](data.valueDosage, (dataPath || '') + '.valueDosage', data, 'valueDosage', rootData)) {
                                                                                                                                                  if (vErrors === null) vErrors = refVal[37].errors;
                                                                                                                                                  else vErrors = vErrors.concat(refVal[37].errors);
                                                                                                                                                  errors = vErrors.length;
                                                                                                                                                }
                                                                                                                                                var valid2 = errors === errs_2;
                                                                                                                                              }
                                                                                                                                              if (valid2) {
                                                                                                                                                if (data.valueRelatedArtifact === undefined) {
                                                                                                                                                  valid2 = true;
                                                                                                                                                } else {
                                                                                                                                                  var errs_2 = errors;
                                                                                                                                                  if (!refVal[38](data.valueRelatedArtifact, (dataPath || '') + '.valueRelatedArtifact', data, 'valueRelatedArtifact', rootData)) {
                                                                                                                                                    if (vErrors === null) vErrors = refVal[38].errors;
                                                                                                                                                    else vErrors = vErrors.concat(refVal[38].errors);
                                                                                                                                                    errors = vErrors.length;
                                                                                                                                                  }
                                                                                                                                                  var valid2 = errors === errs_2;
                                                                                                                                                }
                                                                                                                                                if (valid2) {
                                                                                                                                                  if (data.valueUsageContext === undefined) {
                                                                                                                                                    valid2 = true;
                                                                                                                                                  } else {
                                                                                                                                                    var errs_2 = errors;
                                                                                                                                                    if (!refVal[39](data.valueUsageContext, (dataPath || '') + '.valueUsageContext', data, 'valueUsageContext', rootData)) {
                                                                                                                                                      if (vErrors === null) vErrors = refVal[39].errors;
                                                                                                                                                      else vErrors = vErrors.concat(refVal[39].errors);
                                                                                                                                                      errors = vErrors.length;
                                                                                                                                                    }
                                                                                                                                                    var valid2 = errors === errs_2;
                                                                                                                                                  }
                                                                                                                                                  if (valid2) {
                                                                                                                                                    if (data.valueDataRequirement === undefined) {
                                                                                                                                                      valid2 = true;
                                                                                                                                                    } else {
                                                                                                                                                      var errs_2 = errors;
                                                                                                                                                      if (!refVal[40](data.valueDataRequirement, (dataPath || '') + '.valueDataRequirement', data, 'valueDataRequirement', rootData)) {
                                                                                                                                                        if (vErrors === null) vErrors = refVal[40].errors;
                                                                                                                                                        else vErrors = vErrors.concat(refVal[40].errors);
                                                                                                                                                        errors = vErrors.length;
                                                                                                                                                      }
                                                                                                                                                      var valid2 = errors === errs_2;
                                                                                                                                                    }
                                                                                                                                                    if (valid2) {
                                                                                                                                                      if (data.valueParameterDefinition === undefined) {
                                                                                                                                                        valid2 = true;
                                                                                                                                                      } else {
                                                                                                                                                        var errs_2 = errors;
                                                                                                                                                        if (!refVal[43](data.valueParameterDefinition, (dataPath || '') + '.valueParameterDefinition', data, 'valueParameterDefinition', rootData)) {
                                                                                                                                                          if (vErrors === null) vErrors = refVal[43].errors;
                                                                                                                                                          else vErrors = vErrors.concat(refVal[43].errors);
                                                                                                                                                          errors = vErrors.length;
                                                                                                                                                        }
                                                                                                                                                        var valid2 = errors === errs_2;
                                                                                                                                                      }
                                                                                                                                                      if (valid2) {
                                                                                                                                                        if (data.valueTriggerDefinition === undefined) {
                                                                                                                                                          valid2 = true;
                                                                                                                                                        } else {
                                                                                                                                                          var errs_2 = errors;
                                                                                                                                                          if (!refVal[44](data.valueTriggerDefinition, (dataPath || '') + '.valueTriggerDefinition', data, 'valueTriggerDefinition', rootData)) {
                                                                                                                                                            if (vErrors === null) vErrors = refVal[44].errors;
                                                                                                                                                            else vErrors = vErrors.concat(refVal[44].errors);
                                                                                                                                                            errors = vErrors.length;
                                                                                                                                                          }
                                                                                                                                                          var valid2 = errors === errs_2;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal45.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "label": {
          "description": "Describes the purpose of this example amoung the set of examples.",
          "type": "string"
        },
        "_label": {
          "description": "Extensions for label",
          "$ref": "#/definitions/Element"
        },
        "valueBoolean": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "#/definitions/Element"
        },
        "valueInteger": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueDecimal": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_valueDecimal": {
          "description": "Extensions for valueDecimal",
          "$ref": "#/definitions/Element"
        },
        "valueBase64Binary": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "string"
        },
        "_valueBase64Binary": {
          "description": "Extensions for valueBase64Binary",
          "$ref": "#/definitions/Element"
        },
        "valueInstant": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "string"
        },
        "_valueInstant": {
          "description": "Extensions for valueInstant",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueUri": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "string"
        },
        "_valueUri": {
          "description": "Extensions for valueUri",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueDateTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_valueDateTime": {
          "description": "Extensions for valueDateTime",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueCode": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
          "type": "string"
        },
        "_valueCode": {
          "description": "Extensions for valueCode",
          "$ref": "#/definitions/Element"
        },
        "valueOid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
          "type": "string"
        },
        "_valueOid": {
          "description": "Extensions for valueOid",
          "$ref": "#/definitions/Element"
        },
        "valueUuid": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
          "type": "string"
        },
        "_valueUuid": {
          "description": "Extensions for valueUuid",
          "$ref": "#/definitions/Element"
        },
        "valueId": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
          "type": "string"
        },
        "_valueId": {
          "description": "Extensions for valueId",
          "$ref": "#/definitions/Element"
        },
        "valueUnsignedInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "[0]|([1-9][0-9]*)",
          "type": "number"
        },
        "_valueUnsignedInt": {
          "description": "Extensions for valueUnsignedInt",
          "$ref": "#/definitions/Element"
        },
        "valuePositiveInt": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "pattern": "[1-9][0-9]*",
          "type": "number"
        },
        "_valuePositiveInt": {
          "description": "Extensions for valuePositiveInt",
          "$ref": "#/definitions/Element"
        },
        "valueMarkdown": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "type": "string"
        },
        "_valueMarkdown": {
          "description": "Extensions for valueMarkdown",
          "$ref": "#/definitions/Element"
        },
        "valueElement": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Element"
        },
        "valueExtension": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Extension"
        },
        "valueBackboneElement": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/BackboneElement"
        },
        "valueNarrative": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Narrative"
        },
        "valueAnnotation": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Annotation"
        },
        "valueAttachment": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Attachment"
        },
        "valueIdentifier": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Identifier"
        },
        "valueCodeableConcept": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/CodeableConcept"
        },
        "valueCoding": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Coding"
        },
        "valueQuantity": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Quantity"
        },
        "valueDuration": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Duration"
        },
        "valueSimpleQuantity": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Quantity"
        },
        "valueDistance": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Distance"
        },
        "valueCount": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Count"
        },
        "valueMoney": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Money"
        },
        "valueAge": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Age"
        },
        "valueRange": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Range"
        },
        "valuePeriod": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Period"
        },
        "valueRatio": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Ratio"
        },
        "valueReference": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Reference"
        },
        "valueSampledData": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/SampledData"
        },
        "valueSignature": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Signature"
        },
        "valueHumanName": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/HumanName"
        },
        "valueAddress": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Address"
        },
        "valueContactPoint": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactPoint"
        },
        "valueTiming": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Timing"
        },
        "valueMeta": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Meta"
        },
        "valueElementDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ElementDefinition"
        },
        "valueContactDetail": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ContactDetail"
        },
        "valueContributor": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Contributor"
        },
        "valueDosage": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/Dosage"
        },
        "valueRelatedArtifact": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/RelatedArtifact"
        },
        "valueUsageContext": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/UsageContext"
        },
        "valueDataRequirement": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/DataRequirement"
        },
        "valueParameterDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/ParameterDefinition"
        },
        "valueTriggerDefinition": {
          "description": "The actual value for the element, which must be one of the types allowed for this element.",
          "$ref": "#/definitions/TriggerDefinition"
        }
      }
    }]
  };
  refVal45.errors = null;
  refVal[45] = refVal45;
  var refVal46 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.key;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern8.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.key',
                  schemaPath: '#/allOf/1/properties/key/pattern',
                  params: {
                    pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                  },
                  message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.key',
                schemaPath: '#/allOf/1/properties/key/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._key === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._key, (dataPath || '') + '._key', data, '_key', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.requirements === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.requirements !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.requirements',
                    schemaPath: '#/allOf/1/properties/requirements/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._requirements === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._requirements, (dataPath || '') + '._requirements', data, '_requirements', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.severity;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.severity',
                        schemaPath: '#/allOf/1/properties/severity/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var schema2 = validate.schema.allOf[1].properties.severity.enum;
                    var valid2;
                    valid2 = false;
                    for (var i2 = 0; i2 < schema2.length; i2++)
                      if (equal(data1, schema2[i2])) {
                        valid2 = true;
                        break;
                      } if (!valid2) {
                      validate.errors = [{
                        keyword: 'enum',
                        dataPath: (dataPath || '') + '.severity',
                        schemaPath: '#/allOf/1/properties/severity/enum',
                        params: {
                          allowedValues: schema2
                        },
                        message: 'should be equal to one of the allowed values'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._severity === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._severity, (dataPath || '') + '._severity', data, '_severity', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.human === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.human !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.human',
                            schemaPath: '#/allOf/1/properties/human/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._human === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._human, (dataPath || '') + '._human', data, '_human', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.expression === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data.expression !== "string") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.expression',
                                schemaPath: '#/allOf/1/properties/expression/type',
                                params: {
                                  type: 'string'
                                },
                                message: 'should be string'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._expression === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._expression, (dataPath || '') + '._expression', data, '_expression', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data.xpath === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data.xpath !== "string") {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.xpath',
                                    schemaPath: '#/allOf/1/properties/xpath/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._xpath === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._xpath, (dataPath || '') + '._xpath', data, '_xpath', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.source === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.source !== "string") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.source',
                                        schemaPath: '#/allOf/1/properties/source/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._source === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._source, (dataPath || '') + '._source', data, '_source', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal46.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "key": {
          "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
          "type": "string",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
        },
        "_key": {
          "description": "Extensions for key",
          "$ref": "#/definitions/Element"
        },
        "requirements": {
          "description": "Description of why this constraint is necessary or appropriate.",
          "type": "string"
        },
        "_requirements": {
          "description": "Extensions for requirements",
          "$ref": "#/definitions/Element"
        },
        "severity": {
          "description": "Identifies the impact constraint violation has on the conformance of the instance.",
          "enum": ["error", "warning"],
          "type": "string"
        },
        "_severity": {
          "description": "Extensions for severity",
          "$ref": "#/definitions/Element"
        },
        "human": {
          "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
          "type": "string"
        },
        "_human": {
          "description": "Extensions for human",
          "$ref": "#/definitions/Element"
        },
        "expression": {
          "description": "A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met.",
          "type": "string"
        },
        "_expression": {
          "description": "Extensions for expression",
          "$ref": "#/definitions/Element"
        },
        "xpath": {
          "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
          "type": "string"
        },
        "_xpath": {
          "description": "Extensions for xpath",
          "$ref": "#/definitions/Element"
        },
        "source": {
          "description": "A reference to the original source of the constraint, for traceability purposes.",
          "type": "string"
        },
        "_source": {
          "description": "Extensions for source",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal46.errors = null;
  refVal[46] = refVal46;
  var refVal47 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.strength;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.strength',
                schemaPath: '#/allOf/1/properties/strength/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var schema2 = validate.schema.allOf[1].properties.strength.enum;
            var valid2;
            valid2 = false;
            for (var i2 = 0; i2 < schema2.length; i2++)
              if (equal(data1, schema2[i2])) {
                valid2 = true;
                break;
              } if (!valid2) {
              validate.errors = [{
                keyword: 'enum',
                dataPath: (dataPath || '') + '.strength',
                schemaPath: '#/allOf/1/properties/strength/enum',
                params: {
                  allowedValues: schema2
                },
                message: 'should be equal to one of the allowed values'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._strength === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._strength, (dataPath || '') + '._strength', data, '_strength', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.description === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.description !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.description',
                    schemaPath: '#/allOf/1/properties/description/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._description === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._description, (dataPath || '') + '._description', data, '_description', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.valueSetUri === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.valueSetUri !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.valueSetUri',
                        schemaPath: '#/allOf/1/properties/valueSetUri/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._valueSetUri === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._valueSetUri, (dataPath || '') + '._valueSetUri', data, '_valueSetUri', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.valueSetReference === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[8](data.valueSetReference, (dataPath || '') + '.valueSetReference', data, 'valueSetReference', rootData)) {
                          if (vErrors === null) vErrors = refVal[8].errors;
                          else vErrors = vErrors.concat(refVal[8].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal47.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "strength": {
          "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
          "enum": ["required", "extensible", "preferred", "example"],
          "type": "string"
        },
        "_strength": {
          "description": "Extensions for strength",
          "$ref": "#/definitions/Element"
        },
        "description": {
          "description": "Describes the intended use of this particular set of codes.",
          "type": "string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "#/definitions/Element"
        },
        "valueSetUri": {
          "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.",
          "type": "string"
        },
        "_valueSetUri": {
          "description": "Extensions for valueSetUri",
          "$ref": "#/definitions/Element"
        },
        "valueSetReference": {
          "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.",
          "$ref": "#/definitions/Reference"
        }
      }
    }]
  };
  refVal47.errors = null;
  refVal[47] = refVal47;
  var refVal48 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.identity;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 === "string") {
              if (!pattern8.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.identity',
                  schemaPath: '#/allOf/1/properties/identity/pattern',
                  params: {
                    pattern: '[A-Za-z0-9\\-\\.]{1,64}'
                  },
                  message: 'should match pattern "[A-Za-z0-9\\-\\.]{1,64}"'
                }];
                return false;
              }
            } else {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.identity',
                schemaPath: '#/allOf/1/properties/identity/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._identity === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._identity, (dataPath || '') + '._identity', data, '_identity', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.language;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern5.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.language',
                      schemaPath: '#/allOf/1/properties/language/pattern',
                      params: {
                        pattern: '[^\\s]+([\\s]?[^\\s]+)*'
                      },
                      message: 'should match pattern "[^\\s]+([\\s]?[^\\s]+)*"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.language',
                    schemaPath: '#/allOf/1/properties/language/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._language === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._language, (dataPath || '') + '._language', data, '_language', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.map === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.map !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.map',
                        schemaPath: '#/allOf/1/properties/map/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._map === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._map, (dataPath || '') + '._map', data, '_map', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.comment === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.comment !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.comment',
                            schemaPath: '#/allOf/1/properties/comment/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._comment === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._comment, (dataPath || '') + '._comment', data, '_comment', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal48.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "Captures constraints on each element within the resource, profile, or extension.",
      "properties": {
        "identity": {
          "description": "An internal reference to the definition of a mapping.",
          "type": "string",
          "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
        },
        "_identity": {
          "description": "Extensions for identity",
          "$ref": "#/definitions/Element"
        },
        "language": {
          "description": "Identifies the computable language in which mapping.map is expressed.",
          "type": "string",
          "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "#/definitions/Element"
        },
        "map": {
          "description": "Expresses what part of the target specification corresponds to this element.",
          "type": "string"
        },
        "_map": {
          "description": "Extensions for map",
          "$ref": "#/definitions/Element"
        },
        "comment": {
          "description": "Comments that provide information about the mapping or its use.",
          "type": "string"
        },
        "_comment": {
          "description": "Extensions for comment",
          "$ref": "#/definitions/Element"
        }
      }
    }]
  };
  refVal48.errors = null;
  refVal[48] = refVal48;
  var refVal49 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs__0 = errors;
      var valid0 = false;
      var errs_1 = errors;
      if (!refVal[2](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[2].errors;
        else vErrors = vErrors.concat(refVal[2].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      valid0 = valid0 || valid1;
      if (!valid0) {
        var errs_1 = errors;
        if (!refVal[1](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
          if (vErrors === null) vErrors = refVal[1].errors;
          else vErrors = vErrors.concat(refVal[1].errors);
          errors = vErrors.length;
        }
        var valid1 = errors === errs_1;
        valid0 = valid0 || valid1;
      }
      if (!valid0) {
        var err = {
          keyword: 'anyOf',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/anyOf',
          params: {},
          message: 'should match some schema in anyOf'
        };
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
        validate.errors = vErrors;
        return false;
      } else {
        errors = errs__0;
        if (vErrors !== null) {
          if (errs__0) vErrors.length = errs__0;
          else vErrors = null;
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal49.schema = {
    "anyOf": [{
      "$ref": "#/definitions/DomainResource"
    }, {
      "$ref": "#/definitions/Questionnaire"
    }]
  };
  refVal49.errors = null;
  refVal[49] = refVal49;
  var refVal50 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.linkId === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.linkId !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.linkId',
                schemaPath: '#/allOf/1/properties/linkId/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._linkId === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._linkId, (dataPath || '') + '._linkId', data, '_linkId', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.definition === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.definition !== "string") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.definition',
                    schemaPath: '#/allOf/1/properties/definition/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._definition === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._definition, (dataPath || '') + '._definition', data, '_definition', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.code;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (Array.isArray(data1)) {
                      var errs__2 = errors;
                      var valid2;
                      for (var i2 = 0; i2 < data1.length; i2++) {
                        var errs_3 = errors;
                        if (!refVal[11](data1[i2], (dataPath || '') + '.code[' + i2 + ']', data1, i2, rootData)) {
                          if (vErrors === null) vErrors = refVal[11].errors;
                          else vErrors = vErrors.concat(refVal[11].errors);
                          errors = vErrors.length;
                        }
                        var valid3 = errors === errs_3;
                        if (!valid3) break;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.code',
                        schemaPath: '#/allOf/1/properties/code/type',
                        params: {
                          type: 'array'
                        },
                        message: 'should be array'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data.prefix === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data.prefix !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '.prefix',
                          schemaPath: '#/allOf/1/properties/prefix/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data._prefix === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (!refVal[4](data._prefix, (dataPath || '') + '._prefix', data, '_prefix', rootData)) {
                          if (vErrors === null) vErrors = refVal[4].errors;
                          else vErrors = vErrors.concat(refVal[4].errors);
                          errors = vErrors.length;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data.text === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (typeof data.text !== "string") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '.text',
                              schemaPath: '#/allOf/1/properties/text/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data._text === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[4](data._text, (dataPath || '') + '._text', data, '_text', rootData)) {
                              if (vErrors === null) vErrors = refVal[4].errors;
                              else vErrors = vErrors.concat(refVal[4].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            var data1 = data.type;
                            if (data1 === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (typeof data1 !== "string") {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '.type',
                                  schemaPath: '#/allOf/1/properties/type/type',
                                  params: {
                                    type: 'string'
                                  },
                                  message: 'should be string'
                                }];
                                return false;
                              }
                              var schema2 = validate.schema.allOf[1].properties.type.enum;
                              var valid2;
                              valid2 = false;
                              for (var i2 = 0; i2 < schema2.length; i2++)
                                if (equal(data1, schema2[i2])) {
                                  valid2 = true;
                                  break;
                                } if (!valid2) {
                                validate.errors = [{
                                  keyword: 'enum',
                                  dataPath: (dataPath || '') + '.type',
                                  schemaPath: '#/allOf/1/properties/type/enum',
                                  params: {
                                    allowedValues: schema2
                                  },
                                  message: 'should be equal to one of the allowed values'
                                }];
                                return false;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              if (data._type === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (!refVal[4](data._type, (dataPath || '') + '._type', data, '_type', rootData)) {
                                  if (vErrors === null) vErrors = refVal[4].errors;
                                  else vErrors = vErrors.concat(refVal[4].errors);
                                  errors = vErrors.length;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                var data1 = data.enableWhen;
                                if (data1 === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (Array.isArray(data1)) {
                                    var errs__2 = errors;
                                    var valid2;
                                    for (var i2 = 0; i2 < data1.length; i2++) {
                                      var errs_3 = errors;
                                      if (!refVal51(data1[i2], (dataPath || '') + '.enableWhen[' + i2 + ']', data1, i2, rootData)) {
                                        if (vErrors === null) vErrors = refVal51.errors;
                                        else vErrors = vErrors.concat(refVal51.errors);
                                        errors = vErrors.length;
                                      }
                                      var valid3 = errors === errs_3;
                                      if (!valid3) break;
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '.enableWhen',
                                      schemaPath: '#/allOf/1/properties/enableWhen/type',
                                      params: {
                                        type: 'array'
                                      },
                                      message: 'should be array'
                                    }];
                                    return false;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data.required === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data.required !== "boolean") {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.required',
                                        schemaPath: '#/allOf/1/properties/required/type',
                                        params: {
                                          type: 'boolean'
                                        },
                                        message: 'should be boolean'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._required === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._required, (dataPath || '') + '._required', data, '_required', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      if (data.repeats === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data.repeats !== "boolean") {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.repeats',
                                            schemaPath: '#/allOf/1/properties/repeats/type',
                                            params: {
                                              type: 'boolean'
                                            },
                                            message: 'should be boolean'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._repeats === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._repeats, (dataPath || '') + '._repeats', data, '_repeats', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data.readOnly === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data.readOnly !== "boolean") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.readOnly',
                                                schemaPath: '#/allOf/1/properties/readOnly/type',
                                                params: {
                                                  type: 'boolean'
                                                },
                                                message: 'should be boolean'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._readOnly === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._readOnly, (dataPath || '') + '._readOnly', data, '_readOnly', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              var data1 = data.maxLength;
                                              if (data1 === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (typeof data1 !== "number") {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.maxLength',
                                                    schemaPath: '#/allOf/1/properties/maxLength/type',
                                                    params: {
                                                      type: 'number'
                                                    },
                                                    message: 'should be number'
                                                  }];
                                                  return false;
                                                }
                                                if (typeof data1 === "string") {
                                                  if (!pattern0.test(data1)) {
                                                    validate.errors = [{
                                                      keyword: 'pattern',
                                                      dataPath: (dataPath || '') + '.maxLength',
                                                      schemaPath: '#/allOf/1/properties/maxLength/pattern',
                                                      params: {
                                                        pattern: '-?([0]|([1-9][0-9]*))'
                                                      },
                                                      message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                                    }];
                                                    return false;
                                                  }
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data._maxLength === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (!refVal[4](data._maxLength, (dataPath || '') + '._maxLength', data, '_maxLength', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  if (data.options === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (!refVal[8](data.options, (dataPath || '') + '.options', data, 'options', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[8].errors;
                                                      else vErrors = vErrors.concat(refVal[8].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    var data1 = data.option;
                                                    if (data1 === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (Array.isArray(data1)) {
                                                        var errs__2 = errors;
                                                        var valid2;
                                                        for (var i2 = 0; i2 < data1.length; i2++) {
                                                          var errs_3 = errors;
                                                          if (!refVal52(data1[i2], (dataPath || '') + '.option[' + i2 + ']', data1, i2, rootData)) {
                                                            if (vErrors === null) vErrors = refVal52.errors;
                                                            else vErrors = vErrors.concat(refVal52.errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid3 = errors === errs_3;
                                                          if (!valid3) break;
                                                        }
                                                      } else {
                                                        validate.errors = [{
                                                          keyword: 'type',
                                                          dataPath: (dataPath || '') + '.option',
                                                          schemaPath: '#/allOf/1/properties/option/type',
                                                          params: {
                                                            type: 'array'
                                                          },
                                                          message: 'should be array'
                                                        }];
                                                        return false;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      if (data.initialBoolean === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (typeof data.initialBoolean !== "boolean") {
                                                          validate.errors = [{
                                                            keyword: 'type',
                                                            dataPath: (dataPath || '') + '.initialBoolean',
                                                            schemaPath: '#/allOf/1/properties/initialBoolean/type',
                                                            params: {
                                                              type: 'boolean'
                                                            },
                                                            message: 'should be boolean'
                                                          }];
                                                          return false;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        if (data._initialBoolean === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (!refVal[4](data._initialBoolean, (dataPath || '') + '._initialBoolean', data, '_initialBoolean', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                        if (valid2) {
                                                          var data1 = data.initialDecimal;
                                                          if (data1 === undefined) {
                                                            valid2 = true;
                                                          } else {
                                                            var errs_2 = errors;
                                                            if (typeof data1 !== "number") {
                                                              validate.errors = [{
                                                                keyword: 'type',
                                                                dataPath: (dataPath || '') + '.initialDecimal',
                                                                schemaPath: '#/allOf/1/properties/initialDecimal/type',
                                                                params: {
                                                                  type: 'number'
                                                                },
                                                                message: 'should be number'
                                                              }];
                                                              return false;
                                                            }
                                                            if (typeof data1 === "string") {
                                                              if (!pattern1.test(data1)) {
                                                                validate.errors = [{
                                                                  keyword: 'pattern',
                                                                  dataPath: (dataPath || '') + '.initialDecimal',
                                                                  schemaPath: '#/allOf/1/properties/initialDecimal/pattern',
                                                                  params: {
                                                                    pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                                                                  },
                                                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                                                                }];
                                                                return false;
                                                              }
                                                            }
                                                            var valid2 = errors === errs_2;
                                                          }
                                                          if (valid2) {
                                                            if (data._initialDecimal === undefined) {
                                                              valid2 = true;
                                                            } else {
                                                              var errs_2 = errors;
                                                              if (!refVal[4](data._initialDecimal, (dataPath || '') + '._initialDecimal', data, '_initialDecimal', rootData)) {
                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                errors = vErrors.length;
                                                              }
                                                              var valid2 = errors === errs_2;
                                                            }
                                                            if (valid2) {
                                                              var data1 = data.initialInteger;
                                                              if (data1 === undefined) {
                                                                valid2 = true;
                                                              } else {
                                                                var errs_2 = errors;
                                                                if (typeof data1 !== "number") {
                                                                  validate.errors = [{
                                                                    keyword: 'type',
                                                                    dataPath: (dataPath || '') + '.initialInteger',
                                                                    schemaPath: '#/allOf/1/properties/initialInteger/type',
                                                                    params: {
                                                                      type: 'number'
                                                                    },
                                                                    message: 'should be number'
                                                                  }];
                                                                  return false;
                                                                }
                                                                if (typeof data1 === "string") {
                                                                  if (!pattern0.test(data1)) {
                                                                    validate.errors = [{
                                                                      keyword: 'pattern',
                                                                      dataPath: (dataPath || '') + '.initialInteger',
                                                                      schemaPath: '#/allOf/1/properties/initialInteger/pattern',
                                                                      params: {
                                                                        pattern: '-?([0]|([1-9][0-9]*))'
                                                                      },
                                                                      message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                                                    }];
                                                                    return false;
                                                                  }
                                                                }
                                                                var valid2 = errors === errs_2;
                                                              }
                                                              if (valid2) {
                                                                if (data._initialInteger === undefined) {
                                                                  valid2 = true;
                                                                } else {
                                                                  var errs_2 = errors;
                                                                  if (!refVal[4](data._initialInteger, (dataPath || '') + '._initialInteger', data, '_initialInteger', rootData)) {
                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                    errors = vErrors.length;
                                                                  }
                                                                  var valid2 = errors === errs_2;
                                                                }
                                                                if (valid2) {
                                                                  var data1 = data.initialDate;
                                                                  if (data1 === undefined) {
                                                                    valid2 = true;
                                                                  } else {
                                                                    var errs_2 = errors;
                                                                    if (typeof data1 === "string") {
                                                                      if (!pattern2.test(data1)) {
                                                                        validate.errors = [{
                                                                          keyword: 'pattern',
                                                                          dataPath: (dataPath || '') + '.initialDate',
                                                                          schemaPath: '#/allOf/1/properties/initialDate/pattern',
                                                                          params: {
                                                                            pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                                                          },
                                                                          message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                                                        }];
                                                                        return false;
                                                                      }
                                                                    } else {
                                                                      validate.errors = [{
                                                                        keyword: 'type',
                                                                        dataPath: (dataPath || '') + '.initialDate',
                                                                        schemaPath: '#/allOf/1/properties/initialDate/type',
                                                                        params: {
                                                                          type: 'string'
                                                                        },
                                                                        message: 'should be string'
                                                                      }];
                                                                      return false;
                                                                    }
                                                                    var valid2 = errors === errs_2;
                                                                  }
                                                                  if (valid2) {
                                                                    if (data._initialDate === undefined) {
                                                                      valid2 = true;
                                                                    } else {
                                                                      var errs_2 = errors;
                                                                      if (!refVal[4](data._initialDate, (dataPath || '') + '._initialDate', data, '_initialDate', rootData)) {
                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                        errors = vErrors.length;
                                                                      }
                                                                      var valid2 = errors === errs_2;
                                                                    }
                                                                    if (valid2) {
                                                                      var data1 = data.initialDateTime;
                                                                      if (data1 === undefined) {
                                                                        valid2 = true;
                                                                      } else {
                                                                        var errs_2 = errors;
                                                                        if (typeof data1 === "string") {
                                                                          if (!pattern3.test(data1)) {
                                                                            validate.errors = [{
                                                                              keyword: 'pattern',
                                                                              dataPath: (dataPath || '') + '.initialDateTime',
                                                                              schemaPath: '#/allOf/1/properties/initialDateTime/pattern',
                                                                              params: {
                                                                                pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                                                              },
                                                                              message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                                                            }];
                                                                            return false;
                                                                          }
                                                                        } else {
                                                                          validate.errors = [{
                                                                            keyword: 'type',
                                                                            dataPath: (dataPath || '') + '.initialDateTime',
                                                                            schemaPath: '#/allOf/1/properties/initialDateTime/type',
                                                                            params: {
                                                                              type: 'string'
                                                                            },
                                                                            message: 'should be string'
                                                                          }];
                                                                          return false;
                                                                        }
                                                                        var valid2 = errors === errs_2;
                                                                      }
                                                                      if (valid2) {
                                                                        if (data._initialDateTime === undefined) {
                                                                          valid2 = true;
                                                                        } else {
                                                                          var errs_2 = errors;
                                                                          if (!refVal[4](data._initialDateTime, (dataPath || '') + '._initialDateTime', data, '_initialDateTime', rootData)) {
                                                                            if (vErrors === null) vErrors = refVal[4].errors;
                                                                            else vErrors = vErrors.concat(refVal[4].errors);
                                                                            errors = vErrors.length;
                                                                          }
                                                                          var valid2 = errors === errs_2;
                                                                        }
                                                                        if (valid2) {
                                                                          var data1 = data.initialTime;
                                                                          if (data1 === undefined) {
                                                                            valid2 = true;
                                                                          } else {
                                                                            var errs_2 = errors;
                                                                            if (typeof data1 === "string") {
                                                                              if (!pattern4.test(data1)) {
                                                                                validate.errors = [{
                                                                                  keyword: 'pattern',
                                                                                  dataPath: (dataPath || '') + '.initialTime',
                                                                                  schemaPath: '#/allOf/1/properties/initialTime/pattern',
                                                                                  params: {
                                                                                    pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                                                                  },
                                                                                  message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                                                                }];
                                                                                return false;
                                                                              }
                                                                            } else {
                                                                              validate.errors = [{
                                                                                keyword: 'type',
                                                                                dataPath: (dataPath || '') + '.initialTime',
                                                                                schemaPath: '#/allOf/1/properties/initialTime/type',
                                                                                params: {
                                                                                  type: 'string'
                                                                                },
                                                                                message: 'should be string'
                                                                              }];
                                                                              return false;
                                                                            }
                                                                            var valid2 = errors === errs_2;
                                                                          }
                                                                          if (valid2) {
                                                                            if (data._initialTime === undefined) {
                                                                              valid2 = true;
                                                                            } else {
                                                                              var errs_2 = errors;
                                                                              if (!refVal[4](data._initialTime, (dataPath || '') + '._initialTime', data, '_initialTime', rootData)) {
                                                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                                                errors = vErrors.length;
                                                                              }
                                                                              var valid2 = errors === errs_2;
                                                                            }
                                                                            if (valid2) {
                                                                              if (data.initialString === undefined) {
                                                                                valid2 = true;
                                                                              } else {
                                                                                var errs_2 = errors;
                                                                                if (typeof data.initialString !== "string") {
                                                                                  validate.errors = [{
                                                                                    keyword: 'type',
                                                                                    dataPath: (dataPath || '') + '.initialString',
                                                                                    schemaPath: '#/allOf/1/properties/initialString/type',
                                                                                    params: {
                                                                                      type: 'string'
                                                                                    },
                                                                                    message: 'should be string'
                                                                                  }];
                                                                                  return false;
                                                                                }
                                                                                var valid2 = errors === errs_2;
                                                                              }
                                                                              if (valid2) {
                                                                                if (data._initialString === undefined) {
                                                                                  valid2 = true;
                                                                                } else {
                                                                                  var errs_2 = errors;
                                                                                  if (!refVal[4](data._initialString, (dataPath || '') + '._initialString', data, '_initialString', rootData)) {
                                                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                                                    errors = vErrors.length;
                                                                                  }
                                                                                  var valid2 = errors === errs_2;
                                                                                }
                                                                                if (valid2) {
                                                                                  if (data.initialUri === undefined) {
                                                                                    valid2 = true;
                                                                                  } else {
                                                                                    var errs_2 = errors;
                                                                                    if (typeof data.initialUri !== "string") {
                                                                                      validate.errors = [{
                                                                                        keyword: 'type',
                                                                                        dataPath: (dataPath || '') + '.initialUri',
                                                                                        schemaPath: '#/allOf/1/properties/initialUri/type',
                                                                                        params: {
                                                                                          type: 'string'
                                                                                        },
                                                                                        message: 'should be string'
                                                                                      }];
                                                                                      return false;
                                                                                    }
                                                                                    var valid2 = errors === errs_2;
                                                                                  }
                                                                                  if (valid2) {
                                                                                    if (data._initialUri === undefined) {
                                                                                      valid2 = true;
                                                                                    } else {
                                                                                      var errs_2 = errors;
                                                                                      if (!refVal[4](data._initialUri, (dataPath || '') + '._initialUri', data, '_initialUri', rootData)) {
                                                                                        if (vErrors === null) vErrors = refVal[4].errors;
                                                                                        else vErrors = vErrors.concat(refVal[4].errors);
                                                                                        errors = vErrors.length;
                                                                                      }
                                                                                      var valid2 = errors === errs_2;
                                                                                    }
                                                                                    if (valid2) {
                                                                                      if (data.initialAttachment === undefined) {
                                                                                        valid2 = true;
                                                                                      } else {
                                                                                        var errs_2 = errors;
                                                                                        if (!refVal[13](data.initialAttachment, (dataPath || '') + '.initialAttachment', data, 'initialAttachment', rootData)) {
                                                                                          if (vErrors === null) vErrors = refVal[13].errors;
                                                                                          else vErrors = vErrors.concat(refVal[13].errors);
                                                                                          errors = vErrors.length;
                                                                                        }
                                                                                        var valid2 = errors === errs_2;
                                                                                      }
                                                                                      if (valid2) {
                                                                                        if (data.initialCoding === undefined) {
                                                                                          valid2 = true;
                                                                                        } else {
                                                                                          var errs_2 = errors;
                                                                                          if (!refVal[11](data.initialCoding, (dataPath || '') + '.initialCoding', data, 'initialCoding', rootData)) {
                                                                                            if (vErrors === null) vErrors = refVal[11].errors;
                                                                                            else vErrors = vErrors.concat(refVal[11].errors);
                                                                                            errors = vErrors.length;
                                                                                          }
                                                                                          var valid2 = errors === errs_2;
                                                                                        }
                                                                                        if (valid2) {
                                                                                          if (data.initialQuantity === undefined) {
                                                                                            valid2 = true;
                                                                                          } else {
                                                                                            var errs_2 = errors;
                                                                                            if (!refVal[14](data.initialQuantity, (dataPath || '') + '.initialQuantity', data, 'initialQuantity', rootData)) {
                                                                                              if (vErrors === null) vErrors = refVal[14].errors;
                                                                                              else vErrors = vErrors.concat(refVal[14].errors);
                                                                                              errors = vErrors.length;
                                                                                            }
                                                                                            var valid2 = errors === errs_2;
                                                                                          }
                                                                                          if (valid2) {
                                                                                            if (data.initialReference === undefined) {
                                                                                              valid2 = true;
                                                                                            } else {
                                                                                              var errs_2 = errors;
                                                                                              if (!refVal[8](data.initialReference, (dataPath || '') + '.initialReference', data, 'initialReference', rootData)) {
                                                                                                if (vErrors === null) vErrors = refVal[8].errors;
                                                                                                else vErrors = vErrors.concat(refVal[8].errors);
                                                                                                errors = vErrors.length;
                                                                                              }
                                                                                              var valid2 = errors === errs_2;
                                                                                            }
                                                                                            if (valid2) {
                                                                                              var data1 = data.item;
                                                                                              if (data1 === undefined) {
                                                                                                valid2 = true;
                                                                                              } else {
                                                                                                var errs_2 = errors;
                                                                                                if (Array.isArray(data1)) {
                                                                                                  var errs__2 = errors;
                                                                                                  var valid2;
                                                                                                  for (var i2 = 0; i2 < data1.length; i2++) {
                                                                                                    var errs_3 = errors;
                                                                                                    if (!refVal[50](data1[i2], (dataPath || '') + '.item[' + i2 + ']', data1, i2, rootData)) {
                                                                                                      if (vErrors === null) vErrors = refVal[50].errors;
                                                                                                      else vErrors = vErrors.concat(refVal[50].errors);
                                                                                                      errors = vErrors.length;
                                                                                                    }
                                                                                                    var valid3 = errors === errs_3;
                                                                                                    if (!valid3) break;
                                                                                                  }
                                                                                                } else {
                                                                                                  validate.errors = [{
                                                                                                    keyword: 'type',
                                                                                                    dataPath: (dataPath || '') + '.item',
                                                                                                    schemaPath: '#/allOf/1/properties/item/type',
                                                                                                    params: {
                                                                                                      type: 'array'
                                                                                                    },
                                                                                                    message: 'should be array'
                                                                                                  }];
                                                                                                  return false;
                                                                                                }
                                                                                                var valid2 = errors === errs_2;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal50.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.",
      "properties": {
        "linkId": {
          "description": "An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.",
          "type": "string"
        },
        "_linkId": {
          "description": "Extensions for linkId",
          "$ref": "#/definitions/Element"
        },
        "definition": {
          "description": "A reference to an [[[ElementDefinition]]] that provides the details for the item. If a definition is provided, then the following element values can be inferred from the definition: \n\n* code (ElementDefinition.code)\n* type (ElementDefinition.type)\n* required (ElementDefinition.min)\n* repeats (ElementDefinition.max)\n* maxLength (ElementDefinition.maxLength)\n* options (ElementDefinition.binding)\n\nAny information provided in these elements on a Questionnaire Item overrides the information from the definition.",
          "type": "string"
        },
        "_definition": {
          "description": "Extensions for definition",
          "$ref": "#/definitions/Element"
        },
        "code": {
          "description": "A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coding"
          }
        },
        "prefix": {
          "description": "A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.",
          "type": "string"
        },
        "_prefix": {
          "description": "Extensions for prefix",
          "$ref": "#/definitions/Element"
        },
        "text": {
          "description": "The name of a section, the text of a question or text content for a display item.",
          "type": "string"
        },
        "_text": {
          "description": "Extensions for text",
          "$ref": "#/definitions/Element"
        },
        "type": {
          "description": "The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).",
          "enum": ["group", "display", "boolean", "decimal", "integer", "date", "dateTime", "time", "string", "text", "url", "choice", "open-choice", "attachment", "reference", "quantity"],
          "type": "string"
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "#/definitions/Element"
        },
        "enableWhen": {
          "description": "A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Questionnaire_EnableWhen"
          }
        },
        "required": {
          "description": "An indication, if true, that the item must be present in a \"completed\" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.",
          "type": "boolean"
        },
        "_required": {
          "description": "Extensions for required",
          "$ref": "#/definitions/Element"
        },
        "repeats": {
          "description": "An indication, if true, that the item may occur multiple times in the response, collecting multiple answers answers for questions or multiple sets of answers for groups.",
          "type": "boolean"
        },
        "_repeats": {
          "description": "Extensions for repeats",
          "$ref": "#/definitions/Element"
        },
        "readOnly": {
          "description": "An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.",
          "type": "boolean"
        },
        "_readOnly": {
          "description": "Extensions for readOnly",
          "$ref": "#/definitions/Element"
        },
        "maxLength": {
          "description": "The maximum number of characters that are permitted in the answer to be considered a \"valid\" QuestionnaireResponse.",
          "type": "number",
          "pattern": "-?([0]|([1-9][0-9]*))"
        },
        "_maxLength": {
          "description": "Extensions for maxLength",
          "$ref": "#/definitions/Element"
        },
        "options": {
          "description": "A reference to a value set containing a list of codes representing permitted answers for a \"choice\" or \"open-choice\" question.",
          "$ref": "#/definitions/Reference"
        },
        "option": {
          "description": "One of the permitted answers for a \"choice\" or \"open-choice\" question.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Questionnaire_Option"
          }
        },
        "initialBoolean": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "type": "boolean"
        },
        "_initialBoolean": {
          "description": "Extensions for initialBoolean",
          "$ref": "#/definitions/Element"
        },
        "initialDecimal": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_initialDecimal": {
          "description": "Extensions for initialDecimal",
          "$ref": "#/definitions/Element"
        },
        "initialInteger": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_initialInteger": {
          "description": "Extensions for initialInteger",
          "$ref": "#/definitions/Element"
        },
        "initialDate": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_initialDate": {
          "description": "Extensions for initialDate",
          "$ref": "#/definitions/Element"
        },
        "initialDateTime": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_initialDateTime": {
          "description": "Extensions for initialDateTime",
          "$ref": "#/definitions/Element"
        },
        "initialTime": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_initialTime": {
          "description": "Extensions for initialTime",
          "$ref": "#/definitions/Element"
        },
        "initialString": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "type": "string"
        },
        "_initialString": {
          "description": "Extensions for initialString",
          "$ref": "#/definitions/Element"
        },
        "initialUri": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "type": "string"
        },
        "_initialUri": {
          "description": "Extensions for initialUri",
          "$ref": "#/definitions/Element"
        },
        "initialAttachment": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "$ref": "#/definitions/Attachment"
        },
        "initialCoding": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "$ref": "#/definitions/Coding"
        },
        "initialQuantity": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "$ref": "#/definitions/Quantity"
        },
        "initialReference": {
          "description": "The value that should be defaulted when initially rendering the questionnaire for user input.",
          "$ref": "#/definitions/Reference"
        },
        "item": {
          "description": "Text, questions and other groups to be nested beneath a question or group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Questionnaire_Item"
          }
        }
      }
    }]
  };
  refVal50.errors = null;
  refVal[50] = refVal50;
  var refVal51 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          if (data.question === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data.question !== "string") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.question',
                schemaPath: '#/allOf/1/properties/question/type',
                params: {
                  type: 'string'
                },
                message: 'should be string'
              }];
              return false;
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._question === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._question, (dataPath || '') + '._question', data, '_question', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              if (data.hasAnswer === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data.hasAnswer !== "boolean") {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.hasAnswer',
                    schemaPath: '#/allOf/1/properties/hasAnswer/type',
                    params: {
                      type: 'boolean'
                    },
                    message: 'should be boolean'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._hasAnswer === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._hasAnswer, (dataPath || '') + '._hasAnswer', data, '_hasAnswer', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data.answerBoolean === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data.answerBoolean !== "boolean") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.answerBoolean',
                        schemaPath: '#/allOf/1/properties/answerBoolean/type',
                        params: {
                          type: 'boolean'
                        },
                        message: 'should be boolean'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._answerBoolean === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._answerBoolean, (dataPath || '') + '._answerBoolean', data, '_answerBoolean', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      var data1 = data.answerDecimal;
                      if (data1 === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1 !== "number") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.answerDecimal',
                            schemaPath: '#/allOf/1/properties/answerDecimal/type',
                            params: {
                              type: 'number'
                            },
                            message: 'should be number'
                          }];
                          return false;
                        }
                        if (typeof data1 === "string") {
                          if (!pattern1.test(data1)) {
                            validate.errors = [{
                              keyword: 'pattern',
                              dataPath: (dataPath || '') + '.answerDecimal',
                              schemaPath: '#/allOf/1/properties/answerDecimal/pattern',
                              params: {
                                pattern: '-?([0]|([1-9][0-9]*))(\\.[0-9]+)?'
                              },
                              message: 'should match pattern "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"'
                            }];
                            return false;
                          }
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._answerDecimal === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._answerDecimal, (dataPath || '') + '._answerDecimal', data, '_answerDecimal', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          var data1 = data.answerInteger;
                          if (data1 === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1 !== "number") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '.answerInteger',
                                schemaPath: '#/allOf/1/properties/answerInteger/type',
                                params: {
                                  type: 'number'
                                },
                                message: 'should be number'
                              }];
                              return false;
                            }
                            if (typeof data1 === "string") {
                              if (!pattern0.test(data1)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: (dataPath || '') + '.answerInteger',
                                  schemaPath: '#/allOf/1/properties/answerInteger/pattern',
                                  params: {
                                    pattern: '-?([0]|([1-9][0-9]*))'
                                  },
                                  message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                                }];
                                return false;
                              }
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            if (data._answerInteger === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (!refVal[4](data._answerInteger, (dataPath || '') + '._answerInteger', data, '_answerInteger', rootData)) {
                                if (vErrors === null) vErrors = refVal[4].errors;
                                else vErrors = vErrors.concat(refVal[4].errors);
                                errors = vErrors.length;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data1 = data.answerDate;
                              if (data1 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if (typeof data1 === "string") {
                                  if (!pattern2.test(data1)) {
                                    validate.errors = [{
                                      keyword: 'pattern',
                                      dataPath: (dataPath || '') + '.answerDate',
                                      schemaPath: '#/allOf/1/properties/answerDate/pattern',
                                      params: {
                                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                                      },
                                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                                    }];
                                    return false;
                                  }
                                } else {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: (dataPath || '') + '.answerDate',
                                    schemaPath: '#/allOf/1/properties/answerDate/type',
                                    params: {
                                      type: 'string'
                                    },
                                    message: 'should be string'
                                  }];
                                  return false;
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                if (data._answerDate === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if (!refVal[4](data._answerDate, (dataPath || '') + '._answerDate', data, '_answerDate', rootData)) {
                                    if (vErrors === null) vErrors = refVal[4].errors;
                                    else vErrors = vErrors.concat(refVal[4].errors);
                                    errors = vErrors.length;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  var data1 = data.answerDateTime;
                                  if (data1 === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (typeof data1 === "string") {
                                      if (!pattern3.test(data1)) {
                                        validate.errors = [{
                                          keyword: 'pattern',
                                          dataPath: (dataPath || '') + '.answerDateTime',
                                          schemaPath: '#/allOf/1/properties/answerDateTime/pattern',
                                          params: {
                                            pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?'
                                          },
                                          message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"'
                                        }];
                                        return false;
                                      }
                                    } else {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '.answerDateTime',
                                        schemaPath: '#/allOf/1/properties/answerDateTime/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      }];
                                      return false;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                  if (valid2) {
                                    if (data._answerDateTime === undefined) {
                                      valid2 = true;
                                    } else {
                                      var errs_2 = errors;
                                      if (!refVal[4](data._answerDateTime, (dataPath || '') + '._answerDateTime', data, '_answerDateTime', rootData)) {
                                        if (vErrors === null) vErrors = refVal[4].errors;
                                        else vErrors = vErrors.concat(refVal[4].errors);
                                        errors = vErrors.length;
                                      }
                                      var valid2 = errors === errs_2;
                                    }
                                    if (valid2) {
                                      var data1 = data.answerTime;
                                      if (data1 === undefined) {
                                        valid2 = true;
                                      } else {
                                        var errs_2 = errors;
                                        if (typeof data1 === "string") {
                                          if (!pattern4.test(data1)) {
                                            validate.errors = [{
                                              keyword: 'pattern',
                                              dataPath: (dataPath || '') + '.answerTime',
                                              schemaPath: '#/allOf/1/properties/answerTime/pattern',
                                              params: {
                                                pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                                              },
                                              message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                                            }];
                                            return false;
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: (dataPath || '') + '.answerTime',
                                            schemaPath: '#/allOf/1/properties/answerTime/type',
                                            params: {
                                              type: 'string'
                                            },
                                            message: 'should be string'
                                          }];
                                          return false;
                                        }
                                        var valid2 = errors === errs_2;
                                      }
                                      if (valid2) {
                                        if (data._answerTime === undefined) {
                                          valid2 = true;
                                        } else {
                                          var errs_2 = errors;
                                          if (!refVal[4](data._answerTime, (dataPath || '') + '._answerTime', data, '_answerTime', rootData)) {
                                            if (vErrors === null) vErrors = refVal[4].errors;
                                            else vErrors = vErrors.concat(refVal[4].errors);
                                            errors = vErrors.length;
                                          }
                                          var valid2 = errors === errs_2;
                                        }
                                        if (valid2) {
                                          if (data.answerString === undefined) {
                                            valid2 = true;
                                          } else {
                                            var errs_2 = errors;
                                            if (typeof data.answerString !== "string") {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: (dataPath || '') + '.answerString',
                                                schemaPath: '#/allOf/1/properties/answerString/type',
                                                params: {
                                                  type: 'string'
                                                },
                                                message: 'should be string'
                                              }];
                                              return false;
                                            }
                                            var valid2 = errors === errs_2;
                                          }
                                          if (valid2) {
                                            if (data._answerString === undefined) {
                                              valid2 = true;
                                            } else {
                                              var errs_2 = errors;
                                              if (!refVal[4](data._answerString, (dataPath || '') + '._answerString', data, '_answerString', rootData)) {
                                                if (vErrors === null) vErrors = refVal[4].errors;
                                                else vErrors = vErrors.concat(refVal[4].errors);
                                                errors = vErrors.length;
                                              }
                                              var valid2 = errors === errs_2;
                                            }
                                            if (valid2) {
                                              if (data.answerUri === undefined) {
                                                valid2 = true;
                                              } else {
                                                var errs_2 = errors;
                                                if (typeof data.answerUri !== "string") {
                                                  validate.errors = [{
                                                    keyword: 'type',
                                                    dataPath: (dataPath || '') + '.answerUri',
                                                    schemaPath: '#/allOf/1/properties/answerUri/type',
                                                    params: {
                                                      type: 'string'
                                                    },
                                                    message: 'should be string'
                                                  }];
                                                  return false;
                                                }
                                                var valid2 = errors === errs_2;
                                              }
                                              if (valid2) {
                                                if (data._answerUri === undefined) {
                                                  valid2 = true;
                                                } else {
                                                  var errs_2 = errors;
                                                  if (!refVal[4](data._answerUri, (dataPath || '') + '._answerUri', data, '_answerUri', rootData)) {
                                                    if (vErrors === null) vErrors = refVal[4].errors;
                                                    else vErrors = vErrors.concat(refVal[4].errors);
                                                    errors = vErrors.length;
                                                  }
                                                  var valid2 = errors === errs_2;
                                                }
                                                if (valid2) {
                                                  if (data.answerAttachment === undefined) {
                                                    valid2 = true;
                                                  } else {
                                                    var errs_2 = errors;
                                                    if (!refVal[13](data.answerAttachment, (dataPath || '') + '.answerAttachment', data, 'answerAttachment', rootData)) {
                                                      if (vErrors === null) vErrors = refVal[13].errors;
                                                      else vErrors = vErrors.concat(refVal[13].errors);
                                                      errors = vErrors.length;
                                                    }
                                                    var valid2 = errors === errs_2;
                                                  }
                                                  if (valid2) {
                                                    if (data.answerCoding === undefined) {
                                                      valid2 = true;
                                                    } else {
                                                      var errs_2 = errors;
                                                      if (!refVal[11](data.answerCoding, (dataPath || '') + '.answerCoding', data, 'answerCoding', rootData)) {
                                                        if (vErrors === null) vErrors = refVal[11].errors;
                                                        else vErrors = vErrors.concat(refVal[11].errors);
                                                        errors = vErrors.length;
                                                      }
                                                      var valid2 = errors === errs_2;
                                                    }
                                                    if (valid2) {
                                                      if (data.answerQuantity === undefined) {
                                                        valid2 = true;
                                                      } else {
                                                        var errs_2 = errors;
                                                        if (!refVal[14](data.answerQuantity, (dataPath || '') + '.answerQuantity', data, 'answerQuantity', rootData)) {
                                                          if (vErrors === null) vErrors = refVal[14].errors;
                                                          else vErrors = vErrors.concat(refVal[14].errors);
                                                          errors = vErrors.length;
                                                        }
                                                        var valid2 = errors === errs_2;
                                                      }
                                                      if (valid2) {
                                                        if (data.answerReference === undefined) {
                                                          valid2 = true;
                                                        } else {
                                                          var errs_2 = errors;
                                                          if (!refVal[8](data.answerReference, (dataPath || '') + '.answerReference', data, 'answerReference', rootData)) {
                                                            if (vErrors === null) vErrors = refVal[8].errors;
                                                            else vErrors = vErrors.concat(refVal[8].errors);
                                                            errors = vErrors.length;
                                                          }
                                                          var valid2 = errors === errs_2;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal51.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.",
      "properties": {
        "question": {
          "description": "The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.",
          "type": "string"
        },
        "_question": {
          "description": "Extensions for question",
          "$ref": "#/definitions/Element"
        },
        "hasAnswer": {
          "description": "An indication that this item should be enabled only if the specified question is answered (hasAnswer=true) or not answered (hasAnswer=false).",
          "type": "boolean"
        },
        "_hasAnswer": {
          "description": "Extensions for hasAnswer",
          "$ref": "#/definitions/Element"
        },
        "answerBoolean": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "type": "boolean"
        },
        "_answerBoolean": {
          "description": "Extensions for answerBoolean",
          "$ref": "#/definitions/Element"
        },
        "answerDecimal": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
          "type": "number"
        },
        "_answerDecimal": {
          "description": "Extensions for answerDecimal",
          "$ref": "#/definitions/Element"
        },
        "answerInteger": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_answerInteger": {
          "description": "Extensions for answerInteger",
          "$ref": "#/definitions/Element"
        },
        "answerDate": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_answerDate": {
          "description": "Extensions for answerDate",
          "$ref": "#/definitions/Element"
        },
        "answerDateTime": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
          "type": "string"
        },
        "_answerDateTime": {
          "description": "Extensions for answerDateTime",
          "$ref": "#/definitions/Element"
        },
        "answerTime": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_answerTime": {
          "description": "Extensions for answerTime",
          "$ref": "#/definitions/Element"
        },
        "answerString": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "type": "string"
        },
        "_answerString": {
          "description": "Extensions for answerString",
          "$ref": "#/definitions/Element"
        },
        "answerUri": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "type": "string"
        },
        "_answerUri": {
          "description": "Extensions for answerUri",
          "$ref": "#/definitions/Element"
        },
        "answerAttachment": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "$ref": "#/definitions/Attachment"
        },
        "answerCoding": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "$ref": "#/definitions/Coding"
        },
        "answerQuantity": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "$ref": "#/definitions/Quantity"
        },
        "answerReference": {
          "description": "An answer that the referenced question must match in order for the item to be enabled.",
          "$ref": "#/definitions/Reference"
        }
      }
    }]
  };
  refVal51.errors = null;
  refVal[51] = refVal51;
  var refVal52 = (() => {
    var pattern0 = new RegExp('-?([0]|([1-9][0-9]*))');
    var pattern1 = new RegExp('-?([0]|([1-9][0-9]*))(\\.[0-9]+)?');
    var pattern2 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?');
    var pattern3 = new RegExp('-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?');
    var pattern4 = new RegExp('([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?');
    var pattern5 = new RegExp('[^\\s]+([\\s]?[^\\s]+)*');
    var pattern6 = new RegExp('urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*');
    var pattern7 = new RegExp('urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    var pattern8 = new RegExp('[A-Za-z0-9\\-\\.]{1,64}');
    var pattern9 = new RegExp('[0]|([1-9][0-9]*)');
    var pattern10 = new RegExp('[1-9][0-9]*');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      var errs_1 = errors;
      if (!refVal[6](data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
        if (vErrors === null) vErrors = refVal[6].errors;
        else vErrors = vErrors.concat(refVal[6].errors);
        errors = vErrors.length;
      }
      var valid1 = errors === errs_1;
      if (valid1) {
        var errs_1 = errors;
        if ((data && typeof data === "object" && !Array.isArray(data))) {
          var errs__1 = errors;
          var valid2 = true;
          var data1 = data.valueInteger;
          if (data1 === undefined) {
            valid2 = true;
          } else {
            var errs_2 = errors;
            if (typeof data1 !== "number") {
              validate.errors = [{
                keyword: 'type',
                dataPath: (dataPath || '') + '.valueInteger',
                schemaPath: '#/allOf/1/properties/valueInteger/type',
                params: {
                  type: 'number'
                },
                message: 'should be number'
              }];
              return false;
            }
            if (typeof data1 === "string") {
              if (!pattern0.test(data1)) {
                validate.errors = [{
                  keyword: 'pattern',
                  dataPath: (dataPath || '') + '.valueInteger',
                  schemaPath: '#/allOf/1/properties/valueInteger/pattern',
                  params: {
                    pattern: '-?([0]|([1-9][0-9]*))'
                  },
                  message: 'should match pattern "-?([0]|([1-9][0-9]*))"'
                }];
                return false;
              }
            }
            var valid2 = errors === errs_2;
          }
          if (valid2) {
            if (data._valueInteger === undefined) {
              valid2 = true;
            } else {
              var errs_2 = errors;
              if (!refVal[4](data._valueInteger, (dataPath || '') + '._valueInteger', data, '_valueInteger', rootData)) {
                if (vErrors === null) vErrors = refVal[4].errors;
                else vErrors = vErrors.concat(refVal[4].errors);
                errors = vErrors.length;
              }
              var valid2 = errors === errs_2;
            }
            if (valid2) {
              var data1 = data.valueDate;
              if (data1 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data1 === "string") {
                  if (!pattern2.test(data1)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '.valueDate',
                      schemaPath: '#/allOf/1/properties/valueDate/pattern',
                      params: {
                        pattern: '-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?'
                      },
                      message: 'should match pattern "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '.valueDate',
                    schemaPath: '#/allOf/1/properties/valueDate/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data._valueDate === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (!refVal[4](data._valueDate, (dataPath || '') + '._valueDate', data, '_valueDate', rootData)) {
                    if (vErrors === null) vErrors = refVal[4].errors;
                    else vErrors = vErrors.concat(refVal[4].errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  var data1 = data.valueTime;
                  if (data1 === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern4.test(data1)) {
                        validate.errors = [{
                          keyword: 'pattern',
                          dataPath: (dataPath || '') + '.valueTime',
                          schemaPath: '#/allOf/1/properties/valueTime/pattern',
                          params: {
                            pattern: '([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'
                          },
                          message: 'should match pattern "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"'
                        }];
                        return false;
                      }
                    } else {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '.valueTime',
                        schemaPath: '#/allOf/1/properties/valueTime/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data._valueTime === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[4](data._valueTime, (dataPath || '') + '._valueTime', data, '_valueTime', rootData)) {
                        if (vErrors === null) vErrors = refVal[4].errors;
                        else vErrors = vErrors.concat(refVal[4].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data.valueString === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data.valueString !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '.valueString',
                            schemaPath: '#/allOf/1/properties/valueString/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data._valueString === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (!refVal[4](data._valueString, (dataPath || '') + '._valueString', data, '_valueString', rootData)) {
                            if (vErrors === null) vErrors = refVal[4].errors;
                            else vErrors = vErrors.concat(refVal[4].errors);
                            errors = vErrors.length;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data.valueCoding === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (!refVal[11](data.valueCoding, (dataPath || '') + '.valueCoding', data, 'valueCoding', rootData)) {
                              if (vErrors === null) vErrors = refVal[11].errors;
                              else vErrors = vErrors.concat(refVal[11].errors);
                              errors = vErrors.length;
                            }
                            var valid2 = errors === errs_2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var valid1 = errors === errs_1;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal52.schema = {
    "allOf": [{
      "$ref": "#/definitions/BackboneElement"
    }, {
      "description": "A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.",
      "properties": {
        "valueInteger": {
          "description": "A potential answer that's allowed as the answer to this question.",
          "pattern": "-?([0]|([1-9][0-9]*))",
          "type": "number"
        },
        "_valueInteger": {
          "description": "Extensions for valueInteger",
          "$ref": "#/definitions/Element"
        },
        "valueDate": {
          "description": "A potential answer that's allowed as the answer to this question.",
          "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "#/definitions/Element"
        },
        "valueTime": {
          "description": "A potential answer that's allowed as the answer to this question.",
          "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
          "type": "string"
        },
        "_valueTime": {
          "description": "Extensions for valueTime",
          "$ref": "#/definitions/Element"
        },
        "valueString": {
          "description": "A potential answer that's allowed as the answer to this question.",
          "type": "string"
        },
        "_valueString": {
          "description": "Extensions for valueString",
          "$ref": "#/definitions/Element"
        },
        "valueCoding": {
          "description": "A potential answer that's allowed as the answer to this question.",
          "$ref": "#/definitions/Coding"
        }
      }
    }]
  };
  refVal52.errors = null;
  refVal[52] = refVal52;
  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
    /*# sourceURL=http://hl7.org/fhir/json-schema/Questionnaire */
    var vErrors = null;
    var errors = 0;
    if (rootData === undefined) rootData = data;
    if (!refVal1(data, (dataPath || ''), parentData, parentDataProperty, rootData)) {
      if (vErrors === null) vErrors = refVal1.errors;
      else vErrors = vErrors.concat(refVal1.errors);
      errors = vErrors.length;
    }
    validate.errors = vErrors;
    return errors === 0;
  };
})();
validate.errors = null;

export default validate;
